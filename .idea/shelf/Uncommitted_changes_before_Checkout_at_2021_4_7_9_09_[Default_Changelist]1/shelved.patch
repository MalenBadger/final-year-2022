Index: src/main/resources/generatorConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE generatorConfiguration\r\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\r\n\r\n<generatorConfiguration>\r\n\r\n    <context id=\"Tables\" targetRuntime=\"MyBatis3\">\r\n\r\n        <!-- 注释 -->\r\n        <commentGenerator>\r\n            <!-- 是否生成注释代时间戳 -->\r\n            <property name=\"suppressDate\" value=\"true\"/>\r\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\r\n            <property name=\"suppressAllComments\" value=\"true\"/>\r\n        </commentGenerator>\r\n\r\n        <!-- JDBC连接 其中connectionURL后面的newtest改为你创建的数据库，紧跟在后面是数据库连接的账户和密码-->\r\n        <jdbcConnection\r\n                driverClass=\"com.mysql.jdbc.Driver\"\r\n                connectionURL=\"jdbc:mysql://localhost:3306/circuitqa\"\r\n                userId=\"root\"\r\n                password=\"123456\">\r\n        </jdbcConnection>\r\n\r\n        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->\r\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\r\n         NUMERIC 类型解析为java.math.BigDecimal -->\r\n        <javaTypeResolver>\r\n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->\r\n            <property name=\"forceBigDecimals\" value=\"false\" />\r\n        </javaTypeResolver>\r\n\r\n        <!-- 生成实体类地址 这里需要你改动，其中targetPackage需要根据你自己创建的目录进行改动 -->\r\n        <javaModelGenerator targetPackage=\"cn.sysu.circuitQA.pojo\" targetProject=\"src/main/java\">\r\n            <!-- 从数据库返回的值被清理前后的空格 -->\r\n            <property name=\"trimStrings\" value=\"true\" />\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaModelGenerator>\r\n\r\n        <!-- 生成mapper xml文件 这里不需要改动 -->\r\n        <sqlMapGenerator targetPackage=\"mapper\"  targetProject=\"src/main/resources\">\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </sqlMapGenerator>\r\n\r\n        <!-- 生成mapper xml对应Client   这里需要改动targetPackage，依据你自己的工程-->\r\n        <javaClientGenerator targetPackage=\"cn.sysu.circuitQA.mapper\" targetProject=\"src/main/java\" type=\"XMLMAPPER\">\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaClientGenerator>\r\n\r\n        <!-- 配置表信息 -->\r\n        <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample\r\n            是否生成 example类 -->\r\n\r\n        <table tableName=\"circuitqa\" domainObjectName=\"circuitQa\"></table>\r\n\r\n        <table tableName=\"keyword\" domainObjectName=\"keyWord\"></table>\r\n\r\n        <table tableName=\"message\" domainObjectName=\"message\"></table>\r\n\r\n        <table tableName=\"record\" domainObjectName=\"record\"></table>\r\n\r\n    </context>\r\n</generatorConfiguration>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/generatorConfig.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/generatorConfig.xml	(date 1617719785504)
@@ -59,9 +59,9 @@
 
         <table tableName="keyword" domainObjectName="keyWord"></table>
 
-        <table tableName="message" domainObjectName="message"></table>
+        <table tableName="student" domainObjectName="Student"></table>
 
-        <table tableName="record" domainObjectName="record"></table>
+        <table tableName="record" domainObjectName="Record"></table>
 
     </context>
 </generatorConfiguration>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,20 +0,0 @@
-package cn.sysu.circuitQA.service.serviceImpl;
-
-import cn.sysu.circuitQA.pojo.message;
-import cn.sysu.circuitQA.service.MessageService;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
-@Service
-public class MessageServiceImpl implements MessageService {
-    @Autowired
-    private cn.sysu.circuitQA.mapper.messageMapper messageMapper;
-
-    @Override
-    public void addMessage(String content, String date) {
-        message message = new message();
-        message.setMessage(content);
-        message.setDate(date);
-        messageMapper.insert(message);
-    }
-}
Index: src/main/java/cn/sysu/circuitQA/pojo/recordExample.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/recordExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/recordExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,550 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class recordExample {
-    protected String orderByClause;
-
-    protected boolean distinct;
-
-    protected List<Criteria> oredCriteria;
-
-    public recordExample() {
-        oredCriteria = new ArrayList<Criteria>();
-    }
-
-    public void setOrderByClause(String orderByClause) {
-        this.orderByClause = orderByClause;
-    }
-
-    public String getOrderByClause() {
-        return orderByClause;
-    }
-
-    public void setDistinct(boolean distinct) {
-        this.distinct = distinct;
-    }
-
-    public boolean isDistinct() {
-        return distinct;
-    }
-
-    public List<Criteria> getOredCriteria() {
-        return oredCriteria;
-    }
-
-    public void or(Criteria criteria) {
-        oredCriteria.add(criteria);
-    }
-
-    public Criteria or() {
-        Criteria criteria = createCriteriaInternal();
-        oredCriteria.add(criteria);
-        return criteria;
-    }
-
-    public Criteria createCriteria() {
-        Criteria criteria = createCriteriaInternal();
-        if (oredCriteria.size() == 0) {
-            oredCriteria.add(criteria);
-        }
-        return criteria;
-    }
-
-    protected Criteria createCriteriaInternal() {
-        Criteria criteria = new Criteria();
-        return criteria;
-    }
-
-    public void clear() {
-        oredCriteria.clear();
-        orderByClause = null;
-        distinct = false;
-    }
-
-    protected abstract static class GeneratedCriteria {
-        protected List<Criterion> criteria;
-
-        protected GeneratedCriteria() {
-            super();
-            criteria = new ArrayList<Criterion>();
-        }
-
-        public boolean isValid() {
-            return criteria.size() > 0;
-        }
-
-        public List<Criterion> getAllCriteria() {
-            return criteria;
-        }
-
-        public List<Criterion> getCriteria() {
-            return criteria;
-        }
-
-        protected void addCriterion(String condition) {
-            if (condition == null) {
-                throw new RuntimeException("Value for condition cannot be null");
-            }
-            criteria.add(new Criterion(condition));
-        }
-
-        protected void addCriterion(String condition, Object value, String property) {
-            if (value == null) {
-                throw new RuntimeException("Value for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value));
-        }
-
-        protected void addCriterion(String condition, Object value1, Object value2, String property) {
-            if (value1 == null || value2 == null) {
-                throw new RuntimeException("Between values for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value1, value2));
-        }
-
-        public Criteria andQueryIsNull() {
-            addCriterion("query is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryIsNotNull() {
-            addCriterion("query is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryEqualTo(String value) {
-            addCriterion("query =", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotEqualTo(String value) {
-            addCriterion("query <>", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryGreaterThan(String value) {
-            addCriterion("query >", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryGreaterThanOrEqualTo(String value) {
-            addCriterion("query >=", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryLessThan(String value) {
-            addCriterion("query <", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryLessThanOrEqualTo(String value) {
-            addCriterion("query <=", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryLike(String value) {
-            addCriterion("query like", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotLike(String value) {
-            addCriterion("query not like", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryIn(List<String> values) {
-            addCriterion("query in", values, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotIn(List<String> values) {
-            addCriterion("query not in", values, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryBetween(String value1, String value2) {
-            addCriterion("query between", value1, value2, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotBetween(String value1, String value2) {
-            addCriterion("query not between", value1, value2, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIsNull() {
-            addCriterion("question is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIsNotNull() {
-            addCriterion("question is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionEqualTo(String value) {
-            addCriterion("question =", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotEqualTo(String value) {
-            addCriterion("question <>", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionGreaterThan(String value) {
-            addCriterion("question >", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionGreaterThanOrEqualTo(String value) {
-            addCriterion("question >=", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLessThan(String value) {
-            addCriterion("question <", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLessThanOrEqualTo(String value) {
-            addCriterion("question <=", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLike(String value) {
-            addCriterion("question like", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotLike(String value) {
-            addCriterion("question not like", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIn(List<String> values) {
-            addCriterion("question in", values, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotIn(List<String> values) {
-            addCriterion("question not in", values, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionBetween(String value1, String value2) {
-            addCriterion("question between", value1, value2, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotBetween(String value1, String value2) {
-            addCriterion("question not between", value1, value2, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIsNull() {
-            addCriterion("answer is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIsNotNull() {
-            addCriterion("answer is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerEqualTo(String value) {
-            addCriterion("answer =", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotEqualTo(String value) {
-            addCriterion("answer <>", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerGreaterThan(String value) {
-            addCriterion("answer >", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerGreaterThanOrEqualTo(String value) {
-            addCriterion("answer >=", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLessThan(String value) {
-            addCriterion("answer <", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLessThanOrEqualTo(String value) {
-            addCriterion("answer <=", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLike(String value) {
-            addCriterion("answer like", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotLike(String value) {
-            addCriterion("answer not like", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIn(List<String> values) {
-            addCriterion("answer in", values, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotIn(List<String> values) {
-            addCriterion("answer not in", values, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerBetween(String value1, String value2) {
-            addCriterion("answer between", value1, value2, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotBetween(String value1, String value2) {
-            addCriterion("answer not between", value1, value2, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessIsNull() {
-            addCriterion("success is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessIsNotNull() {
-            addCriterion("success is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessEqualTo(String value) {
-            addCriterion("success =", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotEqualTo(String value) {
-            addCriterion("success <>", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessGreaterThan(String value) {
-            addCriterion("success >", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessGreaterThanOrEqualTo(String value) {
-            addCriterion("success >=", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessLessThan(String value) {
-            addCriterion("success <", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessLessThanOrEqualTo(String value) {
-            addCriterion("success <=", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessLike(String value) {
-            addCriterion("success like", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotLike(String value) {
-            addCriterion("success not like", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessIn(List<String> values) {
-            addCriterion("success in", values, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotIn(List<String> values) {
-            addCriterion("success not in", values, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessBetween(String value1, String value2) {
-            addCriterion("success between", value1, value2, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotBetween(String value1, String value2) {
-            addCriterion("success not between", value1, value2, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNull() {
-            addCriterion("date is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNotNull() {
-            addCriterion("date is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateEqualTo(String value) {
-            addCriterion("date =", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotEqualTo(String value) {
-            addCriterion("date <>", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThan(String value) {
-            addCriterion("date >", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThanOrEqualTo(String value) {
-            addCriterion("date >=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThan(String value) {
-            addCriterion("date <", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThanOrEqualTo(String value) {
-            addCriterion("date <=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLike(String value) {
-            addCriterion("date like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotLike(String value) {
-            addCriterion("date not like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIn(List<String> values) {
-            addCriterion("date in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotIn(List<String> values) {
-            addCriterion("date not in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateBetween(String value1, String value2) {
-            addCriterion("date between", value1, value2, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotBetween(String value1, String value2) {
-            addCriterion("date not between", value1, value2, "date");
-            return (Criteria) this;
-        }
-    }
-
-    public static class Criteria extends GeneratedCriteria {
-
-        protected Criteria() {
-            super();
-        }
-    }
-
-    public static class Criterion {
-        private String condition;
-
-        private Object value;
-
-        private Object secondValue;
-
-        private boolean noValue;
-
-        private boolean singleValue;
-
-        private boolean betweenValue;
-
-        private boolean listValue;
-
-        private String typeHandler;
-
-        public String getCondition() {
-            return condition;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-
-        public Object getSecondValue() {
-            return secondValue;
-        }
-
-        public boolean isNoValue() {
-            return noValue;
-        }
-
-        public boolean isSingleValue() {
-            return singleValue;
-        }
-
-        public boolean isBetweenValue() {
-            return betweenValue;
-        }
-
-        public boolean isListValue() {
-            return listValue;
-        }
-
-        public String getTypeHandler() {
-            return typeHandler;
-        }
-
-        protected Criterion(String condition) {
-            super();
-            this.condition = condition;
-            this.typeHandler = null;
-            this.noValue = true;
-        }
-
-        protected Criterion(String condition, Object value, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.typeHandler = typeHandler;
-            if (value instanceof List<?>) {
-                this.listValue = true;
-            } else {
-                this.singleValue = true;
-            }
-        }
-
-        protected Criterion(String condition, Object value) {
-            this(condition, value, null);
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.secondValue = secondValue;
-            this.typeHandler = typeHandler;
-            this.betweenValue = true;
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue) {
-            this(condition, value, secondValue, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.record;\r\nimport cn.sysu.circuitQA.pojo.recordExample;\r\nimport java.util.List;\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\npublic interface recordMapper {\r\n    int countByExample(recordExample example);\r\n\r\n    int deleteByExample(recordExample example);\r\n\r\n    int insert(record record);\r\n\r\n    int insertSelective(record record);\r\n\r\n    List<record> selectByExample(recordExample example);\r\n\r\n    int updateByExampleSelective(@Param(\"record\") record record, @Param(\"example\") recordExample example);\r\n\r\n    int updateByExample(@Param(\"record\") record record, @Param(\"example\") recordExample example);\r\n}
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,22 +0,0 @@
-package cn.sysu.circuitQA.mapper;
-
-import cn.sysu.circuitQA.pojo.record;
-import cn.sysu.circuitQA.pojo.recordExample;
-import java.util.List;
-import org.apache.ibatis.annotations.Param;
-
-public interface recordMapper {
-    int countByExample(recordExample example);
-
-    int deleteByExample(recordExample example);
-
-    int insert(record record);
-
-    int insertSelective(record record);
-
-    List<record> selectByExample(recordExample example);
-
-    int updateByExampleSelective(@Param("record") record record, @Param("example") recordExample example);
-
-    int updateByExample(@Param("record") record record, @Param("example") recordExample example);
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/message.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/message.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/message.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,23 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-public class message {
-    private String message;
-
-    private String date;
-
-    public String getMessage() {
-        return message;
-    }
-
-    public void setMessage(String message) {
-        this.message = message == null ? null : message.trim();
-    }
-
-    public String getDate() {
-        return date;
-    }
-
-    public void setDate(String date) {
-        this.date = date == null ? null : date.trim();
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/service/MessageService.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/MessageService.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/MessageService.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,6 +0,0 @@
-package cn.sysu.circuitQA.service;
-
-public interface MessageService {
-
-    void addMessage(String content, String date);
-}
Index: src/main/java/cn/sysu/circuitQA/pojo/record.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.pojo;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class Record {\r\n    private Integer id;\r\n    private String question;\r\n    private String time;\r\n    private String studentName;\r\n    private Long studentid;\r\n}\r\n
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/record.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/record.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,16 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
-public class Record {
-    private Integer id;
-    private String question;
-    private String time;
-    private String studentName;
-    private Long studentid;
-}
Index: src/main/java/cn/sysu/circuitQA/pojo/messageExample.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/messageExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/messageExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,340 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class messageExample {
-    protected String orderByClause;
-
-    protected boolean distinct;
-
-    protected List<Criteria> oredCriteria;
-
-    public messageExample() {
-        oredCriteria = new ArrayList<Criteria>();
-    }
-
-    public void setOrderByClause(String orderByClause) {
-        this.orderByClause = orderByClause;
-    }
-
-    public String getOrderByClause() {
-        return orderByClause;
-    }
-
-    public void setDistinct(boolean distinct) {
-        this.distinct = distinct;
-    }
-
-    public boolean isDistinct() {
-        return distinct;
-    }
-
-    public List<Criteria> getOredCriteria() {
-        return oredCriteria;
-    }
-
-    public void or(Criteria criteria) {
-        oredCriteria.add(criteria);
-    }
-
-    public Criteria or() {
-        Criteria criteria = createCriteriaInternal();
-        oredCriteria.add(criteria);
-        return criteria;
-    }
-
-    public Criteria createCriteria() {
-        Criteria criteria = createCriteriaInternal();
-        if (oredCriteria.size() == 0) {
-            oredCriteria.add(criteria);
-        }
-        return criteria;
-    }
-
-    protected Criteria createCriteriaInternal() {
-        Criteria criteria = new Criteria();
-        return criteria;
-    }
-
-    public void clear() {
-        oredCriteria.clear();
-        orderByClause = null;
-        distinct = false;
-    }
-
-    protected abstract static class GeneratedCriteria {
-        protected List<Criterion> criteria;
-
-        protected GeneratedCriteria() {
-            super();
-            criteria = new ArrayList<Criterion>();
-        }
-
-        public boolean isValid() {
-            return criteria.size() > 0;
-        }
-
-        public List<Criterion> getAllCriteria() {
-            return criteria;
-        }
-
-        public List<Criterion> getCriteria() {
-            return criteria;
-        }
-
-        protected void addCriterion(String condition) {
-            if (condition == null) {
-                throw new RuntimeException("Value for condition cannot be null");
-            }
-            criteria.add(new Criterion(condition));
-        }
-
-        protected void addCriterion(String condition, Object value, String property) {
-            if (value == null) {
-                throw new RuntimeException("Value for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value));
-        }
-
-        protected void addCriterion(String condition, Object value1, Object value2, String property) {
-            if (value1 == null || value2 == null) {
-                throw new RuntimeException("Between values for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value1, value2));
-        }
-
-        public Criteria andMessageIsNull() {
-            addCriterion("message is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageIsNotNull() {
-            addCriterion("message is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageEqualTo(String value) {
-            addCriterion("message =", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotEqualTo(String value) {
-            addCriterion("message <>", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageGreaterThan(String value) {
-            addCriterion("message >", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageGreaterThanOrEqualTo(String value) {
-            addCriterion("message >=", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageLessThan(String value) {
-            addCriterion("message <", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageLessThanOrEqualTo(String value) {
-            addCriterion("message <=", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageLike(String value) {
-            addCriterion("message like", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotLike(String value) {
-            addCriterion("message not like", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageIn(List<String> values) {
-            addCriterion("message in", values, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotIn(List<String> values) {
-            addCriterion("message not in", values, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageBetween(String value1, String value2) {
-            addCriterion("message between", value1, value2, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotBetween(String value1, String value2) {
-            addCriterion("message not between", value1, value2, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNull() {
-            addCriterion("date is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNotNull() {
-            addCriterion("date is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateEqualTo(String value) {
-            addCriterion("date =", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotEqualTo(String value) {
-            addCriterion("date <>", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThan(String value) {
-            addCriterion("date >", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThanOrEqualTo(String value) {
-            addCriterion("date >=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThan(String value) {
-            addCriterion("date <", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThanOrEqualTo(String value) {
-            addCriterion("date <=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLike(String value) {
-            addCriterion("date like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotLike(String value) {
-            addCriterion("date not like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIn(List<String> values) {
-            addCriterion("date in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotIn(List<String> values) {
-            addCriterion("date not in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateBetween(String value1, String value2) {
-            addCriterion("date between", value1, value2, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotBetween(String value1, String value2) {
-            addCriterion("date not between", value1, value2, "date");
-            return (Criteria) this;
-        }
-    }
-
-    public static class Criteria extends GeneratedCriteria {
-
-        protected Criteria() {
-            super();
-        }
-    }
-
-    public static class Criterion {
-        private String condition;
-
-        private Object value;
-
-        private Object secondValue;
-
-        private boolean noValue;
-
-        private boolean singleValue;
-
-        private boolean betweenValue;
-
-        private boolean listValue;
-
-        private String typeHandler;
-
-        public String getCondition() {
-            return condition;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-
-        public Object getSecondValue() {
-            return secondValue;
-        }
-
-        public boolean isNoValue() {
-            return noValue;
-        }
-
-        public boolean isSingleValue() {
-            return singleValue;
-        }
-
-        public boolean isBetweenValue() {
-            return betweenValue;
-        }
-
-        public boolean isListValue() {
-            return listValue;
-        }
-
-        public String getTypeHandler() {
-            return typeHandler;
-        }
-
-        protected Criterion(String condition) {
-            super();
-            this.condition = condition;
-            this.typeHandler = null;
-            this.noValue = true;
-        }
-
-        protected Criterion(String condition, Object value, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.typeHandler = typeHandler;
-            if (value instanceof List<?>) {
-                this.listValue = true;
-            } else {
-                this.singleValue = true;
-            }
-        }
-
-        protected Criterion(String condition, Object value) {
-            this(condition, value, null);
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.secondValue = secondValue;
-            this.typeHandler = typeHandler;
-            this.betweenValue = true;
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue) {
-            this(condition, value, secondValue, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/resources/mapper/RecordMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.RecordMapper\" >\r\n    <select id=\"findAll\" resultType=\"cn.sysu.circuitQA.pojo.Record\">select * from record</select>\r\n    <select id=\"save\">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>\r\n    <select id=\"getAllQuestion\" resultType=\"java.lang.String\">SELECT question FROM record</select>\r\n</mapper>
===================================================================
--- src/main/resources/mapper/RecordMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/RecordMapper.xml	(date 1617720072936)
@@ -1,7 +1,653 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.RecordMapper" >
-    <select id="findAll" resultType="cn.sysu.circuitQA.pojo.Record">select * from record</select>
-    <select id="save">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>
-    <select id="getAllQuestion" resultType="java.lang.String">SELECT question FROM record</select>
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="cn.sysu.circuitQA.mapper.RecordMapper">
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.record">
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="success" jdbcType="VARCHAR" property="success" />
+    <result column="date" jdbcType="VARCHAR" property="date" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    query, question, answer, success, date
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.record">
+    insert into record (query, question, answer, 
+      success, date)
+    values (#{query,jdbcType=VARCHAR}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
+      #{success,jdbcType=VARCHAR}, #{date,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="query != null">
+        query,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+      <if test="success != null">
+        success,
+      </if>
+      <if test="date != null">
+        date,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+      <if test="success != null">
+        #{success,jdbcType=VARCHAR},
+      </if>
+      <if test="date != null">
+        #{date,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+      <if test="record.success != null">
+        success = #{record.success,jdbcType=VARCHAR},
+      </if>
+      <if test="record.date != null">
+        date = #{record.date,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set query = #{record.query,jdbcType=VARCHAR},
+      question = #{record.question,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR},
+      success = #{record.success,jdbcType=VARCHAR},
+      date = #{record.date,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
 </mapper>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.record;\r\nimport cn.sysu.circuitQA.pojo.recordExample;\r\nimport java.util.List;\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\npublic interface recordMapper {\r\n    int countByExample(recordExample example);\r\n\r\n    int deleteByExample(recordExample example);\r\n\r\n    int insert(record record);\r\n\r\n    int insertSelective(record record);\r\n\r\n    List<record> selectByExample(recordExample example);\r\n\r\n    int updateByExampleSelective(@Param(\"record\") record record, @Param(\"example\") recordExample example);\r\n\r\n    int updateByExample(@Param(\"record\") record record, @Param(\"example\") recordExample example);\r\n}
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java	(date 1617720072943)
@@ -1,22 +1,30 @@
 package cn.sysu.circuitQA.mapper;
 
-import cn.sysu.circuitQA.pojo.record;
-import cn.sysu.circuitQA.pojo.recordExample;
+import cn.sysu.circuitQA.pojo.Record;
+import cn.sysu.circuitQA.pojo.RecordExample;
 import java.util.List;
 import org.apache.ibatis.annotations.Param;
 
-public interface recordMapper {
-    int countByExample(recordExample example);
+public interface RecordMapper {
+    int countByExample(RecordExample example);
+
+    int deleteByExample(RecordExample example);
+
+    int deleteByPrimaryKey(Integer id);
+
+    int insert(Record record);
 
-    int deleteByExample(recordExample example);
+    int insertSelective(Record record);
 
-    int insert(record record);
+    List<Record> selectByExample(RecordExample example);
 
-    int insertSelective(record record);
+    Record selectByPrimaryKey(Integer id);
 
-    List<record> selectByExample(recordExample example);
+    int updateByExampleSelective(@Param("record") Record record, @Param("example") RecordExample example);
 
-    int updateByExampleSelective(@Param("record") record record, @Param("example") recordExample example);
+    int updateByExample(@Param("record") Record record, @Param("example") RecordExample example);
 
-    int updateByExample(@Param("record") record record, @Param("example") recordExample example);
+    int updateByPrimaryKeySelective(Record record);
+
+    int updateByPrimaryKey(Record record);
 }
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.message;\r\nimport cn.sysu.circuitQA.pojo.messageExample;\r\nimport java.util.List;\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\npublic interface messageMapper {\r\n    int countByExample(messageExample example);\r\n\r\n    int deleteByExample(messageExample example);\r\n\r\n    int insert(message record);\r\n\r\n    int insertSelective(message record);\r\n\r\n    List<message> selectByExample(messageExample example);\r\n\r\n    int updateByExampleSelective(@Param(\"record\") message record, @Param(\"example\") messageExample example);\r\n\r\n    int updateByExample(@Param(\"record\") message record, @Param(\"example\") messageExample example);\r\n}
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java	(date 1617719701906)
@@ -1,7 +1,5 @@
 package cn.sysu.circuitQA.mapper;
 
-import cn.sysu.circuitQA.pojo.message;
-import cn.sysu.circuitQA.pojo.messageExample;
 import java.util.List;
 import org.apache.ibatis.annotations.Param;
 
Index: src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\n\r\nimport java.util.List;\r\n\r\n@SpringBootTest\r\n@RunWith(SpringRunner.class)\r\npublic class CircuitQAServiceTest {\r\n    @Autowired\r\n    private cn.sysu.circuitQA.service.CircuitQAService circuitQAService;\r\n\r\n    @Test\r\n    public void questionTest() {\r\n        List<circuitQa> list= circuitQAService.importQuestions();\r\n        circuitQa qa= list.get(2);\r\n        System.out.println(\"是啥\"+qa.getChildid());\r\n        System.out.println(qa.getChildid().equals(\" \"));\r\n        System.out.println(\"\".equals(null));\r\n        System.out.println(qa.getChildid().equals(\"\\\\N\"));\r\n    }\r\n}\r\n
===================================================================
--- src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java	(date 1617719702178)
@@ -1,6 +1,5 @@
 package cn.sysu.circuitQA;
 
-import cn.sysu.circuitQA.pojo.circuitQa;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
Index: src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.utils;\r\n\r\nimport cn.sysu.circuitQA.gRPCclient.matchClient;\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport com.hankcs.hanlp.mining.word2vec.DocVectorModel;\r\nimport com.hankcs.hanlp.mining.word2vec.WordVectorModel;\r\nimport io.grpc.ManagedChannel;\r\nimport io.grpc.ManagedChannelBuilder;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class MatchUtil {\r\n    public static circuitQa matchByRPC(List<circuitQa> candidates, String query) throws InterruptedException {\r\n        String[] sents = new String[candidates.size()];\r\n        for (int i = 0; i < candidates.size(); i++) {\r\n            sents[i] = candidates.get(i).getQuestion();\r\n        }\r\n        String target = \"211.66.138.157:50051\";\r\n        ManagedChannel channel = ManagedChannelBuilder.forTarget(target)\r\n                .usePlaintext()\r\n                .build();\r\n        try {\r\n            matchClient client = new matchClient(channel);\r\n            int index = client.match(sents, query);\r\n            return candidates.get(index);\r\n        } finally {\r\n            channel.shutdownNow().awaitTermination(10, TimeUnit.SECONDS);\r\n        }\r\n    }\r\n\r\n    public static circuitQa match2(List<circuitQa> candidates, String query) throws IOException {\r\n        DocVectorModel docVectorModel = new DocVectorModel(new WordVectorModel(\"C:/hanLP/data/polyglot-zh.txt\"));\r\n        float score = -2;\r\n        circuitQa target = null;\r\n        for (circuitQa candidate : candidates){\r\n            float cur = docVectorModel.similarity(candidate.getQuestion(), query);\r\n            if (cur > score) {\r\n                score = cur;\r\n                target = candidate;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    public static circuitQa match1(List<circuitQa> candidates, String query) {\r\n        circuitQa target = candidates.get(0);\r\n        float similarity = levenshtein(query, target.getQuestion());\r\n        for (circuitQa candidate : candidates) {\r\n            float new_similarity = levenshtein(query, candidate.getQuestion());\r\n            if (new_similarity > similarity) {\r\n                target = candidate;\r\n                similarity = new_similarity;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    private static float levenshtein(String str1, String str2) {\r\n        int len1 = str1.length();\r\n        int len2 = str2.length();\r\n        int[][] dif = new int[len1 + 1][len2 + 1];\r\n        for (int a = 0; a <= len1; a++) {\r\n            dif[a][0] = a;\r\n        }\r\n        for (int a = 0; a <= len2; a++) {\r\n            dif[0][a] = a;\r\n        }\r\n        int temp;\r\n        for (int i = 1; i <= len1; i++) {\r\n            for (int j = 1; j <= len2; j++) {\r\n                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {\r\n                    temp = 0;\r\n                } else {\r\n                    temp = 1;\r\n                }\r\n                dif[i][j] = min(dif[i - 1][j - 1] + temp, dif[i][j - 1] + 1,\r\n                        dif[i - 1][j] + 1);\r\n            }\r\n        }\r\n        float similarity =1 - (float) dif[len1][len2] / Math.max(str1.length(), str2.length());\r\n        return similarity;\r\n    }\r\n    private static int min(int... is) {\r\n        int min = Integer.MAX_VALUE;\r\n        for (int i : is) {\r\n            if (min > i) {\r\n                min = i;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java	(date 1617719702087)
@@ -1,7 +1,6 @@
 package cn.sysu.circuitQA.utils;
 
 import cn.sysu.circuitQA.gRPCclient.matchClient;
-import cn.sysu.circuitQA.pojo.circuitQa;
 import com.hankcs.hanlp.mining.word2vec.DocVectorModel;
 import com.hankcs.hanlp.mining.word2vec.WordVectorModel;
 import io.grpc.ManagedChannel;
Index: src/main/java/cn/sysu/circuitQA/pojo/Record.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.pojo;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class Record {\r\n    private Integer id;\r\n    private String question;\r\n    private String time;\r\n    private String studentName;\r\n    private Long studentid;\r\n}\r\n
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/Record.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/Record.java	(date 1617720378035)
@@ -1,16 +1,75 @@
 package cn.sysu.circuitQA.pojo;
 
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+import java.util.Date;
 
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
 public class Record {
     private Integer id;
+
     private String question;
+
     private String time;
-    private String studentName;
-    private Long studentid;
-}
+
+    private String studentname;
+
+    private Integer studentid;
+
+    private String query;
+
+    private String answer;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getQuestion() {
+        return question;
+    }
+
+    public void setQuestion(String question) {
+        this.question = question == null ? null : question.trim();
+    }
+
+    public String getTime() {
+        return time;
+    }
+
+    public void setTime(String time) {
+        this.time = time;
+    }
+
+    public String getStudentname() {
+        return studentname;
+    }
+
+    public void setStudentname(String studentname) {
+        this.studentname = studentname == null ? null : studentname.trim();
+    }
+
+    public Integer getStudentid() {
+        return studentid;
+    }
+
+    public void setStudentid(Integer studentid) {
+        this.studentid = studentid;
+    }
+
+    public String getQuery() {
+        return query;
+    }
+
+    public void setQuery(String query) {
+        this.query = query == null ? null : query.trim();
+    }
+
+    public String getAnswer() {
+        return answer;
+    }
+
+    public void setAnswer(String answer) {
+        this.answer = answer == null ? null : answer.trim();
+    }
+}
\ No newline at end of file
