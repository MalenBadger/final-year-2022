Index: src/main/java/cn/sysu/circuitQA/service/CoreProcessService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.service;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport cn.sysu.circuitQA.pojo.keyWord;\r\nimport cn.sysu.circuitQA.utils.KGUtil;\r\nimport cn.sysu.circuitQA.utils.MatchUtil;\r\nimport com.hankcs.hanlp.seg.common.Term;\r\nimport com.hankcs.hanlp.tokenizer.NLPTokenizer;\r\nimport org.apache.log4j.Logger;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n@Service\r\npublic class CoreProcessService {\r\n\r\n    private static Logger logger = Logger.getLogger(CoreProcessService.class);\r\n\r\n    @Autowired\r\n    private CircuitQAService circuitQAService;\r\n\r\n    @Autowired\r\n    private KeyWordService keyWordService;\r\n\r\n    @Autowired\r\n    private RecordService RecordService;\r\n\r\n    private List<circuitQa> circuitQas;\r\n\r\n    private List<keyWord> keyWords;\r\n\r\n    private Map<String, circuitQa> questionMap; //id对应问题对象\r\n\r\n//    private Map<keyword, id>\r\n\r\n    {\r\n        NLPTokenizer.ANALYZER.enableCustomDictionary(true);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param query\r\n     * @return 匹配到的qa对象\r\n     */\r\n    public circuitQa analysis(String query) throws IOException {\r\n        logger.info(\"原始问句：\" + query);\r\n\r\n        List<circuitQa> candidates = null;\r\n        try {\r\n            candidates = extractCandidates(query);\r\n        } catch (Exception e) {\r\n            logger.error(\"没有相关问题\");\r\n        }\r\n        if (candidates == null) {\r\n            logger.info(\"没有候选问题集！\");\r\n            return null;\r\n        }\r\n        logger.info(\"候选问题集：\");\r\n        for (int i = 0; i < candidates.size(); i++) {\r\n            logger.info(i + \" \" + candidates.get(i).getQuestion());\r\n        }\r\n        circuitQa target = null;\r\n        try {\r\n//            target = MatchUtil.matchByRPC(candidates, query);\r\n            target = MatchUtil.match2(candidates, query);\r\n            logger.info(\"匹配结果：\" + target.getQuestion());\r\n        } catch (Exception e) {\r\n            if (e instanceof InterruptedException) {\r\n                logger.error(\"gRPC通信故障\");\r\n            } else{\r\n                logger.error(\"没有匹配到你的问题\");\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    //提取候选问题集\r\n    public List<circuitQa> extractCandidates(String question) {\r\n        this.circuitQas = circuitQAService.importQuestions();\r\n        keyWords = keyWordService.importKeyWords();\r\n        this.questionMap = new HashMap<String, circuitQa>();\r\n        for (circuitQa ques : circuitQas) {\r\n            questionMap.put(String.valueOf(ques.getQuestionid()), ques);\r\n        }\r\n//        String keyword = ExtractUtil.extract(question);\r\n        String keyword = extract(question);\r\n        if (keyword == \"\") {\r\n            return null;\r\n        }\r\n        List<circuitQa> candidates = new ArrayList<circuitQa>();\r\n        for (keyWord word : keyWords) {\r\n            if (keyword.equals(word.getKeyword())){\r\n                String ids = word.getQuestionids();\r\n                String[] IDs = ids.split(\",\");\r\n                for (String ID : IDs) {\r\n                    if (questionMap.containsKey(ID)) {\r\n                        candidates.add(questionMap.get(ID));\r\n                    } else {\r\n                        logger.error(\"问题表里没有这个ID：\"+ID+\",属于关键词\"+keyword);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return candidates;\r\n    }\r\n    //提取关键词\r\n    public String extract(String question) {\r\n        String word = \"\";\r\n        List<Term> seg = NLPTokenizer.segment(question);\r\n        try {\r\n            for (Term term : seg) {\r\n                for (keyWord keyword : keyWords) {\r\n                    if (term.word.equals(keyword.getKeyword())) {\r\n                        word = keyword.getKeyword();\r\n                        logger.info(\"关键词：\" + word);\r\n                        return word;\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return word;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param ques\r\n     * @return 查找子问题\r\n     */\r\n    public String subQuery(String ques) throws IOException, InterruptedException {\r\n        circuitQa qa = analysis(ques);\r\n        if((qa == null) || qa.getChildid().length() == 0) {return \"\";}\r\n        String[] childIDs = qa.getChildid().split(\" \");\r\n        List<String> childIDList = Arrays.asList(childIDs);\r\n        List childIDlist = new ArrayList(childIDList);\r\n//        if (childIDlist.size() <= 2) { # 与KG通信\r\n//            String keyword = extract(ques);\r\n//            String[] words = KGUtil.extend(keyword);\r\n//            for (String word:words) {\r\n//                String ids = keyWordService.getIDByKeyWord(word);\r\n//                if (ids != null) {\r\n//                    String[] IDs = ids.split(\",\");\r\n//                    for (String ID : IDs) {\r\n//                        childIDlist.add(ID);\r\n//                    }\r\n//                } else {\r\n//                    continue;\r\n//                }\r\n//                if (childIDlist.size() == 3) {\r\n//                    break;\r\n//                }\r\n//            }\r\n//        }\r\n\r\n        String res = \"\";\r\n        for (int i = 0; i < childIDlist.size(); i++) {\r\n            circuitQa question = null;\r\n            try {\r\n                question = questionMap.get(childIDlist.get(i));\r\n                res = res + \"@\" + question.getQuestion();\r\n            } catch (Exception e) {\r\n                continue;\r\n            }\r\n\r\n        }\r\n        return (res.length() == 0) ? null : res.substring(1);\r\n    }\r\n\r\n    public String getAnswerByOrder(String order, String questions) {\r\n        if (questions == null || questions.length() == 0) {\r\n            return \"\";\r\n        }\r\n        try {\r\n            circuitQas = circuitQAService.importQuestions();\r\n            String[] qas = questions.split(\"@\");\r\n            String target = qas[Integer.parseInt(order)];\r\n            logger.info(\"后续提问：\" + target);\r\n            for (circuitQa qa : circuitQas) {\r\n                if (qa.getQuestion().equals(target)) {\r\n                    return qa.getAnswer();\r\n                }\r\n            }\r\n        } catch (ArrayIndexOutOfBoundsException e) {\r\n            return \"输入错误，请重新输入！\";\r\n        }\r\n        return \"\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/CoreProcessService.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/CoreProcessService.java	(date 1617718358918)
@@ -1,8 +1,5 @@
 package cn.sysu.circuitQA.service;
 
-import cn.sysu.circuitQA.pojo.circuitQa;
-import cn.sysu.circuitQA.pojo.keyWord;
-import cn.sysu.circuitQA.utils.KGUtil;
 import cn.sysu.circuitQA.utils.MatchUtil;
 import com.hankcs.hanlp.seg.common.Term;
 import com.hankcs.hanlp.tokenizer.NLPTokenizer;
Index: src/main/java/cn/sysu/circuitQA/controller/StudentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.controller;\r\n\r\n\r\nimport cn.sysu.circuitQA.pojo.Student;\r\nimport cn.sysu.circuitQA.service.StudentService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n/**\r\n * 现存问题：1.学生登录后自己的页面，自己的信息。\r\n *          2.登录前点击问答系统，答题系统时不能跳转，要先登录注册。\r\n */\r\n\r\n@Controller\r\n@RequestMapping(\"/student\")\r\npublic class StudentController {\r\n\r\n    @Autowired\r\n    StudentService studentService;\r\n\r\n    @RequestMapping(\"/loginCallBack\")                                                           // HttpServletRequest request 写到形参自动注入\r\n    public String loginCallback(Student student, HttpServletResponse response){                  // HttpServletResponse response\r\n        Student studentExist = studentService.login(student);\r\n        if (studentExist != null) {\r\n            // 登陆成功，在页面上添加一个cookie\r\n            String studentId = studentExist.getId().toString();\r\n            Cookie cookie = new Cookie(\"studentId\", studentId);\r\n            // 通过设置domain、path可以获取到这个cookie，不加重定向后获取不到\r\n            cookie.setDomain(\"localhost\");\r\n            cookie.setPath(\"/\");\r\n            response.addCookie(cookie);\r\n            return \"redirect:/\";\r\n        }else {\r\n            // 登陆失败，重新登录\r\n            return \"redirect:/student/login\";\r\n        }\r\n    }\r\n\r\n    @RequestMapping(\"/registCallBack\")\r\n    public String registCallback(Student student,HttpServletRequest request,\r\n                                 HttpServletResponse response){\r\n        Student studentExist = studentService.regist(student);\r\n        if (studentExist != null) {\r\n            // 注册成功，在页面上添加一个cookie\r\n            String studentId = studentExist.getId().toString();\r\n            Cookie cookie = new Cookie(\"studentId\", studentId);\r\n            // 通过设置domain、path可以获取到这个cookie，不加重定向后获取不到\r\n            cookie.setDomain(\"localhost\");\r\n            cookie.setPath(\"/\");\r\n            response.addCookie(cookie);\r\n            response.addCookie(cookie);\r\n            return \"/\";\r\n        }else {\r\n            // 注册失败，重新注册\r\n            return \"redirect:/student/regist\";\r\n        }\r\n    }\r\n\r\n\r\n    @RequestMapping(\"/adminCallBack\")\r\n    public String adminCallBack(){\r\n        return \"mian\";\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/controller/StudentController.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/controller/StudentController.java	(date 1617676054052)
@@ -1,7 +1,6 @@
 package cn.sysu.circuitQA.controller;
 
 
-import cn.sysu.circuitQA.pojo.Student;
 import cn.sysu.circuitQA.service.StudentService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
Index: src/main/java/cn/sysu/circuitQA/service/serviceImpl/RecordServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.service.serviceImpl;\r\n\r\n<<<<<<< HEAD\r\nimport cn.sysu.circuitQA.pojo.keyWord;\r\nimport cn.sysu.circuitQA.pojo.keyWordExample;\r\nimport cn.sysu.circuitQA.pojo.record;\r\nimport cn.sysu.circuitQA.pojo.recordExample;\r\nimport cn.sysu.circuitQA.service.RecordService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n=======\r\nimport cn.sysu.circuitQA.mapper.RecordMapper;\r\nimport cn.sysu.circuitQA.mapper.StudentMapper;\r\nimport cn.sysu.circuitQA.pojo.Record;\r\nimport cn.sysu.circuitQA.pojo.Student;\r\nimport cn.sysu.circuitQA.service.RecordService;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n>>>>>>> origin/dev_reyo\r\n\r\n@Service\r\npublic class RecordServiceImpl implements RecordService {\r\n\r\n    @Autowired\r\n<<<<<<< HEAD\r\n    private cn.sysu.circuitQA.mapper.recordMapper recordMapper;\r\n\r\n    public void addRecord(String query, String question, String answer, String success){\r\n        record record = new record();\r\n        record.setQuestion(question);\r\n        record.setAnswer(answer);\r\n        record.setSuccess(success);\r\n        Date now = new Date();\r\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd HH:mm:ss\");\r\n        String nowDate = format.format(now);\r\n        record.setDate(nowDate);\r\n        record.setQuery(query);\r\n        recordMapper.insert(record);\r\n    };\r\n\r\n    public String findRecord(String date){\r\n        recordExample recordExample = new recordExample();\r\n        recordExample.Criteria criteria = recordExample.createCriteria();\r\n        String day = date.substring(0,8);\r\n        criteria.andDateGreaterThanOrEqualTo(day);\r\n        List<record> records = recordMapper.selectByExample(recordExample);\r\n\r\n        String res = \"\";\r\n        for (int i = 0; i < records.size(); i++){\r\n            res = res + \" \" + records.get(i).getQuery();\r\n        }\r\n        return (res.length() == 0) ? null : res.substring(1);\r\n=======\r\n    RecordMapper recordMapper;\r\n\r\n    @Autowired\r\n    StudentMapper studentMapper;\r\n\r\n    @Autowired\r\n    HttpServletRequest request;\r\n\r\n    @Override\r\n    public String wordsSave(String question) {\r\n        Date date = new Date();//获得系统当前时间.\r\n        SimpleDateFormat sdf = new SimpleDateFormat( \" yyyy-MM-dd HH:mm:ss \" );\r\n        String nowTime = sdf.format(date);\r\n\r\n        // 获取cookie 得到学生登录状态\r\n        Student student = new Student();\r\n        Cookie[] cookies = request.getCookies();\r\n        for (Cookie cookie : cookies) {\r\n            if (cookie.getName().equals(\"studentId\")) {\r\n                long studentId = Integer.parseInt(cookie.getValue());\r\n                student = studentMapper.findById(studentId);\r\n            }\r\n        }\r\n\r\n        Record record = new Record();\r\n        record.setQuestion(question);\r\n        record.setTime(nowTime);\r\n        record.setStudentName(student.getStudentName());\r\n        record.setStudentid(student.getId());\r\n\r\n        recordMapper.save(record);\r\n        return \"问题保存成功\";\r\n>>>>>>> origin/dev_reyo\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/serviceImpl/RecordServiceImpl.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/serviceImpl/RecordServiceImpl.java	(date 1617718703749)
@@ -1,67 +1,25 @@
 package cn.sysu.circuitQA.service.serviceImpl;
 
 <<<<<<< HEAD
-import cn.sysu.circuitQA.pojo.keyWord;
-import cn.sysu.circuitQA.pojo.keyWordExample;
+import cn.sysu.circuitQA.pojo.Student;
 import cn.sysu.circuitQA.pojo.record;
-import cn.sysu.circuitQA.pojo.recordExample;
 import cn.sysu.circuitQA.service.RecordService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import java.util.List;
-=======
-import cn.sysu.circuitQA.mapper.RecordMapper;
-import cn.sysu.circuitQA.mapper.StudentMapper;
+
 import cn.sysu.circuitQA.pojo.Record;
-import cn.sysu.circuitQA.pojo.Student;
-import cn.sysu.circuitQA.service.RecordService;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
 
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
-import java.text.SimpleDateFormat;
-import java.util.Date;
->>>>>>> origin/dev_reyo
 
 @Service
 public class RecordServiceImpl implements RecordService {
 
     @Autowired
-<<<<<<< HEAD
-    private cn.sysu.circuitQA.mapper.recordMapper recordMapper;
-
-    public void addRecord(String query, String question, String answer, String success){
-        record record = new record();
-        record.setQuestion(question);
-        record.setAnswer(answer);
-        record.setSuccess(success);
-        Date now = new Date();
-        SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
-        String nowDate = format.format(now);
-        record.setDate(nowDate);
-        record.setQuery(query);
-        recordMapper.insert(record);
-    };
-
-    public String findRecord(String date){
-        recordExample recordExample = new recordExample();
-        recordExample.Criteria criteria = recordExample.createCriteria();
-        String day = date.substring(0,8);
-        criteria.andDateGreaterThanOrEqualTo(day);
-        List<record> records = recordMapper.selectByExample(recordExample);
-
-        String res = "";
-        for (int i = 0; i < records.size(); i++){
-            res = res + " " + records.get(i).getQuery();
-        }
-        return (res.length() == 0) ? null : res.substring(1);
-=======
-    RecordMapper recordMapper;
+    recordMapper recordMapper;
 
     @Autowired
     StudentMapper studentMapper;
@@ -73,7 +31,7 @@
     public String wordsSave(String question) {
         Date date = new Date();//获得系统当前时间.
         SimpleDateFormat sdf = new SimpleDateFormat( " yyyy-MM-dd HH:mm:ss " );
-        String nowTime = sdf.format(date);
+         nowTime = sdf.format(date);
 
         // 获取cookie 得到学生登录状态
         Student student = new Student();
@@ -87,12 +45,12 @@
 
         Record record = new Record();
         record.setQuestion(question);
-        record.setTime(nowTime);
-        record.setStudentName(student.getStudentName());
+        record.setTime();
+        record.setStudentname(student.getStudentName());
         record.setStudentid(student.getId());
 
         recordMapper.save(record);
         return "问题保存成功";
->>>>>>> origin/dev_reyo
+
     }
 }
Index: src/main/java/cn/sysu/circuitQA/service/serviceImpl/StudentServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.service.serviceImpl;\r\n\r\nimport cn.sysu.circuitQA.mapper.StudentMapper;\r\nimport cn.sysu.circuitQA.pojo.Student;\r\nimport cn.sysu.circuitQA.service.StudentService;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class StudentServiceImpl implements StudentService {\r\n    String flag = null;\r\n\r\n    @Autowired\r\n    StudentMapper studentMapper;\r\n\r\n    @Override\r\n    public Student login(Student student) {\r\n        Student studentExist = studentMapper.findById(student.getId());\r\n        if (studentExist != null) {\r\n            String studentPassword = studentMapper.findPswById(student.getId());\r\n            if (student.getPassword().equals(studentPassword)){\r\n                return studentExist;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Student regist(Student student) {\r\n        Student studentExist = studentMapper.findById(student.getId());\r\n        if (student.getId() == null){\r\n            return null;\r\n        }else if (student.getStudentName() == null){\r\n            return null;\r\n        }else if (student.getPassword() == null){\r\n            return null;\r\n        }else if (studentExist != null){\r\n            return null;\r\n        } else {\r\n            studentMapper.save(student);\r\n        }\r\n        return  student;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/serviceImpl/StudentServiceImpl.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/serviceImpl/StudentServiceImpl.java	(date 1617718358871)
@@ -1,7 +1,5 @@
 package cn.sysu.circuitQA.service.serviceImpl;
 
-import cn.sysu.circuitQA.mapper.StudentMapper;
-import cn.sysu.circuitQA.pojo.Student;
 import cn.sysu.circuitQA.service.StudentService;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -15,10 +13,10 @@
     StudentMapper studentMapper;
 
     @Override
-    public Student login(Student student) {
-        Student studentExist = studentMapper.findById(student.getId());
-        if (studentExist != null) {
-            String studentPassword = studentMapper.findPswById(student.getId());
+    public user login(user user) {
+        user userExist = studentMapper.findById(user.getId());
+        if (userExist != null) {
+            String studentPassword = studentMapper.findPswById(user.getId());
             if (student.getPassword().equals(studentPassword)){
                 return studentExist;
             }
Index: src/main/resources/generatorConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE generatorConfiguration\r\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\r\n\r\n<generatorConfiguration>\r\n\r\n    <context id=\"Tables\" targetRuntime=\"MyBatis3\">\r\n\r\n        <!-- 注释 -->\r\n        <commentGenerator>\r\n            <!-- 是否生成注释代时间戳 -->\r\n            <property name=\"suppressDate\" value=\"true\"/>\r\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\r\n            <property name=\"suppressAllComments\" value=\"true\"/>\r\n        </commentGenerator>\r\n\r\n        <!-- JDBC连接 其中connectionURL后面的newtest改为你创建的数据库，紧跟在后面是数据库连接的账户和密码-->\r\n        <jdbcConnection\r\n                driverClass=\"com.mysql.jdbc.Driver\"\r\n                connectionURL=\"jdbc:mysql://localhost:3306/circuitqa\"\r\n                userId=\"root\"\r\n                password=\"123456\">\r\n        </jdbcConnection>\r\n\r\n        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->\r\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\r\n         NUMERIC 类型解析为java.math.BigDecimal -->\r\n        <javaTypeResolver>\r\n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->\r\n            <property name=\"forceBigDecimals\" value=\"false\" />\r\n        </javaTypeResolver>\r\n\r\n        <!-- 生成实体类地址 这里需要你改动，其中targetPackage需要根据你自己创建的目录进行改动 -->\r\n        <javaModelGenerator targetPackage=\"cn.sysu.circuitQA.pojo\" targetProject=\"src/main/java\">\r\n            <!-- 从数据库返回的值被清理前后的空格 -->\r\n            <property name=\"trimStrings\" value=\"true\" />\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaModelGenerator>\r\n\r\n        <!-- 生成mapper xml文件 这里不需要改动 -->\r\n        <sqlMapGenerator targetPackage=\"mapper\"  targetProject=\"src/main/resources\">\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </sqlMapGenerator>\r\n\r\n        <!-- 生成mapper xml对应Client   这里需要改动targetPackage，依据你自己的工程-->\r\n        <javaClientGenerator targetPackage=\"cn.sysu.circuitQA.mapper\" targetProject=\"src/main/java\" type=\"XMLMAPPER\">\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaClientGenerator>\r\n\r\n        <!-- 配置表信息 -->\r\n        <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample\r\n            是否生成 example类 -->\r\n\r\n        <table tableName=\"circuitqa\" domainObjectName=\"circuitQa\"></table>\r\n\r\n        <table tableName=\"keyword\" domainObjectName=\"keyWord\"></table>\r\n\r\n        <table tableName=\"message\" domainObjectName=\"message\"></table>\r\n\r\n        <table tableName=\"record\" domainObjectName=\"record\"></table>\r\n\r\n    </context>\r\n</generatorConfiguration>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/generatorConfig.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/generatorConfig.xml	(date 1617718337855)
@@ -59,9 +59,9 @@
 
         <table tableName="keyword" domainObjectName="keyWord"></table>
 
-        <table tableName="message" domainObjectName="message"></table>
+        <table tableName="student" domainObjectName="Student"></table>
 
-        <table tableName="record" domainObjectName="record"></table>
+        <table tableName="record" domainObjectName="Record"></table>
 
     </context>
 </generatorConfiguration>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/service/CircuitQAService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.service;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\n\r\nimport java.util.List;\r\n\r\npublic interface CircuitQAService {\r\n    List<circuitQa> importQuestions();\r\n\r\n    void updateQuestion(int id, String parentId, String childrenID);\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/CircuitQAService.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/CircuitQAService.java	(date 1617718358948)
@@ -1,7 +1,5 @@
 package cn.sysu.circuitQA.service;
 
-import cn.sysu.circuitQA.pojo.circuitQa;
-
 import java.util.List;
 
 public interface CircuitQAService {
Index: src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,20 +0,0 @@
-package cn.sysu.circuitQA.service.serviceImpl;
-
-import cn.sysu.circuitQA.pojo.message;
-import cn.sysu.circuitQA.service.MessageService;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
-@Service
-public class MessageServiceImpl implements MessageService {
-    @Autowired
-    private cn.sysu.circuitQA.mapper.messageMapper messageMapper;
-
-    @Override
-    public void addMessage(String content, String date) {
-        message message = new message();
-        message.setMessage(content);
-        message.setDate(date);
-        messageMapper.insert(message);
-    }
-}
Index: src/main/resources/mapper/RecordMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.RecordMapper\" >\r\n    <select id=\"findAll\" resultType=\"cn.sysu.circuitQA.pojo.Record\">select * from record</select>\r\n    <select id=\"save\">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>\r\n    <select id=\"getAllQuestion\" resultType=\"java.lang.String\">SELECT question FROM record</select>\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/mapper/RecordMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/RecordMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.RecordMapper" >
-    <select id="findAll" resultType="cn.sysu.circuitQA.pojo.Record">select * from record</select>
-    <select id="save">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>
-    <select id="getAllQuestion" resultType="java.lang.String">SELECT question FROM record</select>
-</mapper>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.Record;\r\nimport org.apache.ibatis.annotations.Mapper;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport java.util.List;\r\n\r\n\r\npublic interface RecordMapper {\r\n    List<Record> findAll();\r\n    void save(Record record);\r\n    String getAllQuestion();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,14 +0,0 @@
-package cn.sysu.circuitQA.mapper;
-
-import cn.sysu.circuitQA.pojo.Record;
-import org.apache.ibatis.annotations.Mapper;
-import org.apache.ibatis.annotations.Select;
-
-import java.util.List;
-
-
-public interface RecordMapper {
-    List<Record> findAll();
-    void save(Record record);
-    String getAllQuestion();
-}
Index: src/main/java/cn/sysu/circuitQA/pojo/circuitQaExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/circuitQaExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/circuitQaExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,540 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class circuitQaExample {
-    protected String orderByClause;
-
-    protected boolean distinct;
-
-    protected List<Criteria> oredCriteria;
-
-    public circuitQaExample() {
-        oredCriteria = new ArrayList<Criteria>();
-    }
-
-    public void setOrderByClause(String orderByClause) {
-        this.orderByClause = orderByClause;
-    }
-
-    public String getOrderByClause() {
-        return orderByClause;
-    }
-
-    public void setDistinct(boolean distinct) {
-        this.distinct = distinct;
-    }
-
-    public boolean isDistinct() {
-        return distinct;
-    }
-
-    public List<Criteria> getOredCriteria() {
-        return oredCriteria;
-    }
-
-    public void or(Criteria criteria) {
-        oredCriteria.add(criteria);
-    }
-
-    public Criteria or() {
-        Criteria criteria = createCriteriaInternal();
-        oredCriteria.add(criteria);
-        return criteria;
-    }
-
-    public Criteria createCriteria() {
-        Criteria criteria = createCriteriaInternal();
-        if (oredCriteria.size() == 0) {
-            oredCriteria.add(criteria);
-        }
-        return criteria;
-    }
-
-    protected Criteria createCriteriaInternal() {
-        Criteria criteria = new Criteria();
-        return criteria;
-    }
-
-    public void clear() {
-        oredCriteria.clear();
-        orderByClause = null;
-        distinct = false;
-    }
-
-    protected abstract static class GeneratedCriteria {
-        protected List<Criterion> criteria;
-
-        protected GeneratedCriteria() {
-            super();
-            criteria = new ArrayList<Criterion>();
-        }
-
-        public boolean isValid() {
-            return criteria.size() > 0;
-        }
-
-        public List<Criterion> getAllCriteria() {
-            return criteria;
-        }
-
-        public List<Criterion> getCriteria() {
-            return criteria;
-        }
-
-        protected void addCriterion(String condition) {
-            if (condition == null) {
-                throw new RuntimeException("Value for condition cannot be null");
-            }
-            criteria.add(new Criterion(condition));
-        }
-
-        protected void addCriterion(String condition, Object value, String property) {
-            if (value == null) {
-                throw new RuntimeException("Value for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value));
-        }
-
-        protected void addCriterion(String condition, Object value1, Object value2, String property) {
-            if (value1 == null || value2 == null) {
-                throw new RuntimeException("Between values for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value1, value2));
-        }
-
-        public Criteria andQuestionidIsNull() {
-            addCriterion("questionID is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidIsNotNull() {
-            addCriterion("questionID is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidEqualTo(Integer value) {
-            addCriterion("questionID =", value, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidNotEqualTo(Integer value) {
-            addCriterion("questionID <>", value, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidGreaterThan(Integer value) {
-            addCriterion("questionID >", value, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidGreaterThanOrEqualTo(Integer value) {
-            addCriterion("questionID >=", value, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidLessThan(Integer value) {
-            addCriterion("questionID <", value, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidLessThanOrEqualTo(Integer value) {
-            addCriterion("questionID <=", value, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidIn(List<Integer> values) {
-            addCriterion("questionID in", values, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidNotIn(List<Integer> values) {
-            addCriterion("questionID not in", values, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidBetween(Integer value1, Integer value2) {
-            addCriterion("questionID between", value1, value2, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidNotBetween(Integer value1, Integer value2) {
-            addCriterion("questionID not between", value1, value2, "questionid");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIsNull() {
-            addCriterion("question is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIsNotNull() {
-            addCriterion("question is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionEqualTo(String value) {
-            addCriterion("question =", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotEqualTo(String value) {
-            addCriterion("question <>", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionGreaterThan(String value) {
-            addCriterion("question >", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionGreaterThanOrEqualTo(String value) {
-            addCriterion("question >=", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLessThan(String value) {
-            addCriterion("question <", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLessThanOrEqualTo(String value) {
-            addCriterion("question <=", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLike(String value) {
-            addCriterion("question like", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotLike(String value) {
-            addCriterion("question not like", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIn(List<String> values) {
-            addCriterion("question in", values, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotIn(List<String> values) {
-            addCriterion("question not in", values, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionBetween(String value1, String value2) {
-            addCriterion("question between", value1, value2, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotBetween(String value1, String value2) {
-            addCriterion("question not between", value1, value2, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIsNull() {
-            addCriterion("answer is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIsNotNull() {
-            addCriterion("answer is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerEqualTo(String value) {
-            addCriterion("answer =", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotEqualTo(String value) {
-            addCriterion("answer <>", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerGreaterThan(String value) {
-            addCriterion("answer >", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerGreaterThanOrEqualTo(String value) {
-            addCriterion("answer >=", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLessThan(String value) {
-            addCriterion("answer <", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLessThanOrEqualTo(String value) {
-            addCriterion("answer <=", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLike(String value) {
-            addCriterion("answer like", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotLike(String value) {
-            addCriterion("answer not like", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIn(List<String> values) {
-            addCriterion("answer in", values, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotIn(List<String> values) {
-            addCriterion("answer not in", values, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerBetween(String value1, String value2) {
-            addCriterion("answer between", value1, value2, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotBetween(String value1, String value2) {
-            addCriterion("answer not between", value1, value2, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidIsNull() {
-            addCriterion("childID is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidIsNotNull() {
-            addCriterion("childID is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidEqualTo(String value) {
-            addCriterion("childID =", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidNotEqualTo(String value) {
-            addCriterion("childID <>", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidGreaterThan(String value) {
-            addCriterion("childID >", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidGreaterThanOrEqualTo(String value) {
-            addCriterion("childID >=", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidLessThan(String value) {
-            addCriterion("childID <", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidLessThanOrEqualTo(String value) {
-            addCriterion("childID <=", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidLike(String value) {
-            addCriterion("childID like", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidNotLike(String value) {
-            addCriterion("childID not like", value, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidIn(List<String> values) {
-            addCriterion("childID in", values, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidNotIn(List<String> values) {
-            addCriterion("childID not in", values, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidBetween(String value1, String value2) {
-            addCriterion("childID between", value1, value2, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andChildidNotBetween(String value1, String value2) {
-            addCriterion("childID not between", value1, value2, "childid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidIsNull() {
-            addCriterion("parentID is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidIsNotNull() {
-            addCriterion("parentID is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidEqualTo(String value) {
-            addCriterion("parentID =", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidNotEqualTo(String value) {
-            addCriterion("parentID <>", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidGreaterThan(String value) {
-            addCriterion("parentID >", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidGreaterThanOrEqualTo(String value) {
-            addCriterion("parentID >=", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidLessThan(String value) {
-            addCriterion("parentID <", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidLessThanOrEqualTo(String value) {
-            addCriterion("parentID <=", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidLike(String value) {
-            addCriterion("parentID like", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidNotLike(String value) {
-            addCriterion("parentID not like", value, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidIn(List<String> values) {
-            addCriterion("parentID in", values, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidNotIn(List<String> values) {
-            addCriterion("parentID not in", values, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidBetween(String value1, String value2) {
-            addCriterion("parentID between", value1, value2, "parentid");
-            return (Criteria) this;
-        }
-
-        public Criteria andParentidNotBetween(String value1, String value2) {
-            addCriterion("parentID not between", value1, value2, "parentid");
-            return (Criteria) this;
-        }
-    }
-
-    public static class Criteria extends GeneratedCriteria {
-
-        protected Criteria() {
-            super();
-        }
-    }
-
-    public static class Criterion {
-        private String condition;
-
-        private Object value;
-
-        private Object secondValue;
-
-        private boolean noValue;
-
-        private boolean singleValue;
-
-        private boolean betweenValue;
-
-        private boolean listValue;
-
-        private String typeHandler;
-
-        public String getCondition() {
-            return condition;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-
-        public Object getSecondValue() {
-            return secondValue;
-        }
-
-        public boolean isNoValue() {
-            return noValue;
-        }
-
-        public boolean isSingleValue() {
-            return singleValue;
-        }
-
-        public boolean isBetweenValue() {
-            return betweenValue;
-        }
-
-        public boolean isListValue() {
-            return listValue;
-        }
-
-        public String getTypeHandler() {
-            return typeHandler;
-        }
-
-        protected Criterion(String condition) {
-            super();
-            this.condition = condition;
-            this.typeHandler = null;
-            this.noValue = true;
-        }
-
-        protected Criterion(String condition, Object value, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.typeHandler = typeHandler;
-            if (value instanceof List<?>) {
-                this.listValue = true;
-            } else {
-                this.singleValue = true;
-            }
-        }
-
-        protected Criterion(String condition, Object value) {
-            this(condition, value, null);
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.secondValue = secondValue;
-            this.typeHandler = typeHandler;
-            this.betweenValue = true;
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue) {
-            this(condition, value, secondValue, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/Record.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/Record.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/Record.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,16 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
-public class Record {
-    private Integer id;
-    private String question;
-    private String time;
-    private String studentName;
-    private Long studentid;
-}
Index: src/main/java/cn/sysu/circuitQA/pojo/keyWordExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/keyWordExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/keyWordExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,340 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class keyWordExample {
-    protected String orderByClause;
-
-    protected boolean distinct;
-
-    protected List<Criteria> oredCriteria;
-
-    public keyWordExample() {
-        oredCriteria = new ArrayList<Criteria>();
-    }
-
-    public void setOrderByClause(String orderByClause) {
-        this.orderByClause = orderByClause;
-    }
-
-    public String getOrderByClause() {
-        return orderByClause;
-    }
-
-    public void setDistinct(boolean distinct) {
-        this.distinct = distinct;
-    }
-
-    public boolean isDistinct() {
-        return distinct;
-    }
-
-    public List<Criteria> getOredCriteria() {
-        return oredCriteria;
-    }
-
-    public void or(Criteria criteria) {
-        oredCriteria.add(criteria);
-    }
-
-    public Criteria or() {
-        Criteria criteria = createCriteriaInternal();
-        oredCriteria.add(criteria);
-        return criteria;
-    }
-
-    public Criteria createCriteria() {
-        Criteria criteria = createCriteriaInternal();
-        if (oredCriteria.size() == 0) {
-            oredCriteria.add(criteria);
-        }
-        return criteria;
-    }
-
-    protected Criteria createCriteriaInternal() {
-        Criteria criteria = new Criteria();
-        return criteria;
-    }
-
-    public void clear() {
-        oredCriteria.clear();
-        orderByClause = null;
-        distinct = false;
-    }
-
-    protected abstract static class GeneratedCriteria {
-        protected List<Criterion> criteria;
-
-        protected GeneratedCriteria() {
-            super();
-            criteria = new ArrayList<Criterion>();
-        }
-
-        public boolean isValid() {
-            return criteria.size() > 0;
-        }
-
-        public List<Criterion> getAllCriteria() {
-            return criteria;
-        }
-
-        public List<Criterion> getCriteria() {
-            return criteria;
-        }
-
-        protected void addCriterion(String condition) {
-            if (condition == null) {
-                throw new RuntimeException("Value for condition cannot be null");
-            }
-            criteria.add(new Criterion(condition));
-        }
-
-        protected void addCriterion(String condition, Object value, String property) {
-            if (value == null) {
-                throw new RuntimeException("Value for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value));
-        }
-
-        protected void addCriterion(String condition, Object value1, Object value2, String property) {
-            if (value1 == null || value2 == null) {
-                throw new RuntimeException("Between values for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value1, value2));
-        }
-
-        public Criteria andKeywordIsNull() {
-            addCriterion("keyword is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordIsNotNull() {
-            addCriterion("keyword is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordEqualTo(String value) {
-            addCriterion("keyword =", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordNotEqualTo(String value) {
-            addCriterion("keyword <>", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordGreaterThan(String value) {
-            addCriterion("keyword >", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordGreaterThanOrEqualTo(String value) {
-            addCriterion("keyword >=", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordLessThan(String value) {
-            addCriterion("keyword <", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordLessThanOrEqualTo(String value) {
-            addCriterion("keyword <=", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordLike(String value) {
-            addCriterion("keyword like", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordNotLike(String value) {
-            addCriterion("keyword not like", value, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordIn(List<String> values) {
-            addCriterion("keyword in", values, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordNotIn(List<String> values) {
-            addCriterion("keyword not in", values, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordBetween(String value1, String value2) {
-            addCriterion("keyword between", value1, value2, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andKeywordNotBetween(String value1, String value2) {
-            addCriterion("keyword not between", value1, value2, "keyword");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsIsNull() {
-            addCriterion("questionIDs is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsIsNotNull() {
-            addCriterion("questionIDs is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsEqualTo(String value) {
-            addCriterion("questionIDs =", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsNotEqualTo(String value) {
-            addCriterion("questionIDs <>", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsGreaterThan(String value) {
-            addCriterion("questionIDs >", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsGreaterThanOrEqualTo(String value) {
-            addCriterion("questionIDs >=", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsLessThan(String value) {
-            addCriterion("questionIDs <", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsLessThanOrEqualTo(String value) {
-            addCriterion("questionIDs <=", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsLike(String value) {
-            addCriterion("questionIDs like", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsNotLike(String value) {
-            addCriterion("questionIDs not like", value, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsIn(List<String> values) {
-            addCriterion("questionIDs in", values, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsNotIn(List<String> values) {
-            addCriterion("questionIDs not in", values, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsBetween(String value1, String value2) {
-            addCriterion("questionIDs between", value1, value2, "questionids");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionidsNotBetween(String value1, String value2) {
-            addCriterion("questionIDs not between", value1, value2, "questionids");
-            return (Criteria) this;
-        }
-    }
-
-    public static class Criteria extends GeneratedCriteria {
-
-        protected Criteria() {
-            super();
-        }
-    }
-
-    public static class Criterion {
-        private String condition;
-
-        private Object value;
-
-        private Object secondValue;
-
-        private boolean noValue;
-
-        private boolean singleValue;
-
-        private boolean betweenValue;
-
-        private boolean listValue;
-
-        private String typeHandler;
-
-        public String getCondition() {
-            return condition;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-
-        public Object getSecondValue() {
-            return secondValue;
-        }
-
-        public boolean isNoValue() {
-            return noValue;
-        }
-
-        public boolean isSingleValue() {
-            return singleValue;
-        }
-
-        public boolean isBetweenValue() {
-            return betweenValue;
-        }
-
-        public boolean isListValue() {
-            return listValue;
-        }
-
-        public String getTypeHandler() {
-            return typeHandler;
-        }
-
-        protected Criterion(String condition) {
-            super();
-            this.condition = condition;
-            this.typeHandler = null;
-            this.noValue = true;
-        }
-
-        protected Criterion(String condition, Object value, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.typeHandler = typeHandler;
-            if (value instanceof List<?>) {
-                this.listValue = true;
-            } else {
-                this.singleValue = true;
-            }
-        }
-
-        protected Criterion(String condition, Object value) {
-            this(condition, value, null);
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.secondValue = secondValue;
-            this.typeHandler = typeHandler;
-            this.betweenValue = true;
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue) {
-            this(condition, value, secondValue, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/keyWord.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/keyWord.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/keyWord.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,23 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-public class keyWord {
-    private String keyword;
-
-    private String questionids;
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword == null ? null : keyword.trim();
-    }
-
-    public String getQuestionids() {
-        return questionids;
-    }
-
-    public void setQuestionids(String questionids) {
-        this.questionids = questionids == null ? null : questionids.trim();
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/circuitQa.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/circuitQa.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/circuitQa.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,53 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-public class circuitQa {
-    private Integer questionid;
-
-    private String question;
-
-    private String answer;
-
-    private String childid;
-
-    private String parentid;
-
-    public Integer getQuestionid() {
-        return questionid;
-    }
-
-    public void setQuestionid(Integer questionid) {
-        this.questionid = questionid;
-    }
-
-    public String getQuestion() {
-        return question;
-    }
-
-    public void setQuestion(String question) {
-        this.question = question == null ? null : question.trim();
-    }
-
-    public String getAnswer() {
-        return answer;
-    }
-
-    public void setAnswer(String answer) {
-        this.answer = answer == null ? null : answer.trim();
-    }
-
-    public String getChildid() {
-        return childid;
-    }
-
-    public void setChildid(String childid) {
-        this.childid = childid == null ? null : childid.trim();
-    }
-
-    public String getParentid() {
-        return parentid;
-    }
-
-    public void setParentid(String parentid) {
-        this.parentid = parentid == null ? null : parentid.trim();
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/recordExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/recordExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/recordExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,550 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class recordExample {
-    protected String orderByClause;
-
-    protected boolean distinct;
-
-    protected List<Criteria> oredCriteria;
-
-    public recordExample() {
-        oredCriteria = new ArrayList<Criteria>();
-    }
-
-    public void setOrderByClause(String orderByClause) {
-        this.orderByClause = orderByClause;
-    }
-
-    public String getOrderByClause() {
-        return orderByClause;
-    }
-
-    public void setDistinct(boolean distinct) {
-        this.distinct = distinct;
-    }
-
-    public boolean isDistinct() {
-        return distinct;
-    }
-
-    public List<Criteria> getOredCriteria() {
-        return oredCriteria;
-    }
-
-    public void or(Criteria criteria) {
-        oredCriteria.add(criteria);
-    }
-
-    public Criteria or() {
-        Criteria criteria = createCriteriaInternal();
-        oredCriteria.add(criteria);
-        return criteria;
-    }
-
-    public Criteria createCriteria() {
-        Criteria criteria = createCriteriaInternal();
-        if (oredCriteria.size() == 0) {
-            oredCriteria.add(criteria);
-        }
-        return criteria;
-    }
-
-    protected Criteria createCriteriaInternal() {
-        Criteria criteria = new Criteria();
-        return criteria;
-    }
-
-    public void clear() {
-        oredCriteria.clear();
-        orderByClause = null;
-        distinct = false;
-    }
-
-    protected abstract static class GeneratedCriteria {
-        protected List<Criterion> criteria;
-
-        protected GeneratedCriteria() {
-            super();
-            criteria = new ArrayList<Criterion>();
-        }
-
-        public boolean isValid() {
-            return criteria.size() > 0;
-        }
-
-        public List<Criterion> getAllCriteria() {
-            return criteria;
-        }
-
-        public List<Criterion> getCriteria() {
-            return criteria;
-        }
-
-        protected void addCriterion(String condition) {
-            if (condition == null) {
-                throw new RuntimeException("Value for condition cannot be null");
-            }
-            criteria.add(new Criterion(condition));
-        }
-
-        protected void addCriterion(String condition, Object value, String property) {
-            if (value == null) {
-                throw new RuntimeException("Value for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value));
-        }
-
-        protected void addCriterion(String condition, Object value1, Object value2, String property) {
-            if (value1 == null || value2 == null) {
-                throw new RuntimeException("Between values for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value1, value2));
-        }
-
-        public Criteria andQueryIsNull() {
-            addCriterion("query is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryIsNotNull() {
-            addCriterion("query is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryEqualTo(String value) {
-            addCriterion("query =", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotEqualTo(String value) {
-            addCriterion("query <>", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryGreaterThan(String value) {
-            addCriterion("query >", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryGreaterThanOrEqualTo(String value) {
-            addCriterion("query >=", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryLessThan(String value) {
-            addCriterion("query <", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryLessThanOrEqualTo(String value) {
-            addCriterion("query <=", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryLike(String value) {
-            addCriterion("query like", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotLike(String value) {
-            addCriterion("query not like", value, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryIn(List<String> values) {
-            addCriterion("query in", values, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotIn(List<String> values) {
-            addCriterion("query not in", values, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryBetween(String value1, String value2) {
-            addCriterion("query between", value1, value2, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQueryNotBetween(String value1, String value2) {
-            addCriterion("query not between", value1, value2, "query");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIsNull() {
-            addCriterion("question is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIsNotNull() {
-            addCriterion("question is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionEqualTo(String value) {
-            addCriterion("question =", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotEqualTo(String value) {
-            addCriterion("question <>", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionGreaterThan(String value) {
-            addCriterion("question >", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionGreaterThanOrEqualTo(String value) {
-            addCriterion("question >=", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLessThan(String value) {
-            addCriterion("question <", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLessThanOrEqualTo(String value) {
-            addCriterion("question <=", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionLike(String value) {
-            addCriterion("question like", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotLike(String value) {
-            addCriterion("question not like", value, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionIn(List<String> values) {
-            addCriterion("question in", values, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotIn(List<String> values) {
-            addCriterion("question not in", values, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionBetween(String value1, String value2) {
-            addCriterion("question between", value1, value2, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andQuestionNotBetween(String value1, String value2) {
-            addCriterion("question not between", value1, value2, "question");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIsNull() {
-            addCriterion("answer is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIsNotNull() {
-            addCriterion("answer is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerEqualTo(String value) {
-            addCriterion("answer =", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotEqualTo(String value) {
-            addCriterion("answer <>", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerGreaterThan(String value) {
-            addCriterion("answer >", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerGreaterThanOrEqualTo(String value) {
-            addCriterion("answer >=", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLessThan(String value) {
-            addCriterion("answer <", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLessThanOrEqualTo(String value) {
-            addCriterion("answer <=", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerLike(String value) {
-            addCriterion("answer like", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotLike(String value) {
-            addCriterion("answer not like", value, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerIn(List<String> values) {
-            addCriterion("answer in", values, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotIn(List<String> values) {
-            addCriterion("answer not in", values, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerBetween(String value1, String value2) {
-            addCriterion("answer between", value1, value2, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andAnswerNotBetween(String value1, String value2) {
-            addCriterion("answer not between", value1, value2, "answer");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessIsNull() {
-            addCriterion("success is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessIsNotNull() {
-            addCriterion("success is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessEqualTo(String value) {
-            addCriterion("success =", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotEqualTo(String value) {
-            addCriterion("success <>", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessGreaterThan(String value) {
-            addCriterion("success >", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessGreaterThanOrEqualTo(String value) {
-            addCriterion("success >=", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessLessThan(String value) {
-            addCriterion("success <", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessLessThanOrEqualTo(String value) {
-            addCriterion("success <=", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessLike(String value) {
-            addCriterion("success like", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotLike(String value) {
-            addCriterion("success not like", value, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessIn(List<String> values) {
-            addCriterion("success in", values, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotIn(List<String> values) {
-            addCriterion("success not in", values, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessBetween(String value1, String value2) {
-            addCriterion("success between", value1, value2, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andSuccessNotBetween(String value1, String value2) {
-            addCriterion("success not between", value1, value2, "success");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNull() {
-            addCriterion("date is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNotNull() {
-            addCriterion("date is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateEqualTo(String value) {
-            addCriterion("date =", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotEqualTo(String value) {
-            addCriterion("date <>", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThan(String value) {
-            addCriterion("date >", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThanOrEqualTo(String value) {
-            addCriterion("date >=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThan(String value) {
-            addCriterion("date <", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThanOrEqualTo(String value) {
-            addCriterion("date <=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLike(String value) {
-            addCriterion("date like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotLike(String value) {
-            addCriterion("date not like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIn(List<String> values) {
-            addCriterion("date in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotIn(List<String> values) {
-            addCriterion("date not in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateBetween(String value1, String value2) {
-            addCriterion("date between", value1, value2, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotBetween(String value1, String value2) {
-            addCriterion("date not between", value1, value2, "date");
-            return (Criteria) this;
-        }
-    }
-
-    public static class Criteria extends GeneratedCriteria {
-
-        protected Criteria() {
-            super();
-        }
-    }
-
-    public static class Criterion {
-        private String condition;
-
-        private Object value;
-
-        private Object secondValue;
-
-        private boolean noValue;
-
-        private boolean singleValue;
-
-        private boolean betweenValue;
-
-        private boolean listValue;
-
-        private String typeHandler;
-
-        public String getCondition() {
-            return condition;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-
-        public Object getSecondValue() {
-            return secondValue;
-        }
-
-        public boolean isNoValue() {
-            return noValue;
-        }
-
-        public boolean isSingleValue() {
-            return singleValue;
-        }
-
-        public boolean isBetweenValue() {
-            return betweenValue;
-        }
-
-        public boolean isListValue() {
-            return listValue;
-        }
-
-        public String getTypeHandler() {
-            return typeHandler;
-        }
-
-        protected Criterion(String condition) {
-            super();
-            this.condition = condition;
-            this.typeHandler = null;
-            this.noValue = true;
-        }
-
-        protected Criterion(String condition, Object value, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.typeHandler = typeHandler;
-            if (value instanceof List<?>) {
-                this.listValue = true;
-            } else {
-                this.singleValue = true;
-            }
-        }
-
-        protected Criterion(String condition, Object value) {
-            this(condition, value, null);
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.secondValue = secondValue;
-            this.typeHandler = typeHandler;
-            this.betweenValue = true;
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue) {
-            this(condition, value, secondValue, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/Student.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/Student.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,12 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-public class Student {
-    private Long id;
-    private String studentName;
-    private String password;
-    private String classAndGrade;
-}
Index: src/main/java/cn/sysu/circuitQA/pojo/message.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/message.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/message.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,23 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-public class message {
-    private String message;
-
-    private String date;
-
-    public String getMessage() {
-        return message;
-    }
-
-    public void setMessage(String message) {
-        this.message = message == null ? null : message.trim();
-    }
-
-    public String getDate() {
-        return date;
-    }
-
-    public void setDate(String date) {
-        this.date = date == null ? null : date.trim();
-    }
-}
\ No newline at end of file
Index: target/classes/mapper/StudentMapper.xml
===================================================================
--- target/classes/mapper/StudentMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ target/classes/mapper/StudentMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.StudentMapper" >
-    <select id="findById" resultType="cn.sysu.circuitQA.pojo.Student">select * from student where id = #{id}</select>
-    <select id="findPswById" resultType="java.lang.String">select password from student where id = #{id}</select>
-    <select id="save">insert into student(id,studentName,password,classAndGrade) values(#{id},#{studentName},#{password},#{classAndGrade}) </select>
-</mapper>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/pojo/messageExample.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/pojo/messageExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/pojo/messageExample.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,340 +0,0 @@
-package cn.sysu.circuitQA.pojo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class messageExample {
-    protected String orderByClause;
-
-    protected boolean distinct;
-
-    protected List<Criteria> oredCriteria;
-
-    public messageExample() {
-        oredCriteria = new ArrayList<Criteria>();
-    }
-
-    public void setOrderByClause(String orderByClause) {
-        this.orderByClause = orderByClause;
-    }
-
-    public String getOrderByClause() {
-        return orderByClause;
-    }
-
-    public void setDistinct(boolean distinct) {
-        this.distinct = distinct;
-    }
-
-    public boolean isDistinct() {
-        return distinct;
-    }
-
-    public List<Criteria> getOredCriteria() {
-        return oredCriteria;
-    }
-
-    public void or(Criteria criteria) {
-        oredCriteria.add(criteria);
-    }
-
-    public Criteria or() {
-        Criteria criteria = createCriteriaInternal();
-        oredCriteria.add(criteria);
-        return criteria;
-    }
-
-    public Criteria createCriteria() {
-        Criteria criteria = createCriteriaInternal();
-        if (oredCriteria.size() == 0) {
-            oredCriteria.add(criteria);
-        }
-        return criteria;
-    }
-
-    protected Criteria createCriteriaInternal() {
-        Criteria criteria = new Criteria();
-        return criteria;
-    }
-
-    public void clear() {
-        oredCriteria.clear();
-        orderByClause = null;
-        distinct = false;
-    }
-
-    protected abstract static class GeneratedCriteria {
-        protected List<Criterion> criteria;
-
-        protected GeneratedCriteria() {
-            super();
-            criteria = new ArrayList<Criterion>();
-        }
-
-        public boolean isValid() {
-            return criteria.size() > 0;
-        }
-
-        public List<Criterion> getAllCriteria() {
-            return criteria;
-        }
-
-        public List<Criterion> getCriteria() {
-            return criteria;
-        }
-
-        protected void addCriterion(String condition) {
-            if (condition == null) {
-                throw new RuntimeException("Value for condition cannot be null");
-            }
-            criteria.add(new Criterion(condition));
-        }
-
-        protected void addCriterion(String condition, Object value, String property) {
-            if (value == null) {
-                throw new RuntimeException("Value for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value));
-        }
-
-        protected void addCriterion(String condition, Object value1, Object value2, String property) {
-            if (value1 == null || value2 == null) {
-                throw new RuntimeException("Between values for " + property + " cannot be null");
-            }
-            criteria.add(new Criterion(condition, value1, value2));
-        }
-
-        public Criteria andMessageIsNull() {
-            addCriterion("message is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageIsNotNull() {
-            addCriterion("message is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageEqualTo(String value) {
-            addCriterion("message =", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotEqualTo(String value) {
-            addCriterion("message <>", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageGreaterThan(String value) {
-            addCriterion("message >", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageGreaterThanOrEqualTo(String value) {
-            addCriterion("message >=", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageLessThan(String value) {
-            addCriterion("message <", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageLessThanOrEqualTo(String value) {
-            addCriterion("message <=", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageLike(String value) {
-            addCriterion("message like", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotLike(String value) {
-            addCriterion("message not like", value, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageIn(List<String> values) {
-            addCriterion("message in", values, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotIn(List<String> values) {
-            addCriterion("message not in", values, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageBetween(String value1, String value2) {
-            addCriterion("message between", value1, value2, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andMessageNotBetween(String value1, String value2) {
-            addCriterion("message not between", value1, value2, "message");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNull() {
-            addCriterion("date is null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIsNotNull() {
-            addCriterion("date is not null");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateEqualTo(String value) {
-            addCriterion("date =", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotEqualTo(String value) {
-            addCriterion("date <>", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThan(String value) {
-            addCriterion("date >", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateGreaterThanOrEqualTo(String value) {
-            addCriterion("date >=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThan(String value) {
-            addCriterion("date <", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLessThanOrEqualTo(String value) {
-            addCriterion("date <=", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateLike(String value) {
-            addCriterion("date like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotLike(String value) {
-            addCriterion("date not like", value, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateIn(List<String> values) {
-            addCriterion("date in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotIn(List<String> values) {
-            addCriterion("date not in", values, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateBetween(String value1, String value2) {
-            addCriterion("date between", value1, value2, "date");
-            return (Criteria) this;
-        }
-
-        public Criteria andDateNotBetween(String value1, String value2) {
-            addCriterion("date not between", value1, value2, "date");
-            return (Criteria) this;
-        }
-    }
-
-    public static class Criteria extends GeneratedCriteria {
-
-        protected Criteria() {
-            super();
-        }
-    }
-
-    public static class Criterion {
-        private String condition;
-
-        private Object value;
-
-        private Object secondValue;
-
-        private boolean noValue;
-
-        private boolean singleValue;
-
-        private boolean betweenValue;
-
-        private boolean listValue;
-
-        private String typeHandler;
-
-        public String getCondition() {
-            return condition;
-        }
-
-        public Object getValue() {
-            return value;
-        }
-
-        public Object getSecondValue() {
-            return secondValue;
-        }
-
-        public boolean isNoValue() {
-            return noValue;
-        }
-
-        public boolean isSingleValue() {
-            return singleValue;
-        }
-
-        public boolean isBetweenValue() {
-            return betweenValue;
-        }
-
-        public boolean isListValue() {
-            return listValue;
-        }
-
-        public String getTypeHandler() {
-            return typeHandler;
-        }
-
-        protected Criterion(String condition) {
-            super();
-            this.condition = condition;
-            this.typeHandler = null;
-            this.noValue = true;
-        }
-
-        protected Criterion(String condition, Object value, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.typeHandler = typeHandler;
-            if (value instanceof List<?>) {
-                this.listValue = true;
-            } else {
-                this.singleValue = true;
-            }
-        }
-
-        protected Criterion(String condition, Object value) {
-            this(condition, value, null);
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
-            super();
-            this.condition = condition;
-            this.value = value;
-            this.secondValue = secondValue;
-            this.typeHandler = typeHandler;
-            this.betweenValue = true;
-        }
-
-        protected Criterion(String condition, Object value, Object secondValue) {
-            this(condition, value, secondValue, null);
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
@@ -1,22 +0,0 @@
-package cn.sysu.circuitQA.mapper;
-
-import cn.sysu.circuitQA.pojo.message;
-import cn.sysu.circuitQA.pojo.messageExample;
-import java.util.List;
-import org.apache.ibatis.annotations.Param;
-
-public interface messageMapper {
-    int countByExample(messageExample example);
-
-    int deleteByExample(messageExample example);
-
-    int insert(message record);
-
-    int insertSelective(message record);
-
-    List<message> selectByExample(messageExample example);
-
-    int updateByExampleSelective(@Param("record") message record, @Param("example") messageExample example);
-
-    int updateByExample(@Param("record") message record, @Param("example") messageExample example);
-}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2576c9c4-7f89-4ccf-94a4-8147a6a52c81\" name=\"Default Changelist\" comment=\"20210406 new student record\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"spring-beans.schema\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"hiddenUrls\">\r\n      <set>\r\n        <option value=\"https://github.com/seit-311-group/circuitQA\" />\r\n      </set>\r\n    </option>\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"C:\\Users\\zry\\.m2\\wrapper\\dists\\apache-maven-3.5.2-bin\\28qa8v9e2mq69covern8vmdkj0\\apache-maven-3.5.2\" />\r\n        <option name=\"userSettingsFile\" value=\"C:\\apache-maven-3.6.3\\conf\\settings.xml\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1fv2krwDJY0HH2q5hnOvYJAa0KI\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\r\n    <property name=\"RequestMappingsPanelOrder0\" value=\"0\" />\r\n    <property name=\"RequestMappingsPanelOrder1\" value=\"1\" />\r\n    <property name=\"RequestMappingsPanelOrder2\" value=\"2\" />\r\n    <property name=\"RequestMappingsPanelWidth0\" value=\"75\" />\r\n    <property name=\"RequestMappingsPanelWidth1\" value=\"75\" />\r\n    <property name=\"RequestMappingsPanelWidth2\" value=\"75\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../../github/code/circuitQA\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15703824\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"pProject Default\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"project.propVCSSupport.Mappings\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\10173\\IdeaProjects\\circuitQA\\src\\main\\proto\" />\r\n      <recent name=\"C:\\Users\\10173\\IdeaProjects\\circuitQA\\src\\main\\resources\\templates\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"cn.sysu.circuitQA\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"cn.sysu.circuitQA.controller\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"F:\\Programing\\实验室工程\\circuitQA\\src\\main\\resources\\templates\" />\r\n      <recent name=\"F:\\Programing\\github\\code\\circuitQA\\src\\main\\resources\\templates\" />\r\n      <recent name=\"C:\\Users\\10173\\IdeaProjects\\circuitQA\\src\\main\\proto\" />\r\n      <recent name=\"C:\\Users\\10173\\IdeaProjects\\circuitQA\\src\\main\\resources\\proto\" />\r\n      <recent name=\"C:\\Users\\10173\\IdeaProjects\\circuitQA\\src\\main\\java\\cn\\sysu\\circuitQA\\utils\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Spring Boot.CircuitQA\">\r\n    <configuration name=\"CircuitQA\" type=\"Application\" factoryName=\"Application\" singleton=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"cn.sysu.circuitQA.CircuitQA\" />\r\n      <module name=\"circuitQA\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"cn.sysu.circuitQA.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CircuitQA\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\">\r\n      <module name=\"circuitQA\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"cn.sysu.circuitQA.CircuitQA\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" />\r\n      <option name=\"UPDATE_ACTION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <option name=\"FRAME_DEACTIVATION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.CircuitQA\" />\r\n      <item itemvalue=\"Spring Boot.CircuitQA\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SpringMvcView\">\r\n    <option name=\"showControllers\" value=\"false\" />\r\n  </component>\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2576c9c4-7f89-4ccf-94a4-8147a6a52c81\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1597084391348</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1597084391348</updated>\r\n      <workItem from=\"1599046024233\" duration=\"282000\" />\r\n      <workItem from=\"1599046343398\" duration=\"5018000\" />\r\n      <workItem from=\"1599051384921\" duration=\"9294000\" />\r\n      <workItem from=\"1599100018552\" duration=\"16420000\" />\r\n      <workItem from=\"1599193421310\" duration=\"4128000\" />\r\n      <workItem from=\"1599380463185\" duration=\"1020000\" />\r\n      <workItem from=\"1599476744621\" duration=\"1011000\" />\r\n      <workItem from=\"1599540525019\" duration=\"43000\" />\r\n      <workItem from=\"1599808192755\" duration=\"8809000\" />\r\n      <workItem from=\"1600081524699\" duration=\"2427000\" />\r\n      <workItem from=\"1600243223869\" duration=\"14000\" />\r\n      <workItem from=\"1600244942012\" duration=\"568000\" />\r\n      <workItem from=\"1600245562984\" duration=\"241000\" />\r\n      <workItem from=\"1600588332842\" duration=\"9013000\" />\r\n      <workItem from=\"1600653133927\" duration=\"4591000\" />\r\n      <workItem from=\"1600667938061\" duration=\"198000\" />\r\n      <workItem from=\"1600668178880\" duration=\"20000\" />\r\n      <workItem from=\"1600673816854\" duration=\"1683000\" />\r\n      <workItem from=\"1601020360634\" duration=\"1470000\" />\r\n      <workItem from=\"1601105841102\" duration=\"7000\" />\r\n      <workItem from=\"1601109429434\" duration=\"7000\" />\r\n      <workItem from=\"1601124838774\" duration=\"3000\" />\r\n      <workItem from=\"1601127982125\" duration=\"595000\" />\r\n      <workItem from=\"1601188911095\" duration=\"66000\" />\r\n      <workItem from=\"1601277733464\" duration=\"3389000\" />\r\n      <workItem from=\"1601300324201\" duration=\"138000\" />\r\n      <workItem from=\"1601311032931\" duration=\"867000\" />\r\n      <workItem from=\"1601342887385\" duration=\"8000\" />\r\n      <workItem from=\"1602135614031\" duration=\"23000\" />\r\n      <workItem from=\"1602135779588\" duration=\"1486000\" />\r\n      <workItem from=\"1602140686523\" duration=\"971000\" />\r\n      <workItem from=\"1602225408418\" duration=\"3216000\" />\r\n      <workItem from=\"1602311399429\" duration=\"1406000\" />\r\n      <workItem from=\"1602406329402\" duration=\"1224000\" />\r\n      <workItem from=\"1602415468966\" duration=\"1203000\" />\r\n      <workItem from=\"1602471709186\" duration=\"654000\" />\r\n      <workItem from=\"1602506044657\" duration=\"978000\" />\r\n      <workItem from=\"1602511587345\" duration=\"1438000\" />\r\n      <workItem from=\"1602516763833\" duration=\"101000\" />\r\n      <workItem from=\"1602554611658\" duration=\"601000\" />\r\n      <workItem from=\"1602589633009\" duration=\"15000\" />\r\n      <workItem from=\"1602684657780\" duration=\"294000\" />\r\n      <workItem from=\"1603249601321\" duration=\"643000\" />\r\n      <workItem from=\"1603453659263\" duration=\"1945000\" />\r\n      <workItem from=\"1603457177919\" duration=\"1076000\" />\r\n      <workItem from=\"1603459149759\" duration=\"4211000\" />\r\n      <workItem from=\"1603504416397\" duration=\"21360000\" />\r\n      <workItem from=\"1603592420122\" duration=\"6552000\" />\r\n      <workItem from=\"1603679399370\" duration=\"118000\" />\r\n      <workItem from=\"1603702520767\" duration=\"266000\" />\r\n      <workItem from=\"1603729598549\" duration=\"730000\" />\r\n      <workItem from=\"1604387144187\" duration=\"2979000\" />\r\n      <workItem from=\"1604583613276\" duration=\"2388000\" />\r\n      <workItem from=\"1605252202386\" duration=\"116000\" />\r\n      <workItem from=\"1607322702170\" duration=\"4969000\" />\r\n      <workItem from=\"1607340904596\" duration=\"1987000\" />\r\n      <workItem from=\"1607357914717\" duration=\"45000\" />\r\n      <workItem from=\"1608031953233\" duration=\"515000\" />\r\n      <workItem from=\"1608032494160\" duration=\"8140000\" />\r\n      <workItem from=\"1608088312924\" duration=\"5871000\" />\r\n      <workItem from=\"1608097721611\" duration=\"327000\" />\r\n      <workItem from=\"1608100780845\" duration=\"7147000\" />\r\n      <workItem from=\"1608200335965\" duration=\"2823000\" />\r\n      <workItem from=\"1608257277261\" duration=\"3362000\" />\r\n      <workItem from=\"1608272460356\" duration=\"6601000\" />\r\n      <workItem from=\"1608280307984\" duration=\"618000\" />\r\n      <workItem from=\"1608282034410\" duration=\"2248000\" />\r\n      <workItem from=\"1608442982117\" duration=\"102000\" />\r\n      <workItem from=\"1608534078220\" duration=\"3480000\" />\r\n      <workItem from=\"1608558535511\" duration=\"27000\" />\r\n      <workItem from=\"1610961440036\" duration=\"11402000\" />\r\n      <workItem from=\"1610980355914\" duration=\"1467000\" />\r\n      <workItem from=\"1611059057888\" duration=\"55000\" />\r\n      <workItem from=\"1611059314063\" duration=\"1214000\" />\r\n      <workItem from=\"1611065509051\" duration=\"1805000\" />\r\n      <workItem from=\"1615452188836\" duration=\"211000\" />\r\n      <workItem from=\"1615724430276\" duration=\"4174000\" />\r\n      <workItem from=\"1615773290326\" duration=\"6661000\" />\r\n      <workItem from=\"1615822775493\" duration=\"12000\" />\r\n      <workItem from=\"1615824772142\" duration=\"941000\" />\r\n      <workItem from=\"1615857210661\" duration=\"1165000\" />\r\n      <workItem from=\"1617015632033\" duration=\"10350000\" />\r\n      <workItem from=\"1617028288256\" duration=\"8162000\" />\r\n      <workItem from=\"1617066387747\" duration=\"652000\" />\r\n      <workItem from=\"1617106765619\" duration=\"1131000\" />\r\n      <workItem from=\"1617156105902\" duration=\"12186000\" />\r\n      <workItem from=\"1617175759290\" duration=\"401000\" />\r\n      <workItem from=\"1617176252252\" duration=\"1273000\" />\r\n      <workItem from=\"1617178899547\" duration=\"1407000\" />\r\n      <workItem from=\"1617206814127\" duration=\"2980000\" />\r\n      <workItem from=\"1617235808808\" duration=\"28576000\" />\r\n      <workItem from=\"1617284034858\" duration=\"67000\" />\r\n      <workItem from=\"1617284161952\" duration=\"895000\" />\r\n      <workItem from=\"1617285134997\" duration=\"473000\" />\r\n      <workItem from=\"1617285632477\" duration=\"2106000\" />\r\n      <workItem from=\"1617287872962\" duration=\"1242000\" />\r\n      <workItem from=\"1617333455755\" duration=\"123000\" />\r\n      <workItem from=\"1617368406259\" duration=\"3723000\" />\r\n      <workItem from=\"1617375363855\" duration=\"643000\" />\r\n      <workItem from=\"1617451729802\" duration=\"7403000\" />\r\n      <workItem from=\"1617460097654\" duration=\"1267000\" />\r\n      <workItem from=\"1617586474978\" duration=\"22359000\" />\r\n      <workItem from=\"1617673770284\" duration=\"1279000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"20200826\">\r\n      <created>1598429152647</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1598429152647</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"20200826\">\r\n      <created>1598442311455</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1598442311455</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"20200826\">\r\n      <created>1598446989653</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1598446989653</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"20200828\">\r\n      <created>1598595808018</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1598595808018</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"20200902\">\r\n      <created>1599047432795</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1599047432795</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"20200904\">\r\n      <created>1599194307327</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1599194307327</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"20200916\">\r\n      <created>1600244965133</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1600244965133</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"20200928\">\r\n      <created>1601277918997</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1601277918997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"20201014\">\r\n      <created>1602684713789</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1602684713789</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"20210330\">\r\n      <created>1617106959353</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617106959353</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"20210402 student record\">\r\n      <created>1617368977299</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617368977299</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"20210406 new student record\">\r\n      <created>1617674730355</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617674730355</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"13\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"1\">\r\n          <value>\r\n            <State>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"roots\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"$PROJECT_DIR$\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"1\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"20200826\" />\r\n    <MESSAGE value=\"20200828\" />\r\n    <MESSAGE value=\"20200902\" />\r\n    <MESSAGE value=\"20200904\" />\r\n    <MESSAGE value=\"20200916\" />\r\n    <MESSAGE value=\"20200928\" />\r\n    <MESSAGE value=\"20201014\" />\r\n    <MESSAGE value=\"20210329\" />\r\n    <MESSAGE value=\"20210330\" />\r\n    <MESSAGE value=\"20210402 student record\" />\r\n    <MESSAGE value=\"20210406 new student record\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"20210406 new student record\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"395\" y=\"91\" key=\"#Inspections\" timestamp=\"1617459490217\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"395\" y=\"91\" key=\"#Inspections/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617459490217\" />\r\n    <state x=\"223\" y=\"67\" width=\"1089\" height=\"739\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1617617583980\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"223\" y=\"67\" width=\"1089\" height=\"739\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1536.824@0.0.1536.824\" timestamp=\"1617617583980\" />\r\n    <state x=\"381\" y=\"142\" key=\"#com.intellij.fileTypes.FileTypeChooser\" timestamp=\"1610970951627\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"381\" y=\"142\" key=\"#com.intellij.fileTypes.FileTypeChooser/0.0.1280.680@0.0.1280.680\" timestamp=\"1610970951627\" />\r\n    <state x=\"574\" y=\"128\" key=\"#com.intellij.ide.util.MemberChooser\" timestamp=\"1617615608988\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"574\" y=\"128\" key=\"#com.intellij.ide.util.MemberChooser/0.0.1536.824@0.0.1536.824\" timestamp=\"1617615608988\" />\r\n    <state x=\"419\" y=\"208\" width=\"443\" height=\"272\" key=\"#com.intellij.refactoring.move.moveClassesOrPackages.MoveClassesOrPackagesDialog.classes\" timestamp=\"1615783118599\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"419\" y=\"208\" width=\"443\" height=\"272\" key=\"#com.intellij.refactoring.move.moveClassesOrPackages.MoveClassesOrPackagesDialog.classes/0.0.1280.680@0.0.1280.680\" timestamp=\"1615783118599\" />\r\n    <state x=\"371\" y=\"87\" key=\"#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog\" timestamp=\"1617018383335\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"371\" y=\"87\" key=\"#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/0.0.1280.680@0.0.1280.680\" timestamp=\"1617018383335\" />\r\n    <state x=\"505\" y=\"116\" key=\"FileChooserDialogImpl\" timestamp=\"1617675006478\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"421\" y=\"96\" key=\"FileChooserDialogImpl/0.0.1280.680@0.0.1280.680\" timestamp=\"1617107595132\" />\r\n    <state x=\"505\" y=\"116\" key=\"FileChooserDialogImpl/0.0.1536.824@0.0.1536.824\" timestamp=\"1617675006478\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1617624324898\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680\" timestamp=\"1617067043950\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.bottom/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282740\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.bottom/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324898\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.center\" timestamp=\"1617624324897\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680\" timestamp=\"1617067043950\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.center/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282739\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.center/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324897\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.left\" timestamp=\"1617624324897\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680\" timestamp=\"1617067043950\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.left/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282739\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.left/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324897\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.right\" timestamp=\"1617624324898\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680\" timestamp=\"1617067043950\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.right/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282739\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.0.right/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324898\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.bottom\" timestamp=\"1617624324898\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.1.bottom/0.0.1280.680@0.0.1280.680\" timestamp=\"1615779598260\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.bottom/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282740\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.bottom/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324898\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.center\" timestamp=\"1617624324898\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.1.center/0.0.1280.680@0.0.1280.680\" timestamp=\"1615779598260\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.center/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282740\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.center/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324898\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.left\" timestamp=\"1617624324898\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.1.left/0.0.1280.680@0.0.1280.680\" timestamp=\"1615779598259\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.left/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282740\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.left/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324898\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.right\" timestamp=\"1617624324898\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"197\" key=\"GridCell.Tab.1.right/0.0.1280.680@0.0.1280.680\" timestamp=\"1615779598260\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.right/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617461282740\" />\r\n    <state width=\"1493\" height=\"203\" key=\"GridCell.Tab.1.right/0.0.1536.824@0.0.1536.824\" timestamp=\"1617624324898\" />\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.bottom\" timestamp=\"1617593028921\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.bottom/0.0.1536.824@0.0.1536.824\" timestamp=\"1617593028921\" />\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.center\" timestamp=\"1617593028921\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.center/0.0.1536.824@0.0.1536.824\" timestamp=\"1617593028921\" />\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.left\" timestamp=\"1617593028921\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.left/0.0.1536.824@0.0.1536.824\" timestamp=\"1617593028921\" />\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.right\" timestamp=\"1617593028921\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"251\" key=\"GridCell.Tab.2.right/0.0.1536.824@0.0.1536.824\" timestamp=\"1617593028921\" />\r\n    <state x=\"299\" y=\"67\" key=\"Maven.ArtifactSearchDialog\" timestamp=\"1617265493970\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"299\" y=\"67\" key=\"Maven.ArtifactSearchDialog/0.0.1536.824@0.0.1536.824\" timestamp=\"1617265493970\" />\r\n    <state x=\"142\" y=\"0\" key=\"SettingsEditor\" timestamp=\"1617016240447\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"142\" y=\"0\" key=\"SettingsEditor/0.0.1280.680@0.0.1280.680\" timestamp=\"1617016240447\" />\r\n    <state x=\"280\" y=\"73\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1617674732037\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"233\" y=\"60\" key=\"Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680\" timestamp=\"1617106962090\" />\r\n    <state x=\"280\" y=\"73\" key=\"Vcs.Push.Dialog.v2/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617452157363\" />\r\n    <state x=\"280\" y=\"73\" key=\"Vcs.Push.Dialog.v2/0.0.1536.824@0.0.1536.824\" timestamp=\"1617674732037\" />\r\n    <state x=\"93\" y=\"93\" width=\"1095\" height=\"495\" maximized=\"true\" key=\"com.intellij.history.integration.ui.views.FileHistoryDialog\" timestamp=\"1615779586353\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"93\" y=\"93\" width=\"1095\" height=\"495\" maximized=\"true\" key=\"com.intellij.history.integration.ui.views.FileHistoryDialog/0.0.1280.680@0.0.1280.680\" timestamp=\"1615779586353\" />\r\n    <state x=\"442\" y=\"31\" key=\"com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser\" timestamp=\"1617592706519\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"442\" y=\"31\" key=\"com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser/0.0.1536.824@0.0.1536.824\" timestamp=\"1617592706519\" />\r\n    <state x=\"573\" y=\"325\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1617608363977\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"573\" y=\"325\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1536.824@0.0.1536.824\" timestamp=\"1617608363977\" />\r\n    <state x=\"407\" y=\"87\" width=\"724\" height=\"650\" key=\"find.popup\" timestamp=\"1617615997662\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"339\" y=\"72\" width=\"603\" height=\"536\" key=\"find.popup/0.0.1280.680@0.0.1280.680\" timestamp=\"1615824945601\" />\r\n    <state x=\"407\" y=\"87\" width=\"724\" height=\"650\" key=\"find.popup/0.0.1536.824@0.0.1536.824\" timestamp=\"1617615997662\" />\r\n    <state x=\"529\" y=\"124\" key=\"git4idea.branch.GitSmartOperationDialog\" timestamp=\"1617608394075\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"529\" y=\"124\" key=\"git4idea.branch.GitSmartOperationDialog/0.0.1536.824@0.0.1536.824\" timestamp=\"1617608394075\" />\r\n    <state x=\"34\" y=\"1\" key=\"new project wizard\" timestamp=\"1617157844647\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"28\" y=\"1\" key=\"new project wizard/0.0.1280.680@0.0.1280.680\" timestamp=\"1617107611635\" />\r\n    <state x=\"34\" y=\"1\" key=\"new project wizard/0.0.1536.824@0.0.1536.824\" timestamp=\"1617157844647\" />\r\n    <state x=\"425\" y=\"187\" key=\"run.anything.popup\" timestamp=\"1617375409393\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"425\" y=\"187\" key=\"run.anything.popup/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617375409393\" />\r\n    <state x=\"425\" y=\"187\" key=\"run.anything.popup/0.0.1536.824@0.0.1536.824\" timestamp=\"1617157732641\" />\r\n    <state x=\"431\" y=\"145\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1617614987872\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\r\n    </state>\r\n    <state x=\"431\" y=\"145\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824\" timestamp=\"1617452884352\" />\r\n    <state x=\"431\" y=\"145\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.0.1536.824@0.0.1536.824\" timestamp=\"1617614987872\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/circuitQA$CircuitQA.ic\" NAME=\"CircuitQA Coverage Results\" MODIFIED=\"1617272270091\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ .idea/workspace.xml	(date 1617718704125)
@@ -8,7 +8,86 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2576c9c4-7f89-4ccf-94a4-8147a6a52c81" name="Default Changelist" comment="20210406 new student record" />
+    <list default="true" id="2576c9c4-7f89-4ccf-94a4-8147a6a52c81" name="Default Changelist" comment="20210406 new student record">
+      <change afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/userMapper.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/artifacts/circuitQA_war_exploded.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/artifacts/circuitQA_war_exploded.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_projectlombok_lombok_1_18_18.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Maven__org_projectlombok_lombok_1_16_20.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/circuitQA.iml" beforeDir="false" afterPath="$PROJECT_DIR$/circuitQA.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/PageIndexController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/PageIndexController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/QuestionController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/QuestionController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/StudentController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/StudentController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/getRecordByDate.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/controller/getRecordByDate.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/RecordMapper.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/StudentMapper.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/StudentMapper.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/circuitQaMapper.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/circuitQaMapper.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/messageMapper.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/Record.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/Student.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/circuitQa.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/circuitQaExample.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/keyWord.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/keyWordExample.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/message.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/messageExample.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/pojo/recordExample.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/CircuitQAService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/CircuitQAService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/CoreProcessService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/CoreProcessService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/KeyWordService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/KeyWordService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/StudentService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/StudentService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/serviceImpl/MessageServiceImpl.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/serviceImpl/RecordServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/serviceImpl/RecordServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/serviceImpl/StudentServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/service/serviceImpl/StudentServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/generatorConfig.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/generatorConfig.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/mapper/RecordMapper.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/mapper/StudentMapper.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/mapper/StudentMapper.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/mapper/circuitQaMapper.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/mapper/circuitQaMapper.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/mapper/keyWordMapper.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/mapper/keyWordMapper.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/mapper/messageMapper.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/mapper/userMapper.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/mapper/recordMapper.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/mapper/recordMapper.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/cn/sysu/circuitQA/KeyWordServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/cn/sysu/circuitQA/KeyWordServiceTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/cn/sysu/circuitQA/ProcessServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/cn/sysu/circuitQA/ProcessServiceTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/CircuitQA.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/controller/PageIndexController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/controller/QuestionController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/controller/StudentController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/controller/getRecordByDate.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/mapper/RecordMapper.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/mapper/StudentMapper.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/mapper/circuitQaMapper.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/mapper/keyWordMapper.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/Record.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/Student.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/circuitQa.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/circuitQaExample$Criteria.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/circuitQaExample$Criterion.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/circuitQaExample$GeneratedCriteria.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/circuitQaExample.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/keyWord.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/keyWordExample$Criteria.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/keyWordExample$Criterion.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/keyWordExample$GeneratedCriteria.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/pojo/keyWordExample.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/CircuitQAService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/CoreProcessService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/KeyWordService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/QuestionService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/RecordService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/StudentService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/serviceImpl/CircuitQAServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/serviceImpl/KeyWordServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/serviceImpl/QuestionServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/serviceImpl/RecordServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/cn/sysu/circuitQA/service/serviceImpl/StudentServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/generatorConfig.xml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/generatorConfig.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/mapper/RecordMapper.xml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/mapper/RecordMapper.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/mapper/StudentMapper.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/templates/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/templates/index.html" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -44,7 +123,7 @@
     <option name="generalSettings">
       <MavenGeneralSettings>
         <option name="mavenHome" value="C:\Users\zry\.m2\wrapper\dists\apache-maven-3.5.2-bin\28qa8v9e2mq69covern8vmdkj0\apache-maven-3.5.2" />
-        <option name="userSettingsFile" value="C:\apache-maven-3.6.3\conf\settings.xml" />
+        <option name="userSettingsFile" value="C:\Users\zry\.m2\settings.xml" />
       </MavenGeneralSettings>
     </option>
   </component>
@@ -77,7 +156,7 @@
     <property name="project.structure.side.proportion" value="0.2" />
     <property name="restartRequiresConfirmation" value="false" />
     <property name="run.code.analysis.last.selected.profile" value="pProject Default" />
-    <property name="settings.editor.selected.configurable" value="project.propVCSSupport.Mappings" />
+    <property name="settings.editor.selected.configurable" value="MavenSettings" />
   </component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
@@ -108,6 +187,17 @@
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
+      <option name="arquillianRunConfiguration">
+        <value>
+          <option name="containerStateName" value="" />
+        </value>
+      </option>
+      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -244,6 +334,8 @@
       <workItem from="1617460097654" duration="1267000" />
       <workItem from="1617586474978" duration="22359000" />
       <workItem from="1617673770284" duration="1279000" />
+      <workItem from="1617678861727" duration="2435000" />
+      <workItem from="1617716056051" duration="2387000" />
     </task>
     <task id="LOCAL-00001" summary="20200826">
       <created>1598429152647</created>
@@ -416,63 +508,64 @@
       <screen x="0" y="0" width="1280" height="680" />
     </state>
     <state x="419" y="208" width="443" height="272" key="#com.intellij.refactoring.move.moveClassesOrPackages.MoveClassesOrPackagesDialog.classes/0.0.1280.680@0.0.1280.680" timestamp="1615783118599" />
-    <state x="371" y="87" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog" timestamp="1617018383335">
-      <screen x="0" y="0" width="1280" height="680" />
+    <state x="445" y="105" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog" timestamp="1617718357363">
+      <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state x="371" y="87" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/0.0.1280.680@0.0.1280.680" timestamp="1617018383335" />
+    <state x="445" y="105" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/0.0.1536.824@0.0.1536.824" timestamp="1617718357363" />
     <state x="505" y="116" key="FileChooserDialogImpl" timestamp="1617675006478">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state x="421" y="96" key="FileChooserDialogImpl/0.0.1280.680@0.0.1280.680" timestamp="1617107595132" />
     <state x="505" y="116" key="FileChooserDialogImpl/0.0.1536.824@0.0.1536.824" timestamp="1617675006478" />
-    <state width="1493" height="203" key="GridCell.Tab.0.bottom" timestamp="1617624324898">
+    <state width="1493" height="203" key="GridCell.Tab.0.bottom" timestamp="1617718627485">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1617067043950" />
-    <state width="1493" height="203" key="GridCell.Tab.0.bottom/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282740" />
-    <state width="1493" height="203" key="GridCell.Tab.0.bottom/0.0.1536.824@0.0.1536.824" timestamp="1617624324898" />
-    <state width="1493" height="203" key="GridCell.Tab.0.center" timestamp="1617624324897">
+    <state width="1493" height="203" key="GridCell.Tab.0.bottom/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617694265488" />
+    <state width="1493" height="203" key="GridCell.Tab.0.bottom/0.0.1536.824@0.0.1536.824" timestamp="1617718627485" />
+    <state width="1493" height="203" key="GridCell.Tab.0.center" timestamp="1617718627485">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1617067043950" />
-    <state width="1493" height="203" key="GridCell.Tab.0.center/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282739" />
-    <state width="1493" height="203" key="GridCell.Tab.0.center/0.0.1536.824@0.0.1536.824" timestamp="1617624324897" />
-    <state width="1493" height="203" key="GridCell.Tab.0.left" timestamp="1617624324897">
+    <state width="1493" height="203" key="GridCell.Tab.0.center/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617694265487" />
+    <state width="1493" height="203" key="GridCell.Tab.0.center/0.0.1536.824@0.0.1536.824" timestamp="1617718627485" />
+    <state width="1493" height="203" key="GridCell.Tab.0.left" timestamp="1617718627485">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1617067043950" />
-    <state width="1493" height="203" key="GridCell.Tab.0.left/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282739" />
-    <state width="1493" height="203" key="GridCell.Tab.0.left/0.0.1536.824@0.0.1536.824" timestamp="1617624324897" />
-    <state width="1493" height="203" key="GridCell.Tab.0.right" timestamp="1617624324898">
+    <state width="1493" height="203" key="GridCell.Tab.0.left/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617694265487" />
+    <state width="1493" height="203" key="GridCell.Tab.0.left/0.0.1536.824@0.0.1536.824" timestamp="1617718627485" />
+    <state width="1493" height="203" key="GridCell.Tab.0.right" timestamp="1617718627485">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1617067043950" />
-    <state width="1493" height="203" key="GridCell.Tab.0.right/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282739" />
-    <state width="1493" height="203" key="GridCell.Tab.0.right/0.0.1536.824@0.0.1536.824" timestamp="1617624324898" />
-    <state width="1493" height="203" key="GridCell.Tab.1.bottom" timestamp="1617624324898">
+    <state width="1493" height="203" key="GridCell.Tab.0.right/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617694265488" />
+    <state width="1493" height="203" key="GridCell.Tab.0.right/0.0.1536.824@0.0.1536.824" timestamp="1617718627485" />
+    <state width="1493" height="203" key="GridCell.Tab.1.bottom" timestamp="1617676106091">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.1.bottom/0.0.1280.680@0.0.1280.680" timestamp="1615779598260" />
     <state width="1493" height="203" key="GridCell.Tab.1.bottom/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282740" />
-    <state width="1493" height="203" key="GridCell.Tab.1.bottom/0.0.1536.824@0.0.1536.824" timestamp="1617624324898" />
-    <state width="1493" height="203" key="GridCell.Tab.1.center" timestamp="1617624324898">
+    <state width="1493" height="203" key="GridCell.Tab.1.bottom/0.0.1536.824@0.0.1536.824" timestamp="1617676106091" />
+    <state width="1493" height="203" key="GridCell.Tab.1.center" timestamp="1617676106091">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.1.center/0.0.1280.680@0.0.1280.680" timestamp="1615779598260" />
     <state width="1493" height="203" key="GridCell.Tab.1.center/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282740" />
-    <state width="1493" height="203" key="GridCell.Tab.1.center/0.0.1536.824@0.0.1536.824" timestamp="1617624324898" />
-    <state width="1493" height="203" key="GridCell.Tab.1.left" timestamp="1617624324898">
+    <state width="1493" height="203" key="GridCell.Tab.1.center/0.0.1536.824@0.0.1536.824" timestamp="1617676106091" />
+    <state width="1493" height="203" key="GridCell.Tab.1.left" timestamp="1617676106091">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.1.left/0.0.1280.680@0.0.1280.680" timestamp="1615779598259" />
     <state width="1493" height="203" key="GridCell.Tab.1.left/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282740" />
-    <state width="1493" height="203" key="GridCell.Tab.1.left/0.0.1536.824@0.0.1536.824" timestamp="1617624324898" />
-    <state width="1493" height="203" key="GridCell.Tab.1.right" timestamp="1617624324898">
+    <state width="1493" height="203" key="GridCell.Tab.1.left/0.0.1536.824@0.0.1536.824" timestamp="1617676106091" />
+    <state width="1493" height="203" key="GridCell.Tab.1.right" timestamp="1617676106091">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state width="1237" height="197" key="GridCell.Tab.1.right/0.0.1280.680@0.0.1280.680" timestamp="1615779598260" />
     <state width="1493" height="203" key="GridCell.Tab.1.right/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1617461282740" />
-    <state width="1493" height="203" key="GridCell.Tab.1.right/0.0.1536.824@0.0.1536.824" timestamp="1617624324898" />
+    <state width="1493" height="203" key="GridCell.Tab.1.right/0.0.1536.824@0.0.1536.824" timestamp="1617676106091" />
     <state width="1493" height="251" key="GridCell.Tab.2.bottom" timestamp="1617593028921">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
@@ -493,10 +586,11 @@
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state x="299" y="67" key="Maven.ArtifactSearchDialog/0.0.1536.824@0.0.1536.824" timestamp="1617265493970" />
-    <state x="142" y="0" key="SettingsEditor" timestamp="1617016240447">
-      <screen x="0" y="0" width="1280" height="680" />
+    <state x="185" y="113" width="996" height="707" key="SettingsEditor" timestamp="1617676453788">
+      <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state x="142" y="0" key="SettingsEditor/0.0.1280.680@0.0.1280.680" timestamp="1617016240447" />
+    <state x="185" y="113" width="996" height="707" key="SettingsEditor/0.0.1536.824@0.0.1536.824" timestamp="1617676453788" />
     <state x="280" y="73" key="Vcs.Push.Dialog.v2" timestamp="1617674732037">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
@@ -515,11 +609,11 @@
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state x="573" y="325" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1536.824@0.0.1536.824" timestamp="1617608363977" />
-    <state x="407" y="87" width="724" height="650" key="find.popup" timestamp="1617615997662">
+    <state x="166" y="131" width="724" height="650" key="find.popup" timestamp="1617676168813">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
     <state x="339" y="72" width="603" height="536" key="find.popup/0.0.1280.680@0.0.1280.680" timestamp="1615824945601" />
-    <state x="407" y="87" width="724" height="650" key="find.popup/0.0.1536.824@0.0.1536.824" timestamp="1617615997662" />
+    <state x="166" y="131" width="724" height="650" key="find.popup/0.0.1536.824@0.0.1536.824" timestamp="1617676168813" />
     <state x="529" y="124" key="git4idea.branch.GitSmartOperationDialog" timestamp="1617608394075">
       <screen x="0" y="0" width="1536" height="824" />
     </state>
Index: src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\n\r\nimport java.util.List;\r\n\r\n@SpringBootTest\r\n@RunWith(SpringRunner.class)\r\npublic class CircuitQAServiceTest {\r\n    @Autowired\r\n    private cn.sysu.circuitQA.service.CircuitQAService circuitQAService;\r\n\r\n    @Test\r\n    public void questionTest() {\r\n        List<circuitQa> list= circuitQAService.importQuestions();\r\n        circuitQa qa= list.get(2);\r\n        System.out.println(\"是啥\"+qa.getChildid());\r\n        System.out.println(qa.getChildid().equals(\" \"));\r\n        System.out.println(\"\".equals(null));\r\n        System.out.println(qa.getChildid().equals(\"\\\\N\"));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/test/java/cn/sysu/circuitQA/CircuitQAServiceTest.java	(date 1617676054052)
@@ -1,6 +1,5 @@
 package cn.sysu.circuitQA;
 
-import cn.sysu.circuitQA.pojo.circuitQa;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
Index: target/classes/generatorConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE generatorConfiguration\r\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\r\n\r\n<generatorConfiguration>\r\n\r\n    <context id=\"Tables\" targetRuntime=\"MyBatis3\">\r\n\r\n        <!-- 注释 -->\r\n        <commentGenerator>\r\n            <!-- 是否生成注释代时间戳 -->\r\n            <property name=\"suppressDate\" value=\"true\"/>\r\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\r\n            <property name=\"suppressAllComments\" value=\"true\"/>\r\n        </commentGenerator>\r\n\r\n        <!-- JDBC连接 其中connectionURL后面的newtest改为你创建的数据库，紧跟在后面是数据库连接的账户和密码-->\r\n        <jdbcConnection\r\n                driverClass=\"com.mysql.jdbc.Driver\"\r\n                connectionURL=\"jdbc:mysql://localhost:3306/circuitqa\"\r\n                userId=\"root\"\r\n                password=\"123456\">\r\n        </jdbcConnection>\r\n\r\n        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->\r\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\r\n         NUMERIC 类型解析为java.math.BigDecimal -->\r\n        <javaTypeResolver>\r\n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->\r\n            <property name=\"forceBigDecimals\" value=\"false\" />\r\n        </javaTypeResolver>\r\n\r\n        <!-- 生成实体类地址 这里需要你改动，其中targetPackage需要根据你自己创建的目录进行改动 -->\r\n        <javaModelGenerator targetPackage=\"cn.sysu.circuitQA.pojo\" targetProject=\"src/main/java\">\r\n            <!-- 从数据库返回的值被清理前后的空格 -->\r\n            <property name=\"trimStrings\" value=\"true\" />\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaModelGenerator>\r\n\r\n        <!-- 生成mapper xml文件 这里不需要改动 -->\r\n        <sqlMapGenerator targetPackage=\"mapper\"  targetProject=\"src/main/resources\">\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </sqlMapGenerator>\r\n\r\n        <!-- 生成mapper xml对应Client   这里需要改动targetPackage，依据你自己的工程-->\r\n        <javaClientGenerator targetPackage=\"cn.sysu.circuitQA.mapper\" targetProject=\"src/main/java\" type=\"XMLMAPPER\">\r\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaClientGenerator>\r\n\r\n        <!-- 配置表信息 -->\r\n        <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample\r\n            是否生成 example类 -->\r\n\r\n        <table tableName=\"circuitqa\" domainObjectName=\"circuitQa\"></table>\r\n\r\n        <table tableName=\"keyword\" domainObjectName=\"keyWord\"></table>\r\n\r\n        <table tableName=\"message\" domainObjectName=\"message\"></table>\r\n\r\n        <table tableName=\"record\" domainObjectName=\"record\"></table>\r\n\r\n    </context>\r\n</generatorConfiguration>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/generatorConfig.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ target/classes/generatorConfig.xml	(date 1617676106029)
@@ -59,7 +59,7 @@
 
         <table tableName="keyword" domainObjectName="keyWord"></table>
 
-        <table tableName="message" domainObjectName="message"></table>
+        <table tableName="user" domainObjectName="user"></table>
 
         <table tableName="record" domainObjectName="record"></table>
 
Index: src/main/resources/mapper/StudentMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.StudentMapper\" >\r\n    <select id=\"findById\" resultType=\"cn.sysu.circuitQA.pojo.Student\">select * from student where id = #{id}</select>\r\n    <select id=\"findPswById\" resultType=\"java.lang.String\">select password from student where id = #{id}</select>\r\n    <select id=\"save\">insert into student(id,studentName,password,classAndGrade) values(#{id},#{studentName},#{password},#{classAndGrade}) </select>\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/mapper/StudentMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/StudentMapper.xml	(date 1617718625117)
@@ -1,7 +1,772 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.StudentMapper" >
-    <select id="findById" resultType="cn.sysu.circuitQA.pojo.Student">select * from student where id = #{id}</select>
-    <select id="findPswById" resultType="java.lang.String">select password from student where id = #{id}</select>
-    <select id="save">insert into student(id,studentName,password,classAndGrade) values(#{id},#{studentName},#{password},#{classAndGrade}) </select>
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="cn.sysu.circuitQA.mapper.StudentMapper">
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Student">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="password" jdbcType="VARCHAR" property="password" />
+    <result column="classAndGrade" jdbcType="VARCHAR" property="classandgrade" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, studentName, password, classAndGrade
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from student
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from student
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample">
+    delete from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student (id, studentName, password, 
+      classAndGrade)
+    values (#{id,jdbcType=INTEGER}, #{studentname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
+      #{classandgrade,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="password != null">
+        password,
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultType="java.lang.Integer">
+    select count(*) from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update student
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.password != null">
+        password = #{record.password,jdbcType=VARCHAR},
+      </if>
+      <if test="record.classandgrade != null">
+        classAndGrade = #{record.classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update student
+    set id = #{record.id,jdbcType=INTEGER},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      password = #{record.password,jdbcType=VARCHAR},
+      classAndGrade = #{record.classandgrade,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    <set>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        password = #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade = #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    set studentName = #{studentname,jdbcType=VARCHAR},
+      password = #{password,jdbcType=VARCHAR},
+      classAndGrade = #{classandgrade,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Student">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="password" jdbcType="VARCHAR" property="password" />
+    <result column="classAndGrade" jdbcType="VARCHAR" property="classandgrade" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, studentName, password, classAndGrade
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from student
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from student
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample">
+    delete from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student (id, studentName, password, 
+      classAndGrade)
+    values (#{id,jdbcType=INTEGER}, #{studentname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
+      #{classandgrade,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="password != null">
+        password,
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultType="java.lang.Integer">
+    select count(*) from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update student
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.password != null">
+        password = #{record.password,jdbcType=VARCHAR},
+      </if>
+      <if test="record.classandgrade != null">
+        classAndGrade = #{record.classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update student
+    set id = #{record.id,jdbcType=INTEGER},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      password = #{record.password,jdbcType=VARCHAR},
+      classAndGrade = #{record.classandgrade,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    <set>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        password = #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade = #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    set studentName = #{studentname,jdbcType=VARCHAR},
+      password = #{password,jdbcType=VARCHAR},
+      classAndGrade = #{classandgrade,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Student">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="password" jdbcType="VARCHAR" property="password" />
+    <result column="classAndGrade" jdbcType="VARCHAR" property="classandgrade" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, studentName, password, classAndGrade
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from student
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from student
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample">
+    delete from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student (id, studentName, password, 
+      classAndGrade)
+    values (#{id,jdbcType=INTEGER}, #{studentname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
+      #{classandgrade,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="password != null">
+        password,
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultType="java.lang.Integer">
+    select count(*) from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update student
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.password != null">
+        password = #{record.password,jdbcType=VARCHAR},
+      </if>
+      <if test="record.classandgrade != null">
+        classAndGrade = #{record.classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update student
+    set id = #{record.id,jdbcType=INTEGER},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      password = #{record.password,jdbcType=VARCHAR},
+      classAndGrade = #{record.classandgrade,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    <set>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        password = #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade = #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    set studentName = #{studentname,jdbcType=VARCHAR},
+      password = #{password,jdbcType=VARCHAR},
+      classAndGrade = #{classandgrade,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Student">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="password" jdbcType="VARCHAR" property="password" />
+    <result column="classAndGrade" jdbcType="VARCHAR" property="classandgrade" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, studentName, password, classAndGrade
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from student
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from student
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample">
+    delete from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student (id, studentName, password, 
+      classAndGrade)
+    values (#{id,jdbcType=INTEGER}, #{studentname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
+      #{classandgrade,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    insert into student
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="password != null">
+        password,
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.StudentExample" resultType="java.lang.Integer">
+    select count(*) from student
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update student
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.password != null">
+        password = #{record.password,jdbcType=VARCHAR},
+      </if>
+      <if test="record.classandgrade != null">
+        classAndGrade = #{record.classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update student
+    set id = #{record.id,jdbcType=INTEGER},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      password = #{record.password,jdbcType=VARCHAR},
+      classAndGrade = #{record.classandgrade,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    <set>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        password = #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade = #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Student">
+    update student
+    set studentName = #{studentname,jdbcType=VARCHAR},
+      password = #{password,jdbcType=VARCHAR},
+      classAndGrade = #{classandgrade,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
 </mapper>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\r\n\t<groupId>cn.sysu</groupId>\r\n\t<artifactId>circuitQA</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<packaging>war</packaging>\r\n\r\n\t<name>circuitQA</name>\r\n\t<description>circuitQA</description>\r\n\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>1.5.10.RELEASE</version>\r\n\t\t<relativePath/>\r\n\t</parent>\r\n\r\n\t<properties>\r\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n\t\t<java.version>1.8</java.version>\r\n\t\t<grpc.version>1.4.0</grpc.version>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t\t<exclusions>\r\n\t\t\t\t<exclusion>\r\n\t\t\t\t\t<groupId>org.slf4j</groupId>\r\n\t\t\t\t\t<artifactId>log4j-over-slf4j</artifactId>\r\n\t\t\t\t</exclusion>\r\n\t\t\t</exclusions>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\r\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\r\n\t\t\t<version>1.1.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- https://mvnrepository.com/artifact/log4j/log4j -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>log4j</groupId>\r\n\t\t\t<artifactId>log4j</artifactId>\r\n\t\t\t<version>1.2.17</version>\r\n\t\t</dependency>\r\n\t\t<!--grpc依赖-->\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.grpc</groupId>\r\n\t\t\t<artifactId>grpc-netty-shaded</artifactId>\r\n\t\t\t<version>1.20.0</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.grpc</groupId>\r\n\t\t\t<artifactId>grpc-protobuf</artifactId>\r\n\t\t\t<version>1.20.0</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.grpc</groupId>\r\n\t\t\t<artifactId>grpc-stub</artifactId>\r\n\t\t\t<version>1.20.0</version>\r\n\t\t</dependency>\r\n<!--\t\t<dependency>-->\r\n<!--\t\t\t<groupId>org.xolstice.maven.plugins</groupId>-->\r\n<!--\t\t\t<artifactId>protobuf-maven-plugin</artifactId>-->\r\n<!--\t\t\t<version>0.5.1</version>-->\r\n<!--\t\t</dependency>-->\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<extensions>\r\n\t\t\t<extension>\r\n\t\t\t\t<groupId>kr.motd.maven</groupId>\r\n\t\t\t\t<artifactId>os-maven-plugin</artifactId>\r\n\t\t\t\t<version>1.5.0.Final</version>\r\n\t\t\t</extension>\r\n\t\t</extensions>\r\n\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.xolstice.maven.plugins</groupId>\r\n\t\t\t\t<artifactId>protobuf-maven-plugin</artifactId>\r\n\t\t\t\t<version>0.5.1</version>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<protocArtifact>com.google.protobuf:protoc:3.7.1:exe:${os.detected.classifier}</protocArtifact>\r\n\t\t\t\t\t<pluginId>grpc-java</pluginId>\r\n\t\t\t\t\t<pluginArtifact>io.grpc:protoc-gen-grpc-java:1.20.0:exe:${os.detected.classifier}</pluginArtifact>\r\n\t\t\t\t</configuration>\r\n\t\t\t\t<executions>\r\n\t\t\t\t\t<execution>\r\n\t\t\t\t\t\t<goals>\r\n\t\t\t\t\t\t\t<goal>compile</goal>\r\n\t\t\t\t\t\t\t<goal>compile-custom</goal>\r\n\t\t\t\t\t\t</goals>\r\n\t\t\t\t\t</execution>\r\n\t\t\t\t</executions>\r\n\t\t\t</plugin>\r\n\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.mybatis.generator</groupId>\r\n\t\t\t\t<artifactId>mybatis-generator-maven-plugin</artifactId>\r\n\t\t\t\t<version>1.3.2</version>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<verbose>true</verbose>\r\n\t\t\t\t\t<overwrite>true</overwrite>\r\n\t\t\t\t</configuration>\r\n\t\t\t\t<dependencies>\r\n\t\t\t\t\t<dependency>\r\n\t\t\t\t\t\t<groupId>mysql</groupId>\r\n\t\t\t\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n\t\t\t\t\t\t<version>5.1.38</version>\r\n\t\t\t\t\t</dependency>\r\n\t\t\t\t</dependencies>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ pom.xml	(date 1617716356504)
@@ -80,7 +80,11 @@
 			<artifactId>grpc-stub</artifactId>
 			<version>1.20.0</version>
 		</dependency>
-<!--		<dependency>-->
+        <!--<dependency>-->
+        <!--    <groupId>org.projectlombok</groupId>-->
+        <!--    <artifactId>lombok</artifactId>-->
+        <!--</dependency>-->
+        <!--		<dependency>-->
 <!--			<groupId>org.xolstice.maven.plugins</groupId>-->
 <!--			<artifactId>protobuf-maven-plugin</artifactId>-->
 <!--			<version>0.5.1</version>-->
Index: src/main/resources/mapper/messageMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.messageMapper\" >\r\n  <resultMap id=\"BaseResultMap\" type=\"cn.sysu.circuitQA.pojo.message\" >\r\n    <result column=\"message\" property=\"message\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"date\" property=\"date\" jdbcType=\"VARCHAR\" />\r\n  </resultMap>\r\n  <sql id=\"Example_Where_Clause\" >\r\n    <where >\r\n      <foreach collection=\"oredCriteria\" item=\"criteria\" separator=\"or\" >\r\n        <if test=\"criteria.valid\" >\r\n          <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\" >\r\n            <foreach collection=\"criteria.criteria\" item=\"criterion\" >\r\n              <choose >\r\n                <when test=\"criterion.noValue\" >\r\n                  and ${criterion.condition}\r\n                </when>\r\n                <when test=\"criterion.singleValue\" >\r\n                  and ${criterion.condition} #{criterion.value}\r\n                </when>\r\n                <when test=\"criterion.betweenValue\" >\r\n                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\r\n                </when>\r\n                <when test=\"criterion.listValue\" >\r\n                  and ${criterion.condition}\r\n                  <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\" separator=\",\" >\r\n                    #{listItem}\r\n                  </foreach>\r\n                </when>\r\n              </choose>\r\n            </foreach>\r\n          </trim>\r\n        </if>\r\n      </foreach>\r\n    </where>\r\n  </sql>\r\n  <sql id=\"Update_By_Example_Where_Clause\" >\r\n    <where >\r\n      <foreach collection=\"example.oredCriteria\" item=\"criteria\" separator=\"or\" >\r\n        <if test=\"criteria.valid\" >\r\n          <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\" >\r\n            <foreach collection=\"criteria.criteria\" item=\"criterion\" >\r\n              <choose >\r\n                <when test=\"criterion.noValue\" >\r\n                  and ${criterion.condition}\r\n                </when>\r\n                <when test=\"criterion.singleValue\" >\r\n                  and ${criterion.condition} #{criterion.value}\r\n                </when>\r\n                <when test=\"criterion.betweenValue\" >\r\n                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\r\n                </when>\r\n                <when test=\"criterion.listValue\" >\r\n                  and ${criterion.condition}\r\n                  <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\" separator=\",\" >\r\n                    #{listItem}\r\n                  </foreach>\r\n                </when>\r\n              </choose>\r\n            </foreach>\r\n          </trim>\r\n        </if>\r\n      </foreach>\r\n    </where>\r\n  </sql>\r\n  <sql id=\"Base_Column_List\" >\r\n    message, date\r\n  </sql>\r\n  <select id=\"selectByExample\" resultMap=\"BaseResultMap\" parameterType=\"cn.sysu.circuitQA.pojo.messageExample\" >\r\n    select\r\n    <if test=\"distinct\" >\r\n      distinct\r\n    </if>\r\n    <include refid=\"Base_Column_List\" />\r\n    from message\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n    <if test=\"orderByClause != null\" >\r\n      order by ${orderByClause}\r\n    </if>\r\n  </select>\r\n  <delete id=\"deleteByExample\" parameterType=\"cn.sysu.circuitQA.pojo.messageExample\" >\r\n    delete from message\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n  </delete>\r\n  <insert id=\"insert\" parameterType=\"cn.sysu.circuitQA.pojo.message\" >\r\n    insert into message (message, date)\r\n    values (#{message,jdbcType=VARCHAR}, #{date,jdbcType=VARCHAR})\r\n  </insert>\r\n  <insert id=\"insertSelective\" parameterType=\"cn.sysu.circuitQA.pojo.message\" >\r\n    insert into message\r\n    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\" >\r\n      <if test=\"message != null\" >\r\n        message,\r\n      </if>\r\n      <if test=\"date != null\" >\r\n        date,\r\n      </if>\r\n    </trim>\r\n    <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\" >\r\n      <if test=\"message != null\" >\r\n        #{message,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"date != null\" >\r\n        #{date,jdbcType=VARCHAR},\r\n      </if>\r\n    </trim>\r\n  </insert>\r\n  <select id=\"countByExample\" parameterType=\"cn.sysu.circuitQA.pojo.messageExample\" resultType=\"java.lang.Integer\" >\r\n    select count(*) from message\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n  </select>\r\n  <update id=\"updateByExampleSelective\" parameterType=\"map\" >\r\n    update message\r\n    <set >\r\n      <if test=\"record.message != null\" >\r\n        message = #{record.message,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"record.date != null\" >\r\n        date = #{record.date,jdbcType=VARCHAR},\r\n      </if>\r\n    </set>\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Update_By_Example_Where_Clause\" />\r\n    </if>\r\n  </update>\r\n  <update id=\"updateByExample\" parameterType=\"map\" >\r\n    update message\r\n    set message = #{record.message,jdbcType=VARCHAR},\r\n      date = #{record.date,jdbcType=VARCHAR}\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Update_By_Example_Where_Clause\" />\r\n    </if>\r\n  </update>\r\n</mapper>
===================================================================
--- src/main/resources/mapper/messageMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/userMapper.xml	(date 1617717747253)
@@ -1,29 +1,31 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.messageMapper" >
-  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.message" >
-    <result column="message" property="message" jdbcType="VARCHAR" />
-    <result column="date" property="date" jdbcType="VARCHAR" />
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="cn.sysu.circuitQA.mapper.userMapper">
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.user">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="userName" jdbcType="VARCHAR" property="username" />
+    <result column="password" jdbcType="VARCHAR" property="password" />
+    <result column="classAndGrade" jdbcType="VARCHAR" property="classandgrade" />
   </resultMap>
-  <sql id="Example_Where_Clause" >
-    <where >
-      <foreach collection="oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
                   and ${criterion.condition}
                 </when>
-                <when test="criterion.singleValue" >
+                <when test="criterion.singleValue">
                   and ${criterion.condition} #{criterion.value}
                 </when>
-                <when test="criterion.betweenValue" >
+                <when test="criterion.betweenValue">
                   and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                 </when>
-                <when test="criterion.listValue" >
+                <when test="criterion.listValue">
                   and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                     #{listItem}
                   </foreach>
                 </when>
@@ -34,25 +36,25 @@
       </foreach>
     </where>
   </sql>
-  <sql id="Update_By_Example_Where_Clause" >
-    <where >
-      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
                   and ${criterion.condition}
                 </when>
-                <when test="criterion.singleValue" >
+                <when test="criterion.singleValue">
                   and ${criterion.condition} #{criterion.value}
                 </when>
-                <when test="criterion.betweenValue" >
+                <when test="criterion.betweenValue">
                   and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                 </when>
-                <when test="criterion.listValue" >
+                <when test="criterion.listValue">
                   and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                     #{listItem}
                   </foreach>
                 </when>
@@ -63,78 +65,324 @@
       </foreach>
     </where>
   </sql>
-  <sql id="Base_Column_List" >
-    message, date
+  <sql id="Base_Column_List">
+    id, userName, password, classAndGrade
   </sql>
-  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.sysu.circuitQA.pojo.messageExample" >
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.userExample" resultMap="BaseResultMap">
     select
-    <if test="distinct" >
+    <if test="distinct">
       distinct
     </if>
     <include refid="Base_Column_List" />
-    from message
-    <if test="_parameter != null" >
+    from user
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
-    <if test="orderByClause != null" >
+    <if test="orderByClause != null">
       order by ${orderByClause}
     </if>
   </select>
-  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.messageExample" >
-    delete from message
-    <if test="_parameter != null" >
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from user
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from user
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.userExample">
+    delete from user
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
   </delete>
-  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.message" >
-    insert into message (message, date)
-    values (#{message,jdbcType=VARCHAR}, #{date,jdbcType=VARCHAR})
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.user">
+    insert into user (id, userName, password, 
+      classAndGrade)
+    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
+      #{classandgrade,jdbcType=VARCHAR})
   </insert>
-  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.message" >
-    insert into message
-    <trim prefix="(" suffix=")" suffixOverrides="," >
-      <if test="message != null" >
-        message,
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.user">
+    insert into user
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
       </if>
-      <if test="date != null" >
-        date,
+      <if test="username != null">
+        userName,
+      </if>
+      <if test="password != null">
+        password,
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade,
       </if>
     </trim>
-    <trim prefix="values (" suffix=")" suffixOverrides="," >
-      <if test="message != null" >
-        #{message,jdbcType=VARCHAR},
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="username != null">
+        #{username,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        #{password,jdbcType=VARCHAR},
       </if>
-      <if test="date != null" >
-        #{date,jdbcType=VARCHAR},
+      <if test="classandgrade != null">
+        #{classandgrade,jdbcType=VARCHAR},
       </if>
     </trim>
   </insert>
-  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.messageExample" resultType="java.lang.Integer" >
-    select count(*) from message
-    <if test="_parameter != null" >
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.userExample" resultType="java.lang.Integer">
+    select count(*) from user
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
   </select>
-  <update id="updateByExampleSelective" parameterType="map" >
-    update message
-    <set >
-      <if test="record.message != null" >
-        message = #{record.message,jdbcType=VARCHAR},
+  <update id="updateByExampleSelective" parameterType="map">
+    update user
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
       </if>
-      <if test="record.date != null" >
-        date = #{record.date,jdbcType=VARCHAR},
+      <if test="record.username != null">
+        userName = #{record.username,jdbcType=VARCHAR},
+      </if>
+      <if test="record.password != null">
+        password = #{record.password,jdbcType=VARCHAR},
+      </if>
+      <if test="record.classandgrade != null">
+        classAndGrade = #{record.classandgrade,jdbcType=VARCHAR},
       </if>
     </set>
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Update_By_Example_Where_Clause" />
     </if>
   </update>
-  <update id="updateByExample" parameterType="map" >
-    update message
-    set message = #{record.message,jdbcType=VARCHAR},
-      date = #{record.date,jdbcType=VARCHAR}
-    <if test="_parameter != null" >
+  <update id="updateByExample" parameterType="map">
+    update user
+    set id = #{record.id,jdbcType=INTEGER},
+      userName = #{record.username,jdbcType=VARCHAR},
+      password = #{record.password,jdbcType=VARCHAR},
+      classAndGrade = #{record.classandgrade,jdbcType=VARCHAR}
+    <if test="_parameter != null">
       <include refid="Update_By_Example_Where_Clause" />
     </if>
   </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.user">
+    update user
+    <set>
+      <if test="username != null">
+        userName = #{username,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        password = #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade = #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.user">
+    update user
+    set userName = #{username,jdbcType=VARCHAR},
+      password = #{password,jdbcType=VARCHAR},
+      classAndGrade = #{classandgrade,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.user">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="password" jdbcType="VARCHAR" property="password" />
+    <result column="classAndGrade" jdbcType="VARCHAR" property="classandgrade" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, studentName, password, classAndGrade
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.userExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from user
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from user
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from user
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.userExample">
+    delete from user
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.user">
+    insert into user (id, studentName, password, 
+      classAndGrade)
+    values (#{id,jdbcType=INTEGER}, #{studentname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
+      #{classandgrade,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.user">
+    insert into user
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="password != null">
+        password,
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.userExample" resultType="java.lang.Integer">
+    select count(*) from user
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update user
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.password != null">
+        password = #{record.password,jdbcType=VARCHAR},
+      </if>
+      <if test="record.classandgrade != null">
+        classAndGrade = #{record.classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update user
+    set id = #{record.id,jdbcType=INTEGER},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      password = #{record.password,jdbcType=VARCHAR},
+      classAndGrade = #{record.classandgrade,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.user">
+    update user
+    <set>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="password != null">
+        password = #{password,jdbcType=VARCHAR},
+      </if>
+      <if test="classandgrade != null">
+        classAndGrade = #{classandgrade,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.user">
+    update user
+    set studentName = #{studentname,jdbcType=VARCHAR},
+      password = #{password,jdbcType=VARCHAR},
+      classAndGrade = #{classandgrade,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
 </mapper>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/service/StudentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.service;\r\n\r\nimport cn.sysu.circuitQA.pojo.Student;\r\n\r\npublic interface StudentService {\r\n    Student login(Student student);\r\n\r\n    Student regist(Student student);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/StudentService.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/StudentService.java	(date 1617718358819)
@@ -1,9 +1,7 @@
 package cn.sysu.circuitQA.service;
 
-import cn.sysu.circuitQA.pojo.Student;
-
 public interface StudentService {
-    Student login(Student student);
+    user login(user user);
 
-    Student regist(Student student);
+    user regist(user user);
 }
Index: src/main/resources/mapper/circuitQaMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.circuitQaMapper\" >\r\n  <resultMap id=\"BaseResultMap\" type=\"cn.sysu.circuitQA.pojo.circuitQa\" >\r\n    <result column=\"questionID\" property=\"questionid\" jdbcType=\"INTEGER\" />\r\n    <result column=\"question\" property=\"question\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"answer\" property=\"answer\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"childID\" property=\"childid\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"parentID\" property=\"parentid\" jdbcType=\"VARCHAR\" />\r\n  </resultMap>\r\n  <sql id=\"Example_Where_Clause\" >\r\n    <where >\r\n      <foreach collection=\"oredCriteria\" item=\"criteria\" separator=\"or\" >\r\n        <if test=\"criteria.valid\" >\r\n          <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\" >\r\n            <foreach collection=\"criteria.criteria\" item=\"criterion\" >\r\n              <choose >\r\n                <when test=\"criterion.noValue\" >\r\n                  and ${criterion.condition}\r\n                </when>\r\n                <when test=\"criterion.singleValue\" >\r\n                  and ${criterion.condition} #{criterion.value}\r\n                </when>\r\n                <when test=\"criterion.betweenValue\" >\r\n                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\r\n                </when>\r\n                <when test=\"criterion.listValue\" >\r\n                  and ${criterion.condition}\r\n                  <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\" separator=\",\" >\r\n                    #{listItem}\r\n                  </foreach>\r\n                </when>\r\n              </choose>\r\n            </foreach>\r\n          </trim>\r\n        </if>\r\n      </foreach>\r\n    </where>\r\n  </sql>\r\n  <sql id=\"Update_By_Example_Where_Clause\" >\r\n    <where >\r\n      <foreach collection=\"example.oredCriteria\" item=\"criteria\" separator=\"or\" >\r\n        <if test=\"criteria.valid\" >\r\n          <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\" >\r\n            <foreach collection=\"criteria.criteria\" item=\"criterion\" >\r\n              <choose >\r\n                <when test=\"criterion.noValue\" >\r\n                  and ${criterion.condition}\r\n                </when>\r\n                <when test=\"criterion.singleValue\" >\r\n                  and ${criterion.condition} #{criterion.value}\r\n                </when>\r\n                <when test=\"criterion.betweenValue\" >\r\n                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\r\n                </when>\r\n                <when test=\"criterion.listValue\" >\r\n                  and ${criterion.condition}\r\n                  <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\" separator=\",\" >\r\n                    #{listItem}\r\n                  </foreach>\r\n                </when>\r\n              </choose>\r\n            </foreach>\r\n          </trim>\r\n        </if>\r\n      </foreach>\r\n    </where>\r\n  </sql>\r\n  <sql id=\"Base_Column_List\" >\r\n    questionID, question, answer, childID, parentID\r\n  </sql>\r\n  <select id=\"selectByExample\" resultMap=\"BaseResultMap\" parameterType=\"cn.sysu.circuitQA.pojo.circuitQaExample\" >\r\n    select\r\n    <if test=\"distinct\" >\r\n      distinct\r\n    </if>\r\n    <include refid=\"Base_Column_List\" />\r\n    from circuitqa\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n    <if test=\"orderByClause != null\" >\r\n      order by ${orderByClause}\r\n    </if>\r\n  </select>\r\n  <delete id=\"deleteByExample\" parameterType=\"cn.sysu.circuitQA.pojo.circuitQaExample\" >\r\n    delete from circuitqa\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n  </delete>\r\n  <insert id=\"insert\" parameterType=\"cn.sysu.circuitQA.pojo.circuitQa\" >\r\n    insert into circuitqa (questionID, question, answer, \r\n      childID, parentID)\r\n    values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, \r\n      #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})\r\n  </insert>\r\n  <insert id=\"insertSelective\" parameterType=\"cn.sysu.circuitQA.pojo.circuitQa\" >\r\n    insert into circuitqa\r\n    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\" >\r\n      <if test=\"questionid != null\" >\r\n        questionID,\r\n      </if>\r\n      <if test=\"question != null\" >\r\n        question,\r\n      </if>\r\n      <if test=\"answer != null\" >\r\n        answer,\r\n      </if>\r\n      <if test=\"childid != null\" >\r\n        childID,\r\n      </if>\r\n      <if test=\"parentid != null\" >\r\n        parentID,\r\n      </if>\r\n    </trim>\r\n    <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\" >\r\n      <if test=\"questionid != null\" >\r\n        #{questionid,jdbcType=INTEGER},\r\n      </if>\r\n      <if test=\"question != null\" >\r\n        #{question,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"answer != null\" >\r\n        #{answer,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"childid != null\" >\r\n        #{childid,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"parentid != null\" >\r\n        #{parentid,jdbcType=VARCHAR},\r\n      </if>\r\n    </trim>\r\n  </insert>\r\n  <select id=\"countByExample\" parameterType=\"cn.sysu.circuitQA.pojo.circuitQaExample\" resultType=\"java.lang.Integer\" >\r\n    select count(*) from circuitqa\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n  </select>\r\n  <update id=\"updateByExampleSelective\" parameterType=\"map\" >\r\n    update circuitqa\r\n    <set >\r\n      <if test=\"record.questionid != null\" >\r\n        questionID = #{record.questionid,jdbcType=INTEGER},\r\n      </if>\r\n      <if test=\"record.question != null\" >\r\n        question = #{record.question,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"record.answer != null\" >\r\n        answer = #{record.answer,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"record.childid != null\" >\r\n        childID = #{record.childid,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"record.parentid != null\" >\r\n        parentID = #{record.parentid,jdbcType=VARCHAR},\r\n      </if>\r\n    </set>\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Update_By_Example_Where_Clause\" />\r\n    </if>\r\n  </update>\r\n  <update id=\"updateByExample\" parameterType=\"map\" >\r\n    update circuitqa\r\n    set questionID = #{record.questionid,jdbcType=INTEGER},\r\n      question = #{record.question,jdbcType=VARCHAR},\r\n      answer = #{record.answer,jdbcType=VARCHAR},\r\n      childID = #{record.childid,jdbcType=VARCHAR},\r\n      parentID = #{record.parentid,jdbcType=VARCHAR}\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Update_By_Example_Where_Clause\" />\r\n    </if>\r\n  </update>\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/mapper/circuitQaMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/circuitQaMapper.xml	(date 1617718625095)
@@ -1,32 +1,545 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.circuitQaMapper" >
-  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa" >
-    <result column="questionID" property="questionid" jdbcType="INTEGER" />
-    <result column="question" property="question" jdbcType="VARCHAR" />
-    <result column="answer" property="answer" jdbcType="VARCHAR" />
-    <result column="childID" property="childid" jdbcType="VARCHAR" />
-    <result column="parentID" property="parentid" jdbcType="VARCHAR" />
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="cn.sysu.circuitQA.mapper.circuitQaMapper">
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa">
+    <result column="questionID" jdbcType="INTEGER" property="questionid" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="childID" jdbcType="VARCHAR" property="childid" />
+    <result column="parentID" jdbcType="VARCHAR" property="parentid" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    questionID, question, answer, childID, parentID
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample">
+    delete from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa (questionID, question, answer, 
+      childID, parentID)
+    values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
+      #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        questionID,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+      <if test="childid != null">
+        childID,
+      </if>
+      <if test="parentid != null">
+        parentID,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        #{questionid,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+      <if test="childid != null">
+        #{childid,jdbcType=VARCHAR},
+      </if>
+      <if test="parentid != null">
+        #{parentid,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer">
+    select count(*) from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update circuitqa
+    <set>
+      <if test="record.questionid != null">
+        questionID = #{record.questionid,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+      <if test="record.childid != null">
+        childID = #{record.childid,jdbcType=VARCHAR},
+      </if>
+      <if test="record.parentid != null">
+        parentID = #{record.parentid,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update circuitqa
+    set questionID = #{record.questionid,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR},
+      childID = #{record.childid,jdbcType=VARCHAR},
+      parentID = #{record.parentid,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa">
+    <result column="questionID" jdbcType="INTEGER" property="questionid" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="childID" jdbcType="VARCHAR" property="childid" />
+    <result column="parentID" jdbcType="VARCHAR" property="parentid" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    questionID, question, answer, childID, parentID
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample">
+    delete from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa (questionID, question, answer, 
+      childID, parentID)
+    values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
+      #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        questionID,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+      <if test="childid != null">
+        childID,
+      </if>
+      <if test="parentid != null">
+        parentID,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        #{questionid,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+      <if test="childid != null">
+        #{childid,jdbcType=VARCHAR},
+      </if>
+      <if test="parentid != null">
+        #{parentid,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer">
+    select count(*) from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update circuitqa
+    <set>
+      <if test="record.questionid != null">
+        questionID = #{record.questionid,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+      <if test="record.childid != null">
+        childID = #{record.childid,jdbcType=VARCHAR},
+      </if>
+      <if test="record.parentid != null">
+        parentID = #{record.parentid,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update circuitqa
+    set questionID = #{record.questionid,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR},
+      childID = #{record.childid,jdbcType=VARCHAR},
+      parentID = #{record.parentid,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa">
+    <result column="questionID" jdbcType="INTEGER" property="questionid" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="childID" jdbcType="VARCHAR" property="childid" />
+    <result column="parentID" jdbcType="VARCHAR" property="parentid" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    questionID, question, answer, childID, parentID
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample">
+    delete from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa (questionID, question, answer, 
+      childID, parentID)
+    values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
+      #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        questionID,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+      <if test="childid != null">
+        childID,
+      </if>
+      <if test="parentid != null">
+        parentID,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        #{questionid,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+      <if test="childid != null">
+        #{childid,jdbcType=VARCHAR},
+      </if>
+      <if test="parentid != null">
+        #{parentid,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer">
+    select count(*) from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update circuitqa
+    <set>
+      <if test="record.questionid != null">
+        questionID = #{record.questionid,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+      <if test="record.childid != null">
+        childID = #{record.childid,jdbcType=VARCHAR},
+      </if>
+      <if test="record.parentid != null">
+        parentID = #{record.parentid,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update circuitqa
+    set questionID = #{record.questionid,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR},
+      childID = #{record.childid,jdbcType=VARCHAR},
+      parentID = #{record.parentid,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa">
+    <result column="questionID" jdbcType="INTEGER" property="questionid" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="childID" jdbcType="VARCHAR" property="childid" />
+    <result column="parentID" jdbcType="VARCHAR" property="parentid" />
   </resultMap>
-  <sql id="Example_Where_Clause" >
-    <where >
-      <foreach collection="oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
                   and ${criterion.condition}
                 </when>
-                <when test="criterion.singleValue" >
+                <when test="criterion.singleValue">
                   and ${criterion.condition} #{criterion.value}
                 </when>
-                <when test="criterion.betweenValue" >
+                <when test="criterion.betweenValue">
                   and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                 </when>
-                <when test="criterion.listValue" >
+                <when test="criterion.listValue">
                   and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                     #{listItem}
                   </foreach>
                 </when>
@@ -37,25 +550,25 @@
       </foreach>
     </where>
   </sql>
-  <sql id="Update_By_Example_Where_Clause" >
-    <where >
-      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
                   and ${criterion.condition}
                 </when>
-                <when test="criterion.singleValue" >
+                <when test="criterion.singleValue">
                   and ${criterion.condition} #{criterion.value}
                 </when>
-                <when test="criterion.betweenValue" >
+                <when test="criterion.betweenValue">
                   and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                 </when>
-                <when test="criterion.listValue" >
+                <when test="criterion.listValue">
                   and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                     #{listItem}
                   </foreach>
                 </when>
@@ -66,109 +579,451 @@
       </foreach>
     </where>
   </sql>
-  <sql id="Base_Column_List" >
+  <sql id="Base_Column_List">
     questionID, question, answer, childID, parentID
   </sql>
-  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" >
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample">
+    delete from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa (questionID, question, answer, 
+      childID, parentID)
+    values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
+      #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        questionID,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+      <if test="childid != null">
+        childID,
+      </if>
+      <if test="parentid != null">
+        parentID,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        #{questionid,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+      <if test="childid != null">
+        #{childid,jdbcType=VARCHAR},
+      </if>
+      <if test="parentid != null">
+        #{parentid,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer">
+    select count(*) from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update circuitqa
+    <set>
+      <if test="record.questionid != null">
+        questionID = #{record.questionid,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+      <if test="record.childid != null">
+        childID = #{record.childid,jdbcType=VARCHAR},
+      </if>
+      <if test="record.parentid != null">
+        parentID = #{record.parentid,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update circuitqa
+    set questionID = #{record.questionid,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR},
+      childID = #{record.childid,jdbcType=VARCHAR},
+      parentID = #{record.parentid,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa">
+    <result column="questionID" jdbcType="INTEGER" property="questionid" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="childID" jdbcType="VARCHAR" property="childid" />
+    <result column="parentID" jdbcType="VARCHAR" property="parentid" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    questionID, question, answer, childID, parentID
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample">
+    delete from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa (questionID, question, answer, 
+      childID, parentID)
+    values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
+      #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
+    insert into circuitqa
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        questionID,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+      <if test="childid != null">
+        childID,
+      </if>
+      <if test="parentid != null">
+        parentID,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
+        #{questionid,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+      <if test="childid != null">
+        #{childid,jdbcType=VARCHAR},
+      </if>
+      <if test="parentid != null">
+        #{parentid,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer">
+    select count(*) from circuitqa
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update circuitqa
+    <set>
+      <if test="record.questionid != null">
+        questionID = #{record.questionid,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+      <if test="record.childid != null">
+        childID = #{record.childid,jdbcType=VARCHAR},
+      </if>
+      <if test="record.parentid != null">
+        parentID = #{record.parentid,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update circuitqa
+    set questionID = #{record.questionid,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR},
+      childID = #{record.childid,jdbcType=VARCHAR},
+      parentID = #{record.parentid,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.circuitQa">
+    <result column="questionID" jdbcType="INTEGER" property="questionid" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+    <result column="childID" jdbcType="VARCHAR" property="childid" />
+    <result column="parentID" jdbcType="VARCHAR" property="parentid" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    questionID, question, answer, childID, parentID
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultMap="BaseResultMap">
     select
-    <if test="distinct" >
+    <if test="distinct">
       distinct
     </if>
     <include refid="Base_Column_List" />
     from circuitqa
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
-    <if test="orderByClause != null" >
+    <if test="orderByClause != null">
       order by ${orderByClause}
     </if>
   </select>
-  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" >
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample">
     delete from circuitqa
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
   </delete>
-  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa" >
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
     insert into circuitqa (questionID, question, answer, 
       childID, parentID)
     values (#{questionid,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
       #{childid,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR})
   </insert>
-  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa" >
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.circuitQa">
     insert into circuitqa
-    <trim prefix="(" suffix=")" suffixOverrides="," >
-      <if test="questionid != null" >
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
         questionID,
       </if>
-      <if test="question != null" >
+      <if test="question != null">
         question,
       </if>
-      <if test="answer != null" >
+      <if test="answer != null">
         answer,
       </if>
-      <if test="childid != null" >
+      <if test="childid != null">
         childID,
       </if>
-      <if test="parentid != null" >
+      <if test="parentid != null">
         parentID,
       </if>
     </trim>
-    <trim prefix="values (" suffix=")" suffixOverrides="," >
-      <if test="questionid != null" >
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="questionid != null">
         #{questionid,jdbcType=INTEGER},
       </if>
-      <if test="question != null" >
+      <if test="question != null">
         #{question,jdbcType=VARCHAR},
       </if>
-      <if test="answer != null" >
+      <if test="answer != null">
         #{answer,jdbcType=VARCHAR},
       </if>
-      <if test="childid != null" >
+      <if test="childid != null">
         #{childid,jdbcType=VARCHAR},
       </if>
-      <if test="parentid != null" >
+      <if test="parentid != null">
         #{parentid,jdbcType=VARCHAR},
       </if>
     </trim>
   </insert>
-  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer" >
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.circuitQaExample" resultType="java.lang.Integer">
     select count(*) from circuitqa
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
   </select>
-  <update id="updateByExampleSelective" parameterType="map" >
+  <update id="updateByExampleSelective" parameterType="map">
     update circuitqa
-    <set >
-      <if test="record.questionid != null" >
+    <set>
+      <if test="record.questionid != null">
         questionID = #{record.questionid,jdbcType=INTEGER},
       </if>
-      <if test="record.question != null" >
+      <if test="record.question != null">
         question = #{record.question,jdbcType=VARCHAR},
       </if>
-      <if test="record.answer != null" >
+      <if test="record.answer != null">
         answer = #{record.answer,jdbcType=VARCHAR},
       </if>
-      <if test="record.childid != null" >
+      <if test="record.childid != null">
         childID = #{record.childid,jdbcType=VARCHAR},
       </if>
-      <if test="record.parentid != null" >
+      <if test="record.parentid != null">
         parentID = #{record.parentid,jdbcType=VARCHAR},
       </if>
     </set>
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Update_By_Example_Where_Clause" />
     </if>
   </update>
-  <update id="updateByExample" parameterType="map" >
+  <update id="updateByExample" parameterType="map">
     update circuitqa
     set questionID = #{record.questionid,jdbcType=INTEGER},
       question = #{record.question,jdbcType=VARCHAR},
       answer = #{record.answer,jdbcType=VARCHAR},
       childID = #{record.childid,jdbcType=VARCHAR},
       parentID = #{record.parentid,jdbcType=VARCHAR}
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Update_By_Example_Where_Clause" />
     </if>
   </update>
Index: src/main/resources/mapper/keyWordMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.keyWordMapper\" >\r\n  <resultMap id=\"BaseResultMap\" type=\"cn.sysu.circuitQA.pojo.keyWord\" >\r\n    <result column=\"keyword\" property=\"keyword\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"questionIDs\" property=\"questionids\" jdbcType=\"VARCHAR\" />\r\n  </resultMap>\r\n  <sql id=\"Example_Where_Clause\" >\r\n    <where >\r\n      <foreach collection=\"oredCriteria\" item=\"criteria\" separator=\"or\" >\r\n        <if test=\"criteria.valid\" >\r\n          <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\" >\r\n            <foreach collection=\"criteria.criteria\" item=\"criterion\" >\r\n              <choose >\r\n                <when test=\"criterion.noValue\" >\r\n                  and ${criterion.condition}\r\n                </when>\r\n                <when test=\"criterion.singleValue\" >\r\n                  and ${criterion.condition} #{criterion.value}\r\n                </when>\r\n                <when test=\"criterion.betweenValue\" >\r\n                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\r\n                </when>\r\n                <when test=\"criterion.listValue\" >\r\n                  and ${criterion.condition}\r\n                  <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\" separator=\",\" >\r\n                    #{listItem}\r\n                  </foreach>\r\n                </when>\r\n              </choose>\r\n            </foreach>\r\n          </trim>\r\n        </if>\r\n      </foreach>\r\n    </where>\r\n  </sql>\r\n  <sql id=\"Update_By_Example_Where_Clause\" >\r\n    <where >\r\n      <foreach collection=\"example.oredCriteria\" item=\"criteria\" separator=\"or\" >\r\n        <if test=\"criteria.valid\" >\r\n          <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\" >\r\n            <foreach collection=\"criteria.criteria\" item=\"criterion\" >\r\n              <choose >\r\n                <when test=\"criterion.noValue\" >\r\n                  and ${criterion.condition}\r\n                </when>\r\n                <when test=\"criterion.singleValue\" >\r\n                  and ${criterion.condition} #{criterion.value}\r\n                </when>\r\n                <when test=\"criterion.betweenValue\" >\r\n                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\r\n                </when>\r\n                <when test=\"criterion.listValue\" >\r\n                  and ${criterion.condition}\r\n                  <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\" separator=\",\" >\r\n                    #{listItem}\r\n                  </foreach>\r\n                </when>\r\n              </choose>\r\n            </foreach>\r\n          </trim>\r\n        </if>\r\n      </foreach>\r\n    </where>\r\n  </sql>\r\n  <sql id=\"Base_Column_List\" >\r\n    keyword, questionIDs\r\n  </sql>\r\n  <select id=\"selectByExample\" resultMap=\"BaseResultMap\" parameterType=\"cn.sysu.circuitQA.pojo.keyWordExample\" >\r\n    select\r\n    <if test=\"distinct\" >\r\n      distinct\r\n    </if>\r\n    <include refid=\"Base_Column_List\" />\r\n    from keyword\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n    <if test=\"orderByClause != null\" >\r\n      order by ${orderByClause}\r\n    </if>\r\n  </select>\r\n  <delete id=\"deleteByExample\" parameterType=\"cn.sysu.circuitQA.pojo.keyWordExample\" >\r\n    delete from keyword\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n  </delete>\r\n  <insert id=\"insert\" parameterType=\"cn.sysu.circuitQA.pojo.keyWord\" >\r\n    insert into keyword (keyword, questionIDs)\r\n    values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})\r\n  </insert>\r\n  <insert id=\"insertSelective\" parameterType=\"cn.sysu.circuitQA.pojo.keyWord\" >\r\n    insert into keyword\r\n    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\" >\r\n      <if test=\"keyword != null\" >\r\n        keyword,\r\n      </if>\r\n      <if test=\"questionids != null\" >\r\n        questionIDs,\r\n      </if>\r\n    </trim>\r\n    <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\" >\r\n      <if test=\"keyword != null\" >\r\n        #{keyword,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"questionids != null\" >\r\n        #{questionids,jdbcType=VARCHAR},\r\n      </if>\r\n    </trim>\r\n  </insert>\r\n  <select id=\"countByExample\" parameterType=\"cn.sysu.circuitQA.pojo.keyWordExample\" resultType=\"java.lang.Integer\" >\r\n    select count(*) from keyword\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Example_Where_Clause\" />\r\n    </if>\r\n  </select>\r\n  <update id=\"updateByExampleSelective\" parameterType=\"map\" >\r\n    update keyword\r\n    <set >\r\n      <if test=\"record.keyword != null\" >\r\n        keyword = #{record.keyword,jdbcType=VARCHAR},\r\n      </if>\r\n      <if test=\"record.questionids != null\" >\r\n        questionIDs = #{record.questionids,jdbcType=VARCHAR},\r\n      </if>\r\n    </set>\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Update_By_Example_Where_Clause\" />\r\n    </if>\r\n  </update>\r\n  <update id=\"updateByExample\" parameterType=\"map\" >\r\n    update keyword\r\n    set keyword = #{record.keyword,jdbcType=VARCHAR},\r\n      questionIDs = #{record.questionids,jdbcType=VARCHAR}\r\n    <if test=\"_parameter != null\" >\r\n      <include refid=\"Update_By_Example_Where_Clause\" />\r\n    </if>\r\n  </update>\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/mapper/keyWordMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/keyWordMapper.xml	(date 1617718625108)
@@ -1,29 +1,165 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.keyWordMapper" >
-  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord" >
-    <result column="keyword" property="keyword" jdbcType="VARCHAR" />
-    <result column="questionIDs" property="questionids" jdbcType="VARCHAR" />
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="cn.sysu.circuitQA.mapper.keyWordMapper">
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord">
+    <result column="keyword" jdbcType="VARCHAR" property="keyword" />
+    <result column="questionIDs" jdbcType="VARCHAR" property="questionids" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    keyword, questionIDs
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample">
+    delete from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword (keyword, questionIDs)
+    values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        keyword,
+      </if>
+      <if test="questionids != null">
+        questionIDs,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        #{keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="questionids != null">
+        #{questionids,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer">
+    select count(*) from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update keyword
+    <set>
+      <if test="record.keyword != null">
+        keyword = #{record.keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="record.questionids != null">
+        questionIDs = #{record.questionids,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update keyword
+    set keyword = #{record.keyword,jdbcType=VARCHAR},
+      questionIDs = #{record.questionids,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord">
+    <result column="keyword" jdbcType="VARCHAR" property="keyword" />
+    <result column="questionIDs" jdbcType="VARCHAR" property="questionids" />
   </resultMap>
-  <sql id="Example_Where_Clause" >
-    <where >
-      <foreach collection="oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
                   and ${criterion.condition}
                 </when>
-                <when test="criterion.singleValue" >
+                <when test="criterion.singleValue">
                   and ${criterion.condition} #{criterion.value}
                 </when>
-                <when test="criterion.betweenValue" >
+                <when test="criterion.betweenValue">
                   and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                 </when>
-                <when test="criterion.listValue" >
+                <when test="criterion.listValue">
                   and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                     #{listItem}
                   </foreach>
                 </when>
@@ -34,25 +170,25 @@
       </foreach>
     </where>
   </sql>
-  <sql id="Update_By_Example_Where_Clause" >
-    <where >
-      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
                   and ${criterion.condition}
                 </when>
-                <when test="criterion.singleValue" >
+                <when test="criterion.singleValue">
                   and ${criterion.condition} #{criterion.value}
                 </when>
-                <when test="criterion.betweenValue" >
+                <when test="criterion.betweenValue">
                   and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                 </when>
-                <when test="criterion.listValue" >
+                <when test="criterion.listValue">
                   and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                     #{listItem}
                   </foreach>
                 </when>
@@ -63,77 +199,621 @@
       </foreach>
     </where>
   </sql>
-  <sql id="Base_Column_List" >
+  <sql id="Base_Column_List">
     keyword, questionIDs
   </sql>
-  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" >
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample">
+    delete from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword (keyword, questionIDs)
+    values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        keyword,
+      </if>
+      <if test="questionids != null">
+        questionIDs,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        #{keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="questionids != null">
+        #{questionids,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer">
+    select count(*) from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update keyword
+    <set>
+      <if test="record.keyword != null">
+        keyword = #{record.keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="record.questionids != null">
+        questionIDs = #{record.questionids,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update keyword
+    set keyword = #{record.keyword,jdbcType=VARCHAR},
+      questionIDs = #{record.questionids,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord">
+    <result column="keyword" jdbcType="VARCHAR" property="keyword" />
+    <result column="questionIDs" jdbcType="VARCHAR" property="questionids" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    keyword, questionIDs
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample">
+    delete from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword (keyword, questionIDs)
+    values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        keyword,
+      </if>
+      <if test="questionids != null">
+        questionIDs,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        #{keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="questionids != null">
+        #{questionids,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer">
+    select count(*) from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update keyword
+    <set>
+      <if test="record.keyword != null">
+        keyword = #{record.keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="record.questionids != null">
+        questionIDs = #{record.questionids,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update keyword
+    set keyword = #{record.keyword,jdbcType=VARCHAR},
+      questionIDs = #{record.questionids,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord">
+    <result column="keyword" jdbcType="VARCHAR" property="keyword" />
+    <result column="questionIDs" jdbcType="VARCHAR" property="questionids" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    keyword, questionIDs
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample">
+    delete from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword (keyword, questionIDs)
+    values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        keyword,
+      </if>
+      <if test="questionids != null">
+        questionIDs,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        #{keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="questionids != null">
+        #{questionids,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer">
+    select count(*) from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update keyword
+    <set>
+      <if test="record.keyword != null">
+        keyword = #{record.keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="record.questionids != null">
+        questionIDs = #{record.questionids,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update keyword
+    set keyword = #{record.keyword,jdbcType=VARCHAR},
+      questionIDs = #{record.questionids,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord">
+    <result column="keyword" jdbcType="VARCHAR" property="keyword" />
+    <result column="questionIDs" jdbcType="VARCHAR" property="questionids" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    keyword, questionIDs
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample">
+    delete from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword (keyword, questionIDs)
+    values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord">
+    insert into keyword
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        keyword,
+      </if>
+      <if test="questionids != null">
+        questionIDs,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
+        #{keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="questionids != null">
+        #{questionids,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer">
+    select count(*) from keyword
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update keyword
+    <set>
+      <if test="record.keyword != null">
+        keyword = #{record.keyword,jdbcType=VARCHAR},
+      </if>
+      <if test="record.questionids != null">
+        questionIDs = #{record.questionids,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update keyword
+    set keyword = #{record.keyword,jdbcType=VARCHAR},
+      questionIDs = #{record.questionids,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.keyWord">
+    <result column="keyword" jdbcType="VARCHAR" property="keyword" />
+    <result column="questionIDs" jdbcType="VARCHAR" property="questionids" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    keyword, questionIDs
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultMap="BaseResultMap">
     select
-    <if test="distinct" >
+    <if test="distinct">
       distinct
     </if>
     <include refid="Base_Column_List" />
     from keyword
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
-    <if test="orderByClause != null" >
+    <if test="orderByClause != null">
       order by ${orderByClause}
     </if>
   </select>
-  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" >
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample">
     delete from keyword
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
   </delete>
-  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord" >
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.keyWord">
     insert into keyword (keyword, questionIDs)
     values (#{keyword,jdbcType=VARCHAR}, #{questionids,jdbcType=VARCHAR})
   </insert>
-  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord" >
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.keyWord">
     insert into keyword
-    <trim prefix="(" suffix=")" suffixOverrides="," >
-      <if test="keyword != null" >
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
         keyword,
       </if>
-      <if test="questionids != null" >
+      <if test="questionids != null">
         questionIDs,
       </if>
     </trim>
-    <trim prefix="values (" suffix=")" suffixOverrides="," >
-      <if test="keyword != null" >
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="keyword != null">
         #{keyword,jdbcType=VARCHAR},
       </if>
-      <if test="questionids != null" >
+      <if test="questionids != null">
         #{questionids,jdbcType=VARCHAR},
       </if>
     </trim>
   </insert>
-  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer" >
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.keyWordExample" resultType="java.lang.Integer">
     select count(*) from keyword
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Example_Where_Clause" />
     </if>
   </select>
-  <update id="updateByExampleSelective" parameterType="map" >
+  <update id="updateByExampleSelective" parameterType="map">
     update keyword
-    <set >
-      <if test="record.keyword != null" >
+    <set>
+      <if test="record.keyword != null">
         keyword = #{record.keyword,jdbcType=VARCHAR},
       </if>
-      <if test="record.questionids != null" >
+      <if test="record.questionids != null">
         questionIDs = #{record.questionids,jdbcType=VARCHAR},
       </if>
     </set>
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Update_By_Example_Where_Clause" />
     </if>
   </update>
-  <update id="updateByExample" parameterType="map" >
+  <update id="updateByExample" parameterType="map">
     update keyword
     set keyword = #{record.keyword,jdbcType=VARCHAR},
       questionIDs = #{record.questionids,jdbcType=VARCHAR}
-    <if test="_parameter != null" >
+    <if test="_parameter != null">
       <include refid="Update_By_Example_Where_Clause" />
     </if>
   </update>
Index: .idea/libraries/Maven__org_projectlombok_lombok_1_18_18.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\r\n  <library name=\"Maven: org.projectlombok:lombok:1.18.18\">\r\n    <CLASSES>\r\n      <root url=\"jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.18/lombok-1.18.18.jar!/\" />\r\n    </CLASSES>\r\n    <JAVADOC>\r\n      <root url=\"jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.18/lombok-1.18.18-javadoc.jar!/\" />\r\n    </JAVADOC>\r\n    <SOURCES>\r\n      <root url=\"jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.18/lombok-1.18.18-sources.jar!/\" />\r\n    </SOURCES>\r\n  </library>\r\n</component>
===================================================================
--- .idea/libraries/Maven__org_projectlombok_lombok_1_18_18.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ .idea/libraries/Maven__org_projectlombok_lombok_1_16_20.xml	(date 1617676301520)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.projectlombok:lombok:1.18.18">
+  <library name="Maven: org.projectlombok:lombok:1.16.20">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.18/lombok-1.18.18.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.20/lombok-1.16.20.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.18/lombok-1.18.18-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.20/lombok-1.16.20-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.18/lombok-1.18.18-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.20/lombok-1.16.20-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/userMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/userMapper.java	(date 1617718358827)
+++ src/main/java/cn/sysu/circuitQA/mapper/userMapper.java	(date 1617718358827)
@@ -0,0 +1,28 @@
+package cn.sysu.circuitQA.mapper;
+
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface userMapper {
+    int countByExample(userExample example);
+
+    int deleteByExample(userExample example);
+
+    int deleteByPrimaryKey(Integer id);
+
+    int insert(user record);
+
+    int insertSelective(user record);
+
+    List<user> selectByExample(userExample example);
+
+    user selectByPrimaryKey(Integer id);
+
+    int updateByExampleSelective(@Param("record") user record, @Param("example") userExample example);
+
+    int updateByExample(@Param("record") user record, @Param("example") userExample example);
+
+    int updateByPrimaryKeySelective(user record);
+
+    int updateByPrimaryKey(user record);
+}
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/mapper/StudentMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.Student;\r\n\r\n\r\npublic interface StudentMapper {\r\n     Student findById(Long id);\r\n     String findPswById(Long id);\r\n     void save(Student student);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/StudentMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/StudentMapper.java	(date 1617718625133)
@@ -1,10 +1,30 @@
 package cn.sysu.circuitQA.mapper;
 
 import cn.sysu.circuitQA.pojo.Student;
-
+import cn.sysu.circuitQA.pojo.StudentExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
 
 public interface StudentMapper {
-     Student findById(Long id);
-     String findPswById(Long id);
-     void save(Student student);
-}
+    int countByExample(StudentExample example);
+
+    int deleteByExample(StudentExample example);
+
+    int deleteByPrimaryKey(Integer id);
+
+    int insert(Student record);
+
+    int insertSelective(Student record);
+
+    List<Student> selectByExample(StudentExample example);
+
+    Student selectByPrimaryKey(Integer id);
+
+    int updateByExampleSelective(@Param("record") Student record, @Param("example") StudentExample example);
+
+    int updateByExample(@Param("record") Student record, @Param("example") StudentExample example);
+
+    int updateByPrimaryKeySelective(Student record);
+
+    int updateByPrimaryKey(Student record);
+}
\ No newline at end of file
Index: src/main/resources/mapper/recordMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.RecordMapper\" >\r\n    <select id=\"findAll\" resultType=\"cn.sysu.circuitQA.pojo.Record\">select * from record</select>\r\n    <select id=\"save\">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>\r\n    <select id=\"getAllQuestion\" resultType=\"java.lang.String\">SELECT question FROM record</select>\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/mapper/recordMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/resources/mapper/recordMapper.xml	(date 1617718625127)
@@ -1,7 +1,1438 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.RecordMapper" >
-    <select id="findAll" resultType="cn.sysu.circuitQA.pojo.Record">select * from record</select>
-    <select id="save">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>
-    <select id="getAllQuestion" resultType="java.lang.String">SELECT question FROM record</select>
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="cn.sysu.circuitQA.mapper.RecordMapper">
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.Record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.RecordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.Record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.record">
+    <id column="id" jdbcType="INTEGER" property="id" />
+    <result column="question" jdbcType="VARCHAR" property="question" />
+    <result column="time" jdbcType="TIMESTAMP" property="time" />
+    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
+    <result column="studentid" jdbcType="INTEGER" property="studentid" />
+    <result column="query" jdbcType="VARCHAR" property="query" />
+    <result column="answer" jdbcType="VARCHAR" property="answer" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample">
+    delete from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.record">
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.record">
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        id,
+      </if>
+      <if test="question != null">
+        question,
+      </if>
+      <if test="time != null">
+        time,
+      </if>
+      <if test="studentname != null">
+        studentName,
+      </if>
+      <if test="studentid != null">
+        studentid,
+      </if>
+      <if test="query != null">
+        query,
+      </if>
+      <if test="answer != null">
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="id != null">
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null">
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultType="java.lang.Integer">
+    select count(*) from record
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update record
+    <set>
+      <if test="record.id != null">
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null">
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null">
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null">
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null">
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null">
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null">
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.record">
+    update record
+    <set>
+      <if test="question != null">
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null">
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null">
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null">
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null">
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null">
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.record">
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
 </mapper>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/controller/getRecordByDate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.controller;\r\n\r\nimport cn.sysu.circuitQA.mapper.RecordMapper;\r\nimport cn.sysu.circuitQA.pojo.Record;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\nimport java.util.List;\r\n\r\n@Controller\r\npublic class getRecordByDate {\r\n\r\n    @Autowired\r\n    RecordMapper recordMapper;\r\n\r\n    @RequestMapping(\"/record\")\r\n    public String record(Model model){\r\n        List<Record> records =recordMapper.findAll();\r\n        model.addAttribute(\"records\",records);\r\n        return \"recordStudent\";\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/controller/getRecordByDate.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/controller/getRecordByDate.java	(date 1617676054146)
@@ -1,6 +1,5 @@
 package cn.sysu.circuitQA.controller;
 
-import cn.sysu.circuitQA.mapper.RecordMapper;
 import cn.sysu.circuitQA.pojo.Record;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
Index: src/main/java/cn/sysu/circuitQA/controller/QuestionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.controller;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport cn.sysu.circuitQA.service.CoreProcessService;\r\nimport cn.sysu.circuitQA.service.MessageService;\r\nimport cn.sysu.circuitQA.service.RecordService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\n@RestController\r\n@RequestMapping(\"/qa\")\r\npublic class QuestionController {\r\n    @Autowired\r\n    private CoreProcessService coreProcess;\r\n\r\n    @Autowired\r\n    private MessageService MessageService;\r\n\r\n    @Autowired\r\n    private RecordService RecordService;\r\n\r\n    @RequestMapping(\"/query\")\r\n    public String query(@RequestParam(value = \"question\") String query) throws Exception {\r\n        circuitQa target =  coreProcess.analysis(query);\r\n        if (target == null) {\r\n            RecordService.addRecord(query, \"\", \"\", \"0\");\r\n            return \"没有收录你的问题o(╯□╰)o\";\r\n        }\r\n        RecordService.addRecord(query, target.getQuestion(), target.getAnswer(), \"1\");\r\n        return target.getAnswer();\r\n    }\r\n\r\n    @RequestMapping(\"/subQuery\")\r\n    public String subQuery(@RequestParam(value = \"question\") String question) throws Exception {\r\n        String questions = coreProcess.subQuery(question);\r\n        if (questions.equals(\"\")) {return \"\";}\r\n        return questions;\r\n    }\r\n\r\n    @RequestMapping(\"/getAnswerByOrder\")\r\n    public String getAnswerByOrder(@RequestParam(value = \"order\") String order, @RequestParam(value = \"questions\") String questions ) throws Exception {\r\n        String target =  coreProcess.getAnswerByOrder(order, questions);\r\n        return target;\r\n    }\r\n\r\n    @RequestMapping(\"/addMessage\")\r\n    public void addMessage(@RequestParam(value = \"message\") String message) throws Exception {\r\n        Date now = new Date();\r\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\r\n        String nowDate = format.format(now);\r\n        MessageService.addMessage(message, nowDate);\r\n    }\r\n\r\n    @RequestMapping(\"/getRecordByDate\")\r\n    public String getRecordByDate(@RequestParam(value = \"fromdate\") String date) throws Exception {\r\n        Date now = new Date();\r\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\r\n        String nowDate = format.format(now);\r\n        if (date.length() != 8 || Integer.parseInt(date) > Integer.parseInt(nowDate)){\r\n            return \"请输入正确的日期\";\r\n        }\r\n        return RecordService.findRecord(date);\r\n    }\r\n\r\n//    @RequestMapping(\"/upload\")\r\n//    public String uploadFile(MultipartFile mFile) throws IOException {\r\n//        String fileName = mFile.getOriginalFilename();\r\n//        fileName = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date()) + \"_\" + fileName;\r\n//        String path = \"C:\\\\fileUpload\\\\\" + fileName;\r\n//        File dest = new File(path);\r\n//\r\n//        if (!dest.getParentFile().exists()) {\r\n//            dest.getParentFile().mkdir();\r\n//        }\r\n//        try {\r\n//\r\n//            mFile.transferTo(dest); //保存文件\r\n//        } catch (IOException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//        return \"留言\";\r\n//    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/controller/QuestionController.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/controller/QuestionController.java	(date 1617676054162)
@@ -1,6 +1,5 @@
 package cn.sysu.circuitQA.controller;
 
-import cn.sysu.circuitQA.pojo.circuitQa;
 import cn.sysu.circuitQA.service.CoreProcessService;
 import cn.sysu.circuitQA.service.MessageService;
 import cn.sysu.circuitQA.service.RecordService;
Index: src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.utils;\r\n\r\nimport cn.sysu.circuitQA.gRPCclient.matchClient;\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport com.hankcs.hanlp.mining.word2vec.DocVectorModel;\r\nimport com.hankcs.hanlp.mining.word2vec.WordVectorModel;\r\nimport io.grpc.ManagedChannel;\r\nimport io.grpc.ManagedChannelBuilder;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class MatchUtil {\r\n    public static circuitQa matchByRPC(List<circuitQa> candidates, String query) throws InterruptedException {\r\n        String[] sents = new String[candidates.size()];\r\n        for (int i = 0; i < candidates.size(); i++) {\r\n            sents[i] = candidates.get(i).getQuestion();\r\n        }\r\n        String target = \"211.66.138.157:50051\";\r\n        ManagedChannel channel = ManagedChannelBuilder.forTarget(target)\r\n                .usePlaintext()\r\n                .build();\r\n        try {\r\n            matchClient client = new matchClient(channel);\r\n            int index = client.match(sents, query);\r\n            return candidates.get(index);\r\n        } finally {\r\n            channel.shutdownNow().awaitTermination(10, TimeUnit.SECONDS);\r\n        }\r\n    }\r\n\r\n    public static circuitQa match2(List<circuitQa> candidates, String query) throws IOException {\r\n        DocVectorModel docVectorModel = new DocVectorModel(new WordVectorModel(\"C:/hanLP/data/polyglot-zh.txt\"));\r\n        float score = -2;\r\n        circuitQa target = null;\r\n        for (circuitQa candidate : candidates){\r\n            float cur = docVectorModel.similarity(candidate.getQuestion(), query);\r\n            if (cur > score) {\r\n                score = cur;\r\n                target = candidate;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    public static circuitQa match1(List<circuitQa> candidates, String query) {\r\n        circuitQa target = candidates.get(0);\r\n        float similarity = levenshtein(query, target.getQuestion());\r\n        for (circuitQa candidate : candidates) {\r\n            float new_similarity = levenshtein(query, candidate.getQuestion());\r\n            if (new_similarity > similarity) {\r\n                target = candidate;\r\n                similarity = new_similarity;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    private static float levenshtein(String str1, String str2) {\r\n        int len1 = str1.length();\r\n        int len2 = str2.length();\r\n        int[][] dif = new int[len1 + 1][len2 + 1];\r\n        for (int a = 0; a <= len1; a++) {\r\n            dif[a][0] = a;\r\n        }\r\n        for (int a = 0; a <= len2; a++) {\r\n            dif[0][a] = a;\r\n        }\r\n        int temp;\r\n        for (int i = 1; i <= len1; i++) {\r\n            for (int j = 1; j <= len2; j++) {\r\n                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {\r\n                    temp = 0;\r\n                } else {\r\n                    temp = 1;\r\n                }\r\n                dif[i][j] = min(dif[i - 1][j - 1] + temp, dif[i][j - 1] + 1,\r\n                        dif[i - 1][j] + 1);\r\n            }\r\n        }\r\n        float similarity =1 - (float) dif[len1][len2] / Math.max(str1.length(), str2.length());\r\n        return similarity;\r\n    }\r\n    private static int min(int... is) {\r\n        int min = Integer.MAX_VALUE;\r\n        for (int i : is) {\r\n            if (min > i) {\r\n                min = i;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/utils/MatchUtil.java	(date 1617676054334)
@@ -1,7 +1,6 @@
 package cn.sysu.circuitQA.utils;
 
 import cn.sysu.circuitQA.gRPCclient.matchClient;
-import cn.sysu.circuitQA.pojo.circuitQa;
 import com.hankcs.hanlp.mining.word2vec.DocVectorModel;
 import com.hankcs.hanlp.mining.word2vec.WordVectorModel;
 import io.grpc.ManagedChannel;
Index: src/main/java/cn/sysu/circuitQA/controller/PageIndexController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.controller;\r\n\r\n\r\nimport cn.sysu.circuitQA.mapper.StudentMapper;\r\nimport cn.sysu.circuitQA.pojo.Student;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n\r\n@Controller\r\npublic class PageIndexController {\r\n\r\n    @Autowired\r\n    StudentMapper studentMapper;\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index(HttpServletRequest request) {\r\n        Cookie[] cookies = request.getCookies();\r\n        for (Cookie cookie : cookies) {\r\n            // equals和==有区别 “==”比较的是两个引用的对象是否相等，而equals()方法比较的是两个对象的实际内容\r\n            if (cookie.getName().equals(\"studentId\")) {\r\n                long studentId = Integer.parseInt(cookie.getValue());\r\n                Student student = studentMapper.findById(studentId);\r\n                if (student != null){\r\n                    // 写到session中\r\n                    request.getSession().setAttribute(\"studentName\",student.getStudentName());\r\n                }\r\n                break;\r\n            }\r\n\r\n        }\r\n        return \"main\";}\r\n\r\n    @RequestMapping(\"/systemQA\")\r\n    public String systemQA() {return \"index\";}\r\n\r\n    @RequestMapping(\"/student/login\")\r\n    public String login() {\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/student/regist\")\r\n    public String regist() {\r\n        return \"regist\";\r\n    }\r\n\r\n    public String index() {return \"index\";}\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/controller/PageIndexController.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/controller/PageIndexController.java	(date 1617676053912)
@@ -1,15 +1,12 @@
 package cn.sysu.circuitQA.controller;
 
 
-import cn.sysu.circuitQA.mapper.StudentMapper;
-import cn.sysu.circuitQA.pojo.Student;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 
 
 @Controller
Index: src/test/java/cn/sysu/circuitQA/KeyWordServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA;\r\n\r\nimport cn.sysu.circuitQA.pojo.keyWord;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\n\r\nimport java.util.List;\r\n\r\n@SpringBootTest\r\n@RunWith(SpringRunner.class)\r\npublic class KeyWordServiceTest {\r\n    @Autowired\r\n    private cn.sysu.circuitQA.service.KeyWordService keyWordService;\r\n\r\n    @Test\r\n    public void getIDByKeyWordTest(){\r\n        System.out.println(keyWordService.getIDByKeyWord(\"过渡过程\"));\r\n    }\r\n    @Test\r\n    public void importKeyWordsTest(){\r\n        List<keyWord> keyWords = keyWordService.importKeyWords();\r\n        System.out.println(keyWords.get(0));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/cn/sysu/circuitQA/KeyWordServiceTest.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/test/java/cn/sysu/circuitQA/KeyWordServiceTest.java	(date 1617676054224)
@@ -1,6 +1,5 @@
 package cn.sysu.circuitQA;
 
-import cn.sysu.circuitQA.pojo.keyWord;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
Index: src/test/java/cn/sysu/circuitQA/ProcessServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport cn.sysu.circuitQA.service.CoreProcessService;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\n@SpringBootTest\r\n@RunWith(SpringRunner.class)\r\npublic class ProcessServiceTest {\r\n    @Autowired\r\n    private CoreProcessService coreProcessService;\r\n\r\n    @Autowired\r\n    private cn.sysu.circuitQA.service.CircuitQAService CircuitQAService;\r\n\r\n    @Test\r\n    public void extractCandidatesTest() {\r\n        List<circuitQa> candidates = coreProcessService.extractCandidates(\"如何理解电流、电压、功率的正负？\");\r\n        if (candidates.size() == 0) {\r\n            System.out.println(\"没有候选问题\");\r\n        }\r\n        System.out.println(candidates.get(0));\r\n        System.out.println(candidates.get(1));\r\n    }\r\n\r\n    @Test\r\n    public void subQueryTest() throws IOException, InterruptedException {\r\n        System.out.println(coreProcessService.subQuery(\"电导和电阻表示元件的什么特性？\"));}\r\n    @Test\r\n    public void getTest() {\r\n        System.out.println(coreProcessService.getAnswerByOrder(\"2\", \"RL一阶电路的阶跃响应（t=0时接入电源），流过电感的电流如何变化？.二阶电路在单位阶跃响应中曲线变化情况是怎样的？.处理RC电路、RL电路阶跃响应的关键\"));\r\n    }\r\n    @Test\r\n    public void orderTest() throws IOException, InterruptedException {\r\n        System.out.println(coreProcessService.getAnswerByOrder(\"0\", coreProcessService.subQuery(\"什么是阶跃响应\")));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/cn/sysu/circuitQA/ProcessServiceTest.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/test/java/cn/sysu/circuitQA/ProcessServiceTest.java	(date 1617676054287)
@@ -1,6 +1,5 @@
 package cn.sysu.circuitQA;
 
-import cn.sysu.circuitQA.pojo.circuitQa;
 import cn.sysu.circuitQA.service.CoreProcessService;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.Record;\r\nimport org.apache.ibatis.annotations.Mapper;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport java.util.List;\r\n\r\n\r\npublic interface RecordMapper {\r\n    List<Record> findAll();\r\n    void save(Record record);\r\n    String getAllQuestion();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/recordMapper.java	(date 1617718625135)
@@ -1,14 +1,30 @@
 package cn.sysu.circuitQA.mapper;
 
 import cn.sysu.circuitQA.pojo.Record;
-import org.apache.ibatis.annotations.Mapper;
-import org.apache.ibatis.annotations.Select;
-
+import cn.sysu.circuitQA.pojo.RecordExample;
 import java.util.List;
-
+import org.apache.ibatis.annotations.Param;
 
 public interface RecordMapper {
-    List<Record> findAll();
-    void save(Record record);
-    String getAllQuestion();
-}
+    int countByExample(RecordExample example);
+
+    int deleteByExample(RecordExample example);
+
+    int deleteByPrimaryKey(Integer id);
+
+    int insert(Record record);
+
+    int insertSelective(Record record);
+
+    List<Record> selectByExample(RecordExample example);
+
+    Record selectByPrimaryKey(Integer id);
+
+    int updateByExampleSelective(@Param("record") Record record, @Param("example") RecordExample example);
+
+    int updateByExample(@Param("record") Record record, @Param("example") RecordExample example);
+
+    int updateByPrimaryKeySelective(Record record);
+
+    int updateByPrimaryKey(Record record);
+}
\ No newline at end of file
Index: target/classes/mapper/RecordMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"cn.sysu.circuitQA.mapper.RecordMapper\" >\r\n    <select id=\"findAll\" resultType=\"cn.sysu.circuitQA.pojo.Record\">select * from record</select>\r\n    <select id=\"save\">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>\r\n    <select id=\"getAllQuestion\" resultType=\"java.lang.String\">SELECT question FROM record</select>\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/mapper/RecordMapper.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ target/classes/mapper/RecordMapper.xml	(date 1617693859344)
@@ -1,7 +1,243 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="cn.sysu.circuitQA.mapper.RecordMapper" >
-    <select id="findAll" resultType="cn.sysu.circuitQA.pojo.Record">select * from record</select>
-    <select id="save">insert into record(id,question,time,studentName,studentid) values(#{id},#{question},#{time},#{studentName},#{studentid}) </select>
-    <select id="getAllQuestion" resultType="java.lang.String">SELECT question FROM record</select>
+<mapper namespace="cn.sysu.circuitQA.mapper.recordMapper" >
+  <resultMap id="BaseResultMap" type="cn.sysu.circuitQA.pojo.record" >
+    <id column="id" property="id" jdbcType="INTEGER" />
+    <result column="question" property="question" jdbcType="VARCHAR" />
+    <result column="time" property="time" jdbcType="TIMESTAMP" />
+    <result column="studentName" property="studentname" jdbcType="VARCHAR" />
+    <result column="studentid" property="studentid" jdbcType="INTEGER" />
+    <result column="query" property="query" jdbcType="VARCHAR" />
+    <result column="answer" property="answer" jdbcType="VARCHAR" />
+  </resultMap>
+  <sql id="Example_Where_Clause" >
+    <where >
+      <foreach collection="oredCriteria" item="criteria" separator="or" >
+        <if test="criteria.valid" >
+          <trim prefix="(" suffix=")" prefixOverrides="and" >
+            <foreach collection="criteria.criteria" item="criterion" >
+              <choose >
+                <when test="criterion.noValue" >
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue" >
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue" >
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue" >
+                  and ${criterion.condition}
+                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause" >
+    <where >
+      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
+        <if test="criteria.valid" >
+          <trim prefix="(" suffix=")" prefixOverrides="and" >
+            <foreach collection="criteria.criteria" item="criterion" >
+              <choose >
+                <when test="criterion.noValue" >
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue" >
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue" >
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue" >
+                  and ${criterion.condition}
+                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List" >
+    id, question, time, studentName, studentid, query, answer
+  </sql>
+  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.sysu.circuitQA.pojo.recordExample" >
+    select
+    <if test="distinct" >
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from record
+    <if test="_parameter != null" >
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null" >
+      order by ${orderByClause}
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
+    select 
+    <include refid="Base_Column_List" />
+    from record
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
+    delete from record
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" >
+    delete from record
+    <if test="_parameter != null" >
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="cn.sysu.circuitQA.pojo.record" >
+    insert into record (id, question, time, 
+      studentName, studentid, query, 
+      answer)
+    values (#{id,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
+      #{studentname,jdbcType=VARCHAR}, #{studentid,jdbcType=INTEGER}, #{query,jdbcType=VARCHAR}, 
+      #{answer,jdbcType=VARCHAR})
+  </insert>
+  <insert id="insertSelective" parameterType="cn.sysu.circuitQA.pojo.record" >
+    insert into record
+    <trim prefix="(" suffix=")" suffixOverrides="," >
+      <if test="id != null" >
+        id,
+      </if>
+      <if test="question != null" >
+        question,
+      </if>
+      <if test="time != null" >
+        time,
+      </if>
+      <if test="studentname != null" >
+        studentName,
+      </if>
+      <if test="studentid != null" >
+        studentid,
+      </if>
+      <if test="query != null" >
+        query,
+      </if>
+      <if test="answer != null" >
+        answer,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides="," >
+      <if test="id != null" >
+        #{id,jdbcType=INTEGER},
+      </if>
+      <if test="question != null" >
+        #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null" >
+        #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null" >
+        #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null" >
+        #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null" >
+        #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null" >
+        #{answer,jdbcType=VARCHAR},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="cn.sysu.circuitQA.pojo.recordExample" resultType="java.lang.Integer" >
+    select count(*) from record
+    <if test="_parameter != null" >
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map" >
+    update record
+    <set >
+      <if test="record.id != null" >
+        id = #{record.id,jdbcType=INTEGER},
+      </if>
+      <if test="record.question != null" >
+        question = #{record.question,jdbcType=VARCHAR},
+      </if>
+      <if test="record.time != null" >
+        time = #{record.time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="record.studentname != null" >
+        studentName = #{record.studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="record.studentid != null" >
+        studentid = #{record.studentid,jdbcType=INTEGER},
+      </if>
+      <if test="record.query != null" >
+        query = #{record.query,jdbcType=VARCHAR},
+      </if>
+      <if test="record.answer != null" >
+        answer = #{record.answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    <if test="_parameter != null" >
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map" >
+    update record
+    set id = #{record.id,jdbcType=INTEGER},
+      question = #{record.question,jdbcType=VARCHAR},
+      time = #{record.time,jdbcType=TIMESTAMP},
+      studentName = #{record.studentname,jdbcType=VARCHAR},
+      studentid = #{record.studentid,jdbcType=INTEGER},
+      query = #{record.query,jdbcType=VARCHAR},
+      answer = #{record.answer,jdbcType=VARCHAR}
+    <if test="_parameter != null" >
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="cn.sysu.circuitQA.pojo.record" >
+    update record
+    <set >
+      <if test="question != null" >
+        question = #{question,jdbcType=VARCHAR},
+      </if>
+      <if test="time != null" >
+        time = #{time,jdbcType=TIMESTAMP},
+      </if>
+      <if test="studentname != null" >
+        studentName = #{studentname,jdbcType=VARCHAR},
+      </if>
+      <if test="studentid != null" >
+        studentid = #{studentid,jdbcType=INTEGER},
+      </if>
+      <if test="query != null" >
+        query = #{query,jdbcType=VARCHAR},
+      </if>
+      <if test="answer != null" >
+        answer = #{answer,jdbcType=VARCHAR},
+      </if>
+    </set>
+    where id = #{id,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="cn.sysu.circuitQA.pojo.record" >
+    update record
+    set question = #{question,jdbcType=VARCHAR},
+      time = #{time,jdbcType=TIMESTAMP},
+      studentName = #{studentname,jdbcType=VARCHAR},
+      studentid = #{studentid,jdbcType=INTEGER},
+      query = #{query,jdbcType=VARCHAR},
+      answer = #{answer,jdbcType=VARCHAR}
+    where id = #{id,jdbcType=INTEGER}
+  </update>
 </mapper>
\ No newline at end of file
Index: .idea/artifacts/circuitQA_war_exploded.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ArtifactManager\">\r\n  <artifact type=\"exploded-war\" name=\"circuitQA:war exploded\">\r\n    <output-path>$PROJECT_DIR$/target/circuitQA-0.0.1-SNAPSHOT</output-path>\r\n    <properties id=\"maven-jee-properties\">\r\n      <options>\r\n        <exploded>true</exploded>\r\n        <module>circuitQA</module>\r\n        <packaging>war</packaging>\r\n      </options>\r\n    </properties>\r\n    <root id=\"root\">\r\n      <element id=\"directory\" name=\"WEB-INF\">\r\n        <element id=\"directory\" name=\"classes\">\r\n          <element id=\"module-output\" name=\"circuitQA\" />\r\n        </element>\r\n        <element id=\"directory\" name=\"lib\">\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-starter-web:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-starter:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-autoconfigure:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-starter-logging:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: ch.qos.logback:logback-classic:1.1.11\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: ch.qos.logback:logback-core:1.1.11\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.slf4j:jcl-over-slf4j:1.7.25\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.slf4j:jul-to-slf4j:1.7.25\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.slf4j:log4j-over-slf4j:1.7.25\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.yaml:snakeyaml:1.17\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-starter-tomcat:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-core:8.5.27\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.apache.tomcat:tomcat-annotations-api:8.5.27\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-el:8.5.27\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-websocket:8.5.27\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.hibernate:hibernate-validator:5.3.6.Final\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: javax.validation:validation-api:1.1.0.Final\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.jboss.logging:jboss-logging:3.3.1.Final\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.fasterxml:classmate:1.3.4\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.fasterxml.jackson.core:jackson-databind:2.8.10\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.fasterxml.jackson.core:jackson-annotations:2.8.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.fasterxml.jackson.core:jackson-core:2.8.10\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-web:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-aop:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-beans:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-context:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-webmvc:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-expression:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: mysql:mysql-connector-java:5.1.45\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-starter-thymeleaf:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.thymeleaf:thymeleaf-spring4:2.1.6.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.thymeleaf:thymeleaf:2.1.6.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: ognl:ognl:3.0.8\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.javassist:javassist:3.21.0-GA\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.unbescape:unbescape:1.1.0.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.slf4j:slf4j-api:1.7.25\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.4.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.codehaus.groovy:groovy:2.4.13\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-core:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:1.1.1\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.mybatis:mybatis:3.4.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.mybatis:mybatis-spring:1.3.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework.boot:spring-boot-starter-jdbc:1.5.10.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.apache.tomcat:tomcat-jdbc:8.5.27\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.apache.tomcat:tomcat-juli:8.5.27\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-jdbc:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.springframework:spring-tx:4.3.14.RELEASE\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: log4j:log4j:1.2.17\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.projectlombok:lombok:1.18.18\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: log4j:log4j:1.2.17\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.grpc:grpc-netty-shaded:1.20.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.grpc:grpc-core:1.20.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.grpc:grpc-context:1.20.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.code.gson:gson:2.8.2\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.errorprone:error_prone_annotations:2.3.2\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.code.findbugs:jsr305:3.0.2\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.android:annotations:4.1.1.4\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.codehaus.mojo:animal-sniffer-annotations:1.17\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.opencensus:opencensus-api:0.19.2\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.opencensus:opencensus-contrib-grpc-metrics:0.19.2\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.grpc:grpc-protobuf:1.20.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.protobuf:protobuf-java:3.7.1\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.guava:guava:26.0-android\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: org.checkerframework:checker-compat-qual:2.5.2\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.j2objc:j2objc-annotations:1.1\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: com.google.api.grpc:proto-google-common-protos:1.12.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.grpc:grpc-protobuf-lite:1.20.0\" />\r\n          <element id=\"library\" level=\"project\" name=\"Maven: io.grpc:grpc-stub:1.20.0\" />\r\n        </element>\r\n      </element>\r\n      <element id=\"directory\" name=\"META-INF\">\r\n        <element id=\"file-copy\" path=\"$PROJECT_DIR$/target/circuitQA-0.0.1-SNAPSHOT/META-INF/MANIFEST.MF\" />\r\n      </element>\r\n      <element id=\"javaee-facet-resources\" facet=\"circuitQA/web/Web\" />\r\n    </root>\r\n  </artifact>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/circuitQA_war_exploded.xml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ .idea/artifacts/circuitQA_war_exploded.xml	(date 1617676301488)
@@ -23,7 +23,6 @@
           <element id="library" level="project" name="Maven: ch.qos.logback:logback-core:1.1.11" />
           <element id="library" level="project" name="Maven: org.slf4j:jcl-over-slf4j:1.7.25" />
           <element id="library" level="project" name="Maven: org.slf4j:jul-to-slf4j:1.7.25" />
-          <element id="library" level="project" name="Maven: org.slf4j:log4j-over-slf4j:1.7.25" />
           <element id="library" level="project" name="Maven: org.yaml:snakeyaml:1.17" />
           <element id="library" level="project" name="Maven: org.springframework.boot:spring-boot-starter-tomcat:1.5.10.RELEASE" />
           <element id="library" level="project" name="Maven: org.apache.tomcat.embed:tomcat-embed-core:8.5.27" />
@@ -64,8 +63,6 @@
           <element id="library" level="project" name="Maven: org.springframework:spring-jdbc:4.3.14.RELEASE" />
           <element id="library" level="project" name="Maven: org.springframework:spring-tx:4.3.14.RELEASE" />
           <element id="library" level="project" name="Maven: log4j:log4j:1.2.17" />
-          <element id="library" level="project" name="Maven: org.projectlombok:lombok:1.18.18" />
-          <element id="library" level="project" name="Maven: log4j:log4j:1.2.17" />
           <element id="library" level="project" name="Maven: io.grpc:grpc-netty-shaded:1.20.0" />
           <element id="library" level="project" name="Maven: io.grpc:grpc-core:1.20.0" />
           <element id="library" level="project" name="Maven: io.grpc:grpc-context:1.20.0" />
@@ -84,6 +81,7 @@
           <element id="library" level="project" name="Maven: com.google.api.grpc:proto-google-common-protos:1.12.0" />
           <element id="library" level="project" name="Maven: io.grpc:grpc-protobuf-lite:1.20.0" />
           <element id="library" level="project" name="Maven: io.grpc:grpc-stub:1.20.0" />
+          <element id="library" level="project" name="Maven: org.projectlombok:lombok:1.16.20" />
         </element>
       </element>
       <element id="directory" name="META-INF">
Index: src/main/java/cn/sysu/circuitQA/mapper/circuitQaMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.mapper;\r\n\r\nimport cn.sysu.circuitQA.pojo.circuitQa;\r\nimport cn.sysu.circuitQA.pojo.circuitQaExample;\r\nimport java.util.List;\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\npublic interface circuitQaMapper {\r\n    int countByExample(circuitQaExample example);\r\n\r\n    int deleteByExample(circuitQaExample example);\r\n\r\n    int insert(circuitQa record);\r\n\r\n    int insertSelective(circuitQa record);\r\n\r\n    List<circuitQa> selectByExample(circuitQaExample example);\r\n\r\n    int updateByExampleSelective(@Param(\"record\") circuitQa record, @Param(\"example\") circuitQaExample example);\r\n\r\n    int updateByExample(@Param(\"record\") circuitQa record, @Param(\"example\") circuitQaExample example);\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/mapper/circuitQaMapper.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/mapper/circuitQaMapper.java	(date 1617718625130)
@@ -19,5 +19,4 @@
     int updateByExampleSelective(@Param("record") circuitQa record, @Param("example") circuitQaExample example);
 
     int updateByExample(@Param("record") circuitQa record, @Param("example") circuitQaExample example);
-
 }
\ No newline at end of file
Index: circuitQA.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"web\" name=\"Web\">\r\n      <configuration>\r\n        <descriptors>\r\n          <deploymentDescriptor name=\"web.xml\" url=\"file://$MODULE_DIR$/src/main/webapp/WEB-INF/web.xml\" />\r\n        </descriptors>\r\n        <webroots>\r\n          <root url=\"file://$MODULE_DIR$/src/main/webapp\" relative=\"/\" />\r\n        </webroots>\r\n        <sourceRoots>\r\n          <root url=\"file://$MODULE_DIR$/src/main/java\" />\r\n          <root url=\"file://$MODULE_DIR$/src/main/resources\" />\r\n          <root url=\"file://$MODULE_DIR$/target/generated-sources/protobuf/grpc-java\" />\r\n          <root url=\"file://$MODULE_DIR$/target/generated-sources/protobuf/java\" />\r\n        </sourceRoots>\r\n      </configuration>\r\n    </facet>\r\n    <facet type=\"Spring\" name=\"Spring\">\r\n      <configuration />\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_8\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/target/generated-sources/protobuf/grpc-java\" isTestSource=\"false\" generated=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/target/generated-sources/protobuf/java\" isTestSource=\"false\" generated=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module-library\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$MODULE_DIR$/src/main/resources/jar/hanlp-1.7.8.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-web:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-autoconfigure:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-logging:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ch.qos.logback:logback-classic:1.1.11\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ch.qos.logback:logback-core:1.1.11\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:jcl-over-slf4j:1.7.25\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:jul-to-slf4j:1.7.25\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:log4j-over-slf4j:1.7.25\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.yaml:snakeyaml:1.17\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-tomcat:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-core:8.5.27\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat:tomcat-annotations-api:8.5.27\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-el:8.5.27\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-websocket:8.5.27\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate:hibernate-validator:5.3.6.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: javax.validation:validation-api:1.1.0.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss.logging:jboss-logging:3.3.1.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml:classmate:1.3.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-databind:2.8.10\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-annotations:2.8.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-core:2.8.10\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-web:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-aop:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-beans:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-context:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-webmvc:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-expression:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: mysql:mysql-connector-java:5.1.45\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-thymeleaf:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.thymeleaf:thymeleaf-spring4:2.1.6.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.thymeleaf:thymeleaf:2.1.6.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ognl:ognl:3.0.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.javassist:javassist:3.21.0-GA\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.unbescape:unbescape:1.1.0.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:slf4j-api:1.7.25\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.codehaus.groovy:groovy:2.4.13\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-starter-test:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-test:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-test-autoconfigure:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: com.jayway.jsonpath:json-path:2.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.minidev:json-smart:2.2.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.minidev:accessors-smart:1.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.ow2.asm:asm:5.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: junit:junit:4.12\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.assertj:assertj-core:2.6.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-core:1.10.19\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.objenesis:objenesis:2.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-core:1.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-library:1.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.skyscreamer:jsonassert:1.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-core:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework:spring-test:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:1.1.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mybatis:mybatis:3.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mybatis:mybatis-spring:1.3.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-jdbc:1.5.10.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat:tomcat-jdbc:8.5.27\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat:tomcat-juli:8.5.27\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-jdbc:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-tx:4.3.14.RELEASE\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: log4j:log4j:1.2.17\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.grpc:grpc-netty-shaded:1.20.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.grpc:grpc-core:1.20.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.grpc:grpc-context:1.20.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.gson:gson:2.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.errorprone:error_prone_annotations:2.3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.findbugs:jsr305:3.0.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.android:annotations:4.1.1.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.codehaus.mojo:animal-sniffer-annotations:1.17\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.opencensus:opencensus-api:0.19.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.opencensus:opencensus-contrib-grpc-metrics:0.19.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.grpc:grpc-protobuf:1.20.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.protobuf:protobuf-java:3.7.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.guava:guava:26.0-android\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.checkerframework:checker-compat-qual:2.5.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.j2objc:j2objc-annotations:1.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.api.grpc:proto-google-common-protos:1.12.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.grpc:grpc-protobuf-lite:1.20.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.grpc:grpc-stub:1.20.0\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- circuitQA.iml	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ circuitQA.iml	(date 1617676301457)
@@ -43,6 +43,7 @@
         <SOURCES />
       </library>
     </orderEntry>
+    <orderEntry type="library" name="Maven: org.slf4j:log4j-over-slf4j:1.7.25" level="project" />
     <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-web:1.5.10.RELEASE" level="project" />
     <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter:1.5.10.RELEASE" level="project" />
     <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot:1.5.10.RELEASE" level="project" />
@@ -52,7 +53,6 @@
     <orderEntry type="library" name="Maven: ch.qos.logback:logback-core:1.1.11" level="project" />
     <orderEntry type="library" name="Maven: org.slf4j:jcl-over-slf4j:1.7.25" level="project" />
     <orderEntry type="library" name="Maven: org.slf4j:jul-to-slf4j:1.7.25" level="project" />
-    <orderEntry type="library" name="Maven: org.slf4j:log4j-over-slf4j:1.7.25" level="project" />
     <orderEntry type="library" scope="RUNTIME" name="Maven: org.yaml:snakeyaml:1.17" level="project" />
     <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-tomcat:1.5.10.RELEASE" level="project" />
     <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-core:8.5.27" level="project" />
@@ -127,5 +127,6 @@
     <orderEntry type="library" name="Maven: com.google.api.grpc:proto-google-common-protos:1.12.0" level="project" />
     <orderEntry type="library" name="Maven: io.grpc:grpc-protobuf-lite:1.20.0" level="project" />
     <orderEntry type="library" name="Maven: io.grpc:grpc-stub:1.20.0" level="project" />
+    <orderEntry type="library" name="Maven: org.projectlombok:lombok:1.16.20" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/java/cn/sysu/circuitQA/service/KeyWordService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.sysu.circuitQA.service;\r\n\r\nimport cn.sysu.circuitQA.pojo.keyWord;\r\n\r\nimport java.util.List;\r\n\r\npublic interface KeyWordService {\r\n    List<keyWord> importKeyWords();\r\n\r\n    String getIDByKeyWord(String ID);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/cn/sysu/circuitQA/service/KeyWordService.java	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ src/main/java/cn/sysu/circuitQA/service/KeyWordService.java	(date 1617718358866)
@@ -1,7 +1,5 @@
 package cn.sysu.circuitQA.service;
 
-import cn.sysu.circuitQA.pojo.keyWord;
-
 import java.util.List;
 
 public interface KeyWordService {
Index: target/classes/templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n      xmlns:th=\"http://www.thymeleaf.org\"\r\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>电路知识问答</title>\r\n</head>\r\n\r\n<style type=\"text/css\">\r\n* {\r\n\tfont-size: 14px;\r\n\tpadding: 0;\r\n\tmargin: 0;\r\n}\r\n\r\n.main {\r\n\tposition: relative;\r\n\tmargin: 20px auto;\r\n\tborder: 1px solid steelblue;\r\n\twidth: 430px;\r\n\theight: 400px;\r\n}\r\n\r\n.msgInput {\r\n\tdisplay: block;\r\n\twidth: 406px;\r\n\theight: 60px;\r\n\tmargin: 10px auto;\r\n}\r\n\r\n.sendbtn {\r\n\tposition: absolute;\r\n\twidth: 100px;\r\n\theight: 29px;\r\n\tbottom: 5px;\r\n\tright: 10px;\r\n}\r\n\r\n.content {\r\n\tlist-style: none;\r\n\twidth: 410px;\r\n\theight: 280px;\r\n\tmargin: 5px auto;\r\n\tborder: 1px dotted #D1D3D6;\r\n\toverflow-y: scroll;\r\n}\r\n\r\n.msgContent {\r\n\twidth: auto;\r\n\tmax-width: 250px;\r\n\theight: auto;\r\n\tword-break: break-all;\r\n\tmargin: 5px;\r\n\tpadding: 3px;\r\n\tborder-radius: 5px;\r\n}\r\n\r\n.content .left {\r\n\tfloat: left;\r\n\ttext-align: left;\r\n\tbackground-color: lightgrey;\r\n}\r\n\r\n.content .right {\r\n\tfloat: right;\r\n\ttext-align: right;\r\n\tbackground-color: yellowgreen;\r\n}\r\n</style>\r\n<style>\r\nhtml,body {\r\n    font-size: 14px;\r\n    font-family: \"微软雅黑\", Helvetica, Tahoma, Arial, sans-serif;\r\n    color: #000;\r\n    background-color: #30333F;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\nimg {\r\n    border: 0;\r\n}\r\n.cf:before,.cf:after {\r\n    display: table;\r\n    content: \"\";\r\n}\r\n.cf:after {\r\n    clear: both;\r\n}\r\n.cf {\r\n    *zoom: 1;\r\n}\r\ncanvas{\r\nposition: fixed;\r\n    top: 0px;\r\n}\r\n</style>\r\n<script type=\"text/javascript\">\r\n    // <![CDATA[\r\n\twindow.onload = function() {\r\n        var questions = '';\r\n\t\tvar input = document.getElementById('msg_input');//查找缓存\r\n\t\tdocument.getElementById('sendbtn').onclick = function() {\r\n\t\t\tsendMsg();\r\n\t\t}\r\n\r\n\t\t//enter键 发送\r\n\t\tdocument.onkeypress = function(event) {\r\n\t\t\tvar e = event || window.event;\r\n\t\t\tvar keycode = e.keyCode || e.which;\r\n\t\t\tconsole.log(e)\r\n\t\t\tif (keycode == 13) {//按下enter键\r\n\t\t\t\tsendMsg();\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction sendMsg() {\r\n\t\t\tvar input = document.getElementById('msg_input');//查找缓存\r\n\t\t\tvar ul = document.getElementById('content');\r\n\t\t\tvar newLi = document.createElement('li');\r\n\t\t\tnewLi.innerHTML = input.value;\r\n\t\t\tnewLi.className = 'msgContent right';\r\n\t\t\tul.appendChild(newLi);\r\n\r\n\t\t\tvar div = document.createElement('div');\r\n\t\t\tdiv.style = 'clear:both';\r\n\t\t\tul.appendChild(div);\r\n            if (input.value.length > 1) {\r\n                ajax({\r\n                    url: '/qa/query?question=' + input.value,\r\n                    success: function (res) {\r\n                        console.log(res);\r\n                        var newLi = document.createElement('li');\r\n                        newLi.innerHTML = res;\r\n                        newLi.className = 'msgContent left';\r\n                        ul.appendChild(newLi);\r\n\r\n                        var div = document.createElement('div');\r\n                        div.style = 'clear:both';\r\n                        ul.appendChild(div);\r\n                        input.value = '';\r\n                        newLi.scrollIntoView();//将元素滚动到可见位置\r\n                    }\r\n                });\r\n                sleep(1000);\r\n                ajax({\r\n                    url: '/qa/subQuery?question=' + input.value,\r\n                    success: function (res) {\r\n                        console.log(res);\r\n                        questions = res;\r\n                        var newLi = document.createElement('li');\r\n                        newLi.innerHTML = '你还可以回复序号来了解以下问题： ' + res;\r\n                        newLi.className = 'msgContent left';\r\n                        ul.appendChild(newLi);\r\n\r\n                        var div = document.createElement('div');\r\n                        div.style = 'clear:both';\r\n                        ul.appendChild(div);\r\n                        input.value = '';\r\n                        newLi.scrollIntoView();//将元素滚动到可见位置\r\n                    }\r\n                });\r\n            } else {\r\n                ajax({\r\n                    url: '/qa/getAnswerByOrder?order=' + input.value + '&' + 'questions=' + questions,\r\n                    success: function (res) {\r\n                        console.log(res);\r\n                        questions = res;\r\n                        var newLi = document.createElement('li');\r\n                        newLi.innerHTML = res;\r\n                        newLi.className = 'msgContent left';\r\n                        ul.appendChild(newLi);\r\n\r\n                        var div = document.createElement('div');\r\n                        div.style = 'clear:both';\r\n                        ul.appendChild(div);\r\n                        input.value = '';\r\n                        newLi.scrollIntoView();//将元素滚动到可见位置\r\n                    }\r\n                });\r\n            }\r\n\r\n\t\t\tinput.value = '';\r\n\t\t\tnewLi.scrollIntoView();//将元素滚动到可见位置\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction ajax(obj) {\r\n\t\tvar xhr = null;\r\n\t\tif (window.ActiveXObject) {\r\n\t\t\txhr = new ActiveXObject('Microsoft.XMLHTTP')\r\n\t\t} else {\r\n\t\t\txhr = new XMLHttpRequest();\r\n\t\t}\r\n\r\n\t\t//打开与服务器的连接\r\n\t\tif (obj.method) {\r\n\t\t\txhr.open(obj.method, obj.url, true);\r\n\t\t} else {\r\n\t\t\txhr.open('get', obj.url, true);\r\n\t\t}\r\n\t\txhr.setRequestHeader(\"Content-Type\",\r\n\t\t\t\t\"application/x-www-form-urlencoded\");\r\n\t\txhr.setRequestHeader(\"Authorization\",\r\n\t\t\t\t\"APPCODE 3e9dfb924f464e9593a95f9d2bbf4348\")\r\n\r\n\t\txhr.onreadystatechange = function() {\r\n\r\n\t\t\tif (xhr.readyState == 4) {\r\n\t\t\t\t//数据接收完毕\r\n\t\t\t\tif (xhr.status == 200) {\r\n\t\t\t\t\t//console.log('请求成功',xhr.responseText)\r\n\t\t\t\t\tif (obj.success) {\r\n\t\t\t\t\t\tobj.success(xhr.responseText)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//console.log(xhr.status,'请求出错')\r\n\t\t\t\t\tif (obj.failure) {\r\n\t\t\t\t\t\tobj.failure('请求失败')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (obj.method == undefined || obj.method.toLowerCase() == 'get') {\r\n\t\t\txhr.send(null);\r\n\t\t} else {\r\n\t\t\txhr.send(obj.params);\r\n\r\n\t\t}\r\n\t}\r\n\r\n    function sleep(numberMillis) {\r\n        var now = new Date();\r\n        var exitTime = now.getTime() + numberMillis;\r\n        while (true) {\r\n            now = new Date();\r\n            if (now.getTime() > exitTime)\r\n                return;\r\n        }\r\n    }\r\n    // ]]>\r\n</script>\r\n\r\n<body>\r\n    <canvas id=\"canvas\" width=\"1293\" height=\"717\"></canvas>\r\n    <div id=\"main\" class=\"main\">\r\n        <ul id=\"content\" class=\"content\">\r\n            <li class=\"msgContent left\">你好，有什么电路基础课程相关的问题可以问我哦</li>\r\n                <div style=\"clear: both\"></div>\r\n        </ul>\r\n        <textarea name=\"question\" id=\"msg_input\" class=\"msgInput\" placeholder=\"请输入问题\"></textarea>\r\n        <button id=\"sendbtn\" class=\"sendbtn\">发送</button>\r\n        <button id=\"returnbtn\" class=\"returnbtn\" onclick=\"javascript:window.location.href= '/'\">返回主页</button>\r\n    </div>\r\n</body>\r\n\r\n<script type=\"text/javascript\">\r\nwindow.requestAnimFrame = (function () {\r\n    return window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        function (callback) {\r\n            window.setTimeout(callback, 1000 / 60);\r\n        };\r\n})();\r\nvar can = document.getElementById(\"canvas\");\r\nvar cxt = can.getContext(\"2d\");\r\ncan.width = 1920;\r\ncan.height = 950;\r\ncxt.lineWidth = 0.3;\r\n//初始链接线条显示位置\r\nvar mousePosition = {\r\n    x: 30 * can.width / 100,\r\n    y: 30 * can.height / 100\r\n}\r\n//圆形粒子对象参数\r\nvar dots = {\r\n    n: 500,//圆形粒子个数\r\n    distance: 50,//圆形粒子之间的距离\r\n    d_radius: 100,//粒子距离鼠标点的距离\r\n    array: []//保存n个圆形粒子对象\r\n}\r\n//创建随即颜色值\r\nfunction colorValue(min) {\r\n    return Math.floor(Math.random() * 255 + min);\r\n}\r\nfunction createColorStyle(r, g, b) {\r\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\r\n}\r\n//混合两个圆形粒子的颜色\r\nfunction mixConnect(c1, r1, c2, r2) {//圆的颜色 半径\r\n    return (c1 * r1 + c2 * r2) / (r1 + r2);\r\n};\r\n//生成线条的颜色\r\nfunction lineColor(dot1, dot2) {//获取具体的圆的颜色再计算\r\n    var color1 = dot1.color,\r\n        color2 = dot2.color;\r\n    var r = mixConnect(color1.r, dot1.radius, color2.r, dot2.radius);\r\n    var g = mixConnect(color1.g, dot1.radius, color2.g, dot2.radius);\r\n    var b = mixConnect(color1.b, dot1.radius, color2.b, dot2.radius);\r\n    return createColorStyle(Math.floor(r), Math.floor(g), Math.floor(b));\r\n}\r\n//生成圆形粒子的颜色对象\r\nfunction Color(min) {\r\n    min = min || 0;\r\n    this.r = colorValue(min);\r\n    this.g = colorValue(min);\r\n    this.b = colorValue(min);\r\n    this.style = createColorStyle(this.r, this.g, this.b);\r\n}\r\n//创建圆形粒子对象\r\nfunction Dot() {\r\n    //圆形粒子随机圆心坐标点\r\n    this.x = Math.random() * can.width;\r\n    this.y = Math.random() * can.height;\r\n    //x y 方向运动的速度值\r\n    this.vx = -0.5 + Math.random();\r\n    this.vy = -0.5 + Math.random();\r\n\r\n    this.radius = Math.random() * 5;\r\n    //this.color = \"#ff3333\";\r\n    this.color = new Color();\r\n}\r\n//绘制出圆形粒子\r\nDot.prototype.draw = function () {\r\n    cxt.beginPath();\r\n    cxt.fillStyle = this.color.style;\r\n    cxt.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    cxt.fill();\r\n}\r\n//添加圆形粒子\r\nfunction createCircle() {\r\n\t/*<![CDATA[*/  for (var i = 0; i < dots.n; i++) {\r\n        dots.array.push(new Dot());\r\n    }/*<![CDATA[*/\r\n}\r\n//绘制出圆形粒子\r\nfunction drawDots() {\r\n    for (var i = 0; i < dots.n; i++) {\r\n        var dot = dots.array[i];\r\n        dot.draw();\r\n    }\r\n}\r\n\r\n//drawDots();\r\n//移动\r\nfunction moveDots() {\r\n    for (var i = 0; i < dots.n; i++) {\r\n        var dot = dots.array[i];\r\n        //当圆形粒子对象碰壁的时候就反弹回来\r\n        if (dot.y < 0 || dot.y > can.height) {\r\n            dot.vx = dot.vx;\r\n            dot.vy = -dot.vy;\r\n        } else if (dot.x < 0 || dot.x > can.width) {\r\n            dot.vx = -dot.vx;\r\n            dot.vy = dot.vy;\r\n        }\r\n        //给圆形粒子圆心坐标加上速度值移动圆形粒子\r\n        dot.x += dot.vx;\r\n        dot.y += dot.vy;\r\n    }\r\n}\r\n//链接粒子对象\r\nfunction connectDots() {\r\n    for (var i = 0; i < dots.n; i++) {\r\n        for (var j = 0; j < dots.n; j++) {\r\n            iDot = dots.array[i];\r\n            jDot = dots.array[j];\r\n            /*<![CDATA[*/  if ((iDot.x - jDot.x) < dots.distance && (iDot.y - jDot.y) < dots.distance && (iDot.x - jDot.x) > -dots.distance && (iDot.y - jDot.y) > -dots.distance) {\r\n                if ((iDot.x - mousePosition.x) < dots.d_radius && (iDot.y - mousePosition.y) < dots.d_radius && (iDot.x - mousePosition.x) > -dots.d_radius && (iDot.y - mousePosition.y) > -dots.d_radius) {\r\n                    cxt.beginPath();\r\n                    //cxt.strokeStyle = \"yellow\";\r\n                    cxt.strokeStyle = lineColor(iDot, jDot);\r\n                    cxt.moveTo(iDot.x, iDot.y);\r\n                    cxt.lineTo(jDot.x, jDot.y);\r\n                    cxt.closePath();\r\n                    cxt.stroke();\r\n                }\r\n\r\n            }/*]]>*/\r\n        }\r\n    }\r\n}\r\ncreateCircle();\r\n//让圆形粒子不断的移动\r\nfunction animateDots() {\r\n    cxt.clearRect(0, 0, can.width, can.height);\r\n    moveDots();\r\n    connectDots()\r\n    drawDots();\r\n    requestAnimFrame(animateDots);\r\n}\r\nanimateDots();\r\n\r\ncan.onmousemove = function (ev) {\r\n    var ev = ev || window.event;\r\n    mousePosition.x = ev.pageX;\r\n    mousePosition.y = ev.pageY;\r\n}\r\ncan.onmouseout = function () {\r\n    mousePosition.x = can.width / 2;\r\n    mousePosition.y = can.height / 2;\r\n}\r\n</script>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/templates/index.html	(revision 6f7707569fe8711f58c7b662d32a657c52ec42e4)
+++ target/classes/templates/index.html	(date 1617675223337)
@@ -19,13 +19,13 @@
 	margin: 20px auto;
 	border: 1px solid steelblue;
 	width: 430px;
-	height: 400px;
+	height: 600px;
 }
 
 .msgInput {
 	display: block;
 	width: 406px;
-	height: 60px;
+	height: 90px;
 	margin: 10px auto;
 }
 
@@ -36,11 +36,19 @@
 	bottom: 5px;
 	right: 10px;
 }
+#herf {
+    position: absolute;
+    width: 100px;
+    height: 29px;
+    bottom: 2px;
+    left: 8px;
+    color: white;
+}
 
 .content {
 	list-style: none;
 	width: 410px;
-	height: 280px;
+	height: 450px;
 	margin: 5px auto;
 	border: 1px dotted #D1D3D6;
 	overflow-y: scroll;
@@ -98,61 +106,77 @@
 <script type="text/javascript">
     // <![CDATA[
 	window.onload = function() {
-        var questions = '';
-		var input = document.getElementById('msg_input');//查找缓存
+        let questions = '';
+        let question = '';
+		let input = document.getElementById('msg_input');//查找缓存
 		document.getElementById('sendbtn').onclick = function() {
 			sendMsg();
 		}
-
 		//enter键 发送
 		document.onkeypress = function(event) {
-			var e = event || window.event;
-			var keycode = e.keyCode || e.which;
+			let e = event || window.event;
+			let keycode = e.keyCode || e.which;
 			console.log(e)
 			if (keycode == 13) {//按下enter键
-				sendMsg();
+				sendMsg()
 			}
 		}
 		function sendMsg() {
-			var input = document.getElementById('msg_input');//查找缓存
-			var ul = document.getElementById('content');
-			var newLi = document.createElement('li');
+			let input = document.getElementById('msg_input');//查找缓存
+			let ul = document.getElementById('content');
+			let newLi = document.createElement('li');
 			newLi.innerHTML = input.value;
 			newLi.className = 'msgContent right';
 			ul.appendChild(newLi);
 
-			var div = document.createElement('div');
+			let div = document.createElement('div');
 			div.style = 'clear:both';
 			ul.appendChild(div);
-            if (input.value.length > 1) {
+            if (isNaN(input.value)) {
+                question = input.value;
                 ajax({
-                    url: '/qa/query?question=' + input.value,
+                    url: '/qa/query?question=' + question,
                     success: function (res) {
-                        console.log(res);
-                        var newLi = document.createElement('li');
+                        let newLi = document.createElement('li');
                         newLi.innerHTML = res;
                         newLi.className = 'msgContent left';
                         ul.appendChild(newLi);
 
-                        var div = document.createElement('div');
+                        let div = document.createElement('div');
                         div.style = 'clear:both';
                         ul.appendChild(div);
                         input.value = '';
                         newLi.scrollIntoView();//将元素滚动到可见位置
                     }
                 });
-                sleep(1000);
+                // let Li = document.createElement('li');
+                // let a = document.createElement('a');
+                // a.href = "http://localhost:8081/1";
+                // a.innerHTML = "网孔法例题";
+                // Li.className = 'msgContent left';
+                // Li.appendChild(a);
+                // ul.appendChild(Li);
+                let div = document.createElement('div');
+                div.style = 'clear:both';
+                ul.appendChild(div);
+                newLi.scrollIntoView();//将元素滚动到可见位置
                 ajax({
-                    url: '/qa/subQuery?question=' + input.value,
+                    url: '/qa/subQuery?question=' + question,
                     success: function (res) {
-                        console.log(res);
+                        //console.log(res);
+                        if (res.length < 1) {
+                            return;
+                        }
                         questions = res;
-                        var newLi = document.createElement('li');
-                        newLi.innerHTML = '你还可以回复序号来了解以下问题： ' + res;
+                        let array = res.split("@");
+                        let output = "";
+                        for(i = 0;i<array.length;i++) {output += i.toString() + "." + array[i] + "\n";}
+                        let newLi = document.createElement('li');
+                        newLi.innerHTML = '你还可以回复序号来了解以下问题： ' + output;
                         newLi.className = 'msgContent left';
                         ul.appendChild(newLi);
 
-                        var div = document.createElement('div');
+                        let div = document.createElement('div');
                         div.style = 'clear:both';
                         ul.appendChild(div);
                         input.value = '';
@@ -163,30 +187,31 @@
                 ajax({
                     url: '/qa/getAnswerByOrder?order=' + input.value + '&' + 'questions=' + questions,
                     success: function (res) {
-                        console.log(res);
-                        questions = res;
-                        var newLi = document.createElement('li');
+                        if (res.length < 1) {
+                            return;
+                        }
+                        let newLi = document.createElement('li');
                         newLi.innerHTML = res;
                         newLi.className = 'msgContent left';
                         ul.appendChild(newLi);
 
-                        var div = document.createElement('div');
+                        let div = document.createElement('div');
                         div.style = 'clear:both';
                         ul.appendChild(div);
                         input.value = '';
-                        newLi.scrollIntoView();//将元素滚动到可见位置
+                        newLi.scrollIntoView();
                     }
                 });
             }
 
 			input.value = '';
-			newLi.scrollIntoView();//将元素滚动到可见位置
+			newLi.scrollIntoView();
 		}
 
 	}
 
 	function ajax(obj) {
-		var xhr = null;
+		let xhr = null;
 		if (window.ActiveXObject) {
 			xhr = new ActiveXObject('Microsoft.XMLHTTP')
 		} else {
@@ -195,9 +220,9 @@
 
 		//打开与服务器的连接
 		if (obj.method) {
-			xhr.open(obj.method, obj.url, true);
+			xhr.open(obj.method, obj.url, false);
 		} else {
-			xhr.open('get', obj.url, true);
+			xhr.open('get', obj.url, false);
 		}
 		xhr.setRequestHeader("Content-Type",
 				"application/x-www-form-urlencoded");
@@ -231,8 +256,8 @@
 	}
 
     function sleep(numberMillis) {
-        var now = new Date();
-        var exitTime = now.getTime() + numberMillis;
+        let now = new Date();
+        let exitTime = now.getTime() + numberMillis;
         while (true) {
             now = new Date();
             if (now.getTime() > exitTime)
@@ -249,9 +274,9 @@
             <li class="msgContent left">你好，有什么电路基础课程相关的问题可以问我哦</li>
                 <div style="clear: both"></div>
         </ul>
-        <textarea name="question" id="msg_input" class="msgInput" placeholder="请输入问题"></textarea>
+        <textarea id="msg_input" class="msgInput"></textarea>
+        <a href="/message" id="herf" target="_blank">反馈入口在这里</a>
         <button id="sendbtn" class="sendbtn">发送</button>
-        <button id="returnbtn" class="returnbtn" onclick="javascript:window.location.href= '/'">返回主页</button>
     </div>
 </body>
 
@@ -264,18 +289,18 @@
             window.setTimeout(callback, 1000 / 60);
         };
 })();
-var can = document.getElementById("canvas");
-var cxt = can.getContext("2d");
+let can = document.getElementById("canvas");
+let cxt = can.getContext("2d");
 can.width = 1920;
 can.height = 950;
 cxt.lineWidth = 0.3;
 //初始链接线条显示位置
-var mousePosition = {
+let mousePosition = {
     x: 30 * can.width / 100,
     y: 30 * can.height / 100
 }
 //圆形粒子对象参数
-var dots = {
+let dots = {
     n: 500,//圆形粒子个数
     distance: 50,//圆形粒子之间的距离
     d_radius: 100,//粒子距离鼠标点的距离
@@ -294,11 +319,11 @@
 };
 //生成线条的颜色
 function lineColor(dot1, dot2) {//获取具体的圆的颜色再计算
-    var color1 = dot1.color,
+    let color1 = dot1.color,
         color2 = dot2.color;
-    var r = mixConnect(color1.r, dot1.radius, color2.r, dot2.radius);
-    var g = mixConnect(color1.g, dot1.radius, color2.g, dot2.radius);
-    var b = mixConnect(color1.b, dot1.radius, color2.b, dot2.radius);
+    let r = mixConnect(color1.r, dot1.radius, color2.r, dot2.radius);
+    let g = mixConnect(color1.g, dot1.radius, color2.g, dot2.radius);
+    let b = mixConnect(color1.b, dot1.radius, color2.b, dot2.radius);
     return createColorStyle(Math.floor(r), Math.floor(g), Math.floor(b));
 }
 //生成圆形粒子的颜色对象
@@ -331,14 +356,14 @@
 }
 //添加圆形粒子
 function createCircle() {
-	/*<![CDATA[*/  for (var i = 0; i < dots.n; i++) {
+	/*<![CDATA[*/  for (let i = 0; i < dots.n; i++) {
         dots.array.push(new Dot());
     }/*<![CDATA[*/
 }
 //绘制出圆形粒子
 function drawDots() {
-    for (var i = 0; i < dots.n; i++) {
-        var dot = dots.array[i];
+    for (let i = 0; i < dots.n; i++) {
+        let dot = dots.array[i];
         dot.draw();
     }
 }
@@ -346,8 +371,8 @@
 //drawDots();
 //移动
 function moveDots() {
-    for (var i = 0; i < dots.n; i++) {
-        var dot = dots.array[i];
+    for (let i = 0; i < dots.n; i++) {
+        let dot = dots.array[i];
         //当圆形粒子对象碰壁的时候就反弹回来
         if (dot.y < 0 || dot.y > can.height) {
             dot.vx = dot.vx;
@@ -363,8 +388,8 @@
 }
 //链接粒子对象
 function connectDots() {
-    for (var i = 0; i < dots.n; i++) {
-        for (var j = 0; j < dots.n; j++) {
+    for (let i = 0; i < dots.n; i++) {
+        for (let j = 0; j < dots.n; j++) {
             iDot = dots.array[i];
             jDot = dots.array[j];
             /*<![CDATA[*/  if ((iDot.x - jDot.x) < dots.distance && (iDot.y - jDot.y) < dots.distance && (iDot.x - jDot.x) > -dots.distance && (iDot.y - jDot.y) > -dots.distance) {
